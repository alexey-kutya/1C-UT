&НаСервереБезКонтекста
Функция ПолучитьАдресФайлаНаСервере(Файл)

	Возврат ПоместитьВоВременноеХранилище(Файл.ХранилищеФайла.Получить());

КонецФункции // ПолучитьФайлНаСервере()

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ОбновитьПолеHTML();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПолеHTML()
	
	СписокТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если СписокТекущиеДанные = Неопределено Тогда
	    Если НЕ Элементы.ТекстHTML.Документ = Неопределено Тогда
			Если НЕ Элементы.ТекстHTML.Документ.activeElement = Неопределено Тогда
				Элементы.ТекстHTML.Документ.activeElement.InnerText = "";
			КонецЕсли; 
		КонецЕсли; 
		Возврат;
	КонецЕсли;
	
	Если ТипОписания = 0 Тогда
		ТипФайла = ПредопределенноеЗначение("Перечисление.ТипыФайлов.ТехническоеОписание");
	Иначе
		ТипФайла = ПредопределенноеЗначение("Перечисление.ТипыФайлов.ИнструкцияПользователя");
	КонецЕсли; 
	
	ФайлТехническогоОписания = ТИ.ПолучитьФайлФункцииНаСервере(СписокТекущиеДанные.Ссылка, ТипФайла);

	Если НЕ ЗначениеЗаполнено(ФайлТехническогоОписания) Тогда
		Если НЕ Элементы.ТекстHTML.Документ.activeElement = Неопределено Тогда
			Элементы.ТекстHTML.Документ.activeElement.InnerText = "Для элемента "+СписокТекущиеДанные.Ссылка+" нет описания.";
		КонецЕсли; 
		Возврат;
	КонецЕсли; 
	
	Адрес = ПолучитьАдресФайлаНаСервере(ФайлТехническогоОписания);
	
	Интерактивно = Истина;
//	#Если ВебКлиент Тогда
//		//ИмяФайла = ТИ.ПолучитьПолноеОписаниеФайла(ФайлТехническогоОписания);
////		ИмяВременногоФайла = "\\RA-7741-1\Temp\"+ИмяФайла;
//		ИмяВременногоФайла = "\\RA-7741-1\Temp\page.mht";
//		
//		ЗаписатьФайлНаСервере(Адрес, ИмяВременногоФайла);
//	#Иначе
//		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".mht");
//		Интерактивно = Ложь;
//		ПолучитьФайл(Адрес, ИмяВременногоФайла, Интерактивно);
//	#КонецЕсли
	#Если ВебКлиент Тогда
		ИмяВременногоФайла = "page.mht";
	#Иначе
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".mht");
		Интерактивно = Ложь;
	#КонецЕсли
	
	ПолучитьФайл(Адрес, ИмяВременногоФайла, Интерактивно);
	
	ТекстHTML = ИмяВременногоФайла;
	//#Если ВебКлиент Тогда
	//	ЭтаФорма.ОбновитьОтображениеДанных();
	//#КонецЕсли
	
	#Если НЕ ВебКлиент Тогда
		ТекстHTML = ИмяВременногоФайла;
	#КонецЕсли

КонецПроцедуры // ОбновитьПолеHTML()

&НаСервереБезКонтекста
Процедура ЗаписатьФайлНаСервере(Адрес, ИмяВременногоФайла)

	ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
КонецПроцедуры // ПолучитьФайлНаСервере()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ТИ.ДоступнаРоль("ПолныеПрава") Тогда
		ТипОписания = 0;
	ИначеЕсли ТИ.ДоступнаРоль("Разработчик") Тогда	
		ТипОписания = 0;
		Элементы.Команды.Видимость = Ложь;
	Иначе	
		ТипОписания = 1;
		Элементы.ТипОписания.Видимость = Ложь;
		Элементы.Команды.Видимость = Ложь;
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ТипОписанияПриИзменении(Элемент)
	
	ОбновитьПолеHTML();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСсылкуНаИнструкциюПоПочте(Команда)
	
	ТипФайла = ПредопределенноеЗначение("Перечисление.ТипыФайлов.ИнструкцияПользователя");
	
	ФункцияСсылка = Элементы.Список.ТекущиеДанные.Ссылка;
	Файл = ТИ.ПолучитьФайлФункцииНаСервере(ФункцияСсылка, ТипФайла);
	Если Файл = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не найден файл "+ТипФайла;
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
	
	ОписаниеТипов = Новый ОписаниеТипов(Массив);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаЗначения", 
      ЭтотОбъект, Файл);	
 
    ПоказатьВводЗначения(
        Оповещение,
        , // пропускаем начальное значение
        "Выберите адресата",
        ОписаниеТипов
    );
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаЗначения(Результат, Параметры) Экспорт

	Физлицо = Результат;
	Файл = Параметры;
	Если Не Результат = Неопределено Тогда
		АдресЭлектроннойПочты = ТИ.ПолучитьРеквизитПоСсылке(Физлицо,"АдресЭлектроннойПочты");
		Если НЕ ЗначениеЗаполнено(АдресЭлектроннойПочты) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Для данного физ. лица не задан адрес электронной почты.";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		
		ШаблонСообщения = ПредопределенноеЗначение("Справочник.ШаблоныСообщений.СсылкаНаИнструкцию");
		
		ТИ.СформироватьИОтправитьУведомление(Файл, ШаблонСообщения, АдресЭлектроннойПочты);
		
		ПоказатьОповещениеПользователя("Сообщение подготовлено и будет отправлено в течении 5 минут.");
		
	КонецЕсли;
	
КонецПроцедуры // ПослеВводаЗначения()

&НаКлиенте
Процедура НоваяФункция(Команда)
	
	ПоказатьВводСтроки(Новый ОписаниеОповещения("ПослеВводаОбращения",ЭтаФорма) , , "Напишите название функции и ее назначение", , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаОбращения(ТекстОбращения,ДопПараметры) Экспорт 

	Если ЗначениеЗаполнено(ТекстОбращения) Тогда
		
		Адреса = ТИ.ПолучитьСистемныеПочтовыеАдреса();
		
		Отправитель = ТИ.ПолучитьРеквизитПоСсылке(ТИ.ТекущийПользователь(), "Физлицо");
		
		ШаблонСообщения = ПредопределенноеЗначение("Справочник.ШаблоныСообщений.ЗапросНаСозданиеФункции");
		
		ТИ.СформироватьИОтправитьУведомление(ПредопределенноеЗначение("Справочник.Функции.ПустаяСсылка"), ШаблонСообщения, Адреса.АдресHelpDesk,ТекстОбращения,Отправитель,,,,,Адреса.АдресАдминистратораСистемы);
		
		ПоказатьПредупреждение(,"Ваш запрос на создание функции отправлен в службу поддержки и будет рассмотрен в ближайшее время.",,"Уведомление")
		
	КонецЕсли; 

КонецПроцедуры
 

