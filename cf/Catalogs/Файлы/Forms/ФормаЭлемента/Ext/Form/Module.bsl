
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоНовый = Параметры.Ключ.Пустая();
	
	Параметры.Свойство("ПоказатьДиалогЗагрузкиИзФайлаПриОткрытии", ПоказатьДиалогЗагрузкиИзФайлаПриОткрытии);
	
	Если ЭтоНовый Тогда
		Объект.Ответственный = ТИ.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайл1(Команда)
	
	#Если НЕ ВебКлиент Тогда
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Диалог.Заголовок = "Выберите файл";
		Диалог.ПолноеИмяФайла = "";
		Диалог.ПредварительныйПросмотр = Истина;
		Диалог.Фильтр = "Документ PDF (*.pdf)|*.pdf|";
		
		Если Диалог.Выбрать() Тогда
			ПомещаемыеФайлы = Новый Массив;
			Описание = Новый ОписаниеПередаваемогоФайла(Диалог.ПолноеИмяФайла, "");
			ПомещаемыеФайлы.Добавить(Описание);
			
			ПомещенныеФайлы = Новый Массив;
			
			Если ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, ЭтаФорма.УникальныйИдентификатор) Тогда        
				
				МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПомещенныеФайлы[0].Имя, "\");
				ИмяФайла = МассивПодстрок.Получить(МассивПодстрок.ВГраница());
				АдресДанных = ПомещенныеФайлы[0].Хранение;
				
				Объект.ИмяФайла = ИмяФайла;
				
			Иначе	
			КонецЕсли;		
			
		Иначе
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	#Иначе
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьВыборФайла", ЭтотОбъект);
		НачатьПомещениеФайла(Оповещение,,,Истина, УникальныйИдентификатор);
	#КонецЕсли  		
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборФайла(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВыбранноеИмяФайла, "\");
	ИмяФайла = МассивПодстрок.Получить(МассивПодстрок.ВГраница());
	Объект.ИмяФайла = ИмяФайла;
	Расширение = Прав(ИмяФайла, 3);
	Если НРег(Расширение) = "pdf" Тогда
		АдресДанных = Адрес;
	Иначе
		ПоказатьПредупреждение(,"Файл должен быть в формате pdf !");
	КонецЕсли; 
	
КонецПроцедуры // ()

#Область ЗагрузкаФайла

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	//Если Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияОбращений.НаДоработке") ИЛИ Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияОбращений.НаТестировании") Тогда
	//	
	//	Режим = РежимДиалогаВопрос.ДаНет;
	//	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтаФорма, Параметры);

	//	ПоказатьВопрос(Оповещение,"ВНИМАНИЕ!!! В настоящий момент по обработке ведутся работы. Продолжить?",Режим);
	//Иначе
	//	ОбновлениеИзФайлаЗапуск();
	//КонецЕсли; 
	
	ОбновлениеИзФайлаЗапуск();

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	
	ОбновлениеИзФайлаЗапуск();

КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеИзФайлаЗапуск()
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Успех", Ложь);
	ПараметрыРегистрации.Вставить("АдресДанных", АдресДанных);
	ПараметрыРегистрации.Вставить("ОбработчикРезультата", Новый ОписаниеОповещения("ОбновлениеИзФайлаЗавершение", ЭтотОбъект));
	
	Обработчик = Новый ОписаниеОповещения("ОбновлениеИзФайлаПослеВыбораФайла", ЭтотОбъект, ПараметрыРегистрации);
	
	ПараметрыДиалога = Новый Структура("Режим, Фильтр, ИндексФильтра, Заголовок");
	ПараметрыДиалога.Режим  = РежимДиалогаВыбораФайла.Открытие;
//	ПараметрыДиалога.Фильтр = "Файл (*.pdf;*.doc;*.docx;*.xls;*.xlsx)|*.pdf;*.doc;*.docx;*.xls;*.xlsx|Документ PDF (*.pdf)|*.pdf|Документ Word (*.doc)|*.doc|Документ Word (*.docx)|*.docx|Лист Excel (*.xls)|*.xls|Лист Excel (*.xlsx)|*.xlsx";
	ПараметрыДиалога.Фильтр = "Веб-архив (*.mht)|*.mht";
	ПараметрыДиалога.ИндексФильтра = 0;
	ПараметрыДиалога.Заголовок = НСтр("ru = 'Выберите файл'");
	
//	ДополнительныеОтчетыИОбработкиКлиент.ПоказатьПомещениеФайла(Обработчик, УникальныйИдентификатор, Объект.ИмяФайла, ПараметрыДиалога);
	ПоказатьПомещениеФайла(Обработчик, УникальныйИдентификатор, "", ПараметрыДиалога);
	
КонецПроцедуры

// Показывает диалог выбора файлов и помещает выбранные файлы во временное хранилище.
//   Совмещает работу методов глобального метода НачатьПомещениеФайла и ПоместитьФайлы,
//   возвращая идентичный результат вне зависимости от того, подключено расширение работы с файлами, или нет.
//
// Параметры:
//   ОбработчикРезультата - ОписаниеОповещения - Описание процедуры, принимающей результат выбора.
//   ИдентификаторФормы - УникальныйИдентификатор - Уникальный идентификатор формы, из которой выполняется размещение файла.
//   НачальноеИмяФайла - Строка - Полный путь и имя файла, которые будут предложены пользователю в начале выбора.
//   ПараметрыДиалога - Структура, Неопределено - См. свойства ДиалогВыбораФайла в синтакс-помощнике.
//       Используется в случае, если удалось подключить расширение работы с файлами.
//
// Значение первого параметра, возвращаемого в ОбработчикРезультата:
//   ПомещенныеФайлы - Результат выбора.
//       * - Неопределено - Пользователь отказался от выбора.
//       * - Массив из ОписаниеПереданногоФайла, Структура - Пользователь выбрал файл.
//           ** Имя      - Строка - Полное имя выбранного файла.
//           ** Хранение - Строка - Адрес во временном хранилище, по которому размещен файл.
//
// Ограничения:
//   Используется только для интерактивного выбора в диалоге.
//   Не используется для выбора каталогов - эта опция не поддерживается веб-клиентом.
//   Не поддерживается множественный выбор в веб-клиенте, если не установлено расширение работы с файлами.
//   Не поддерживается передача адреса временного хранилища.
//
&НаКлиенте
Процедура ПоказатьПомещениеФайла(ОбработчикРезультата, ИдентификаторФормы, НачальноеИмяФайла, ПараметрыДиалога)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		
		Если ПараметрыДиалога = Неопределено Тогда
			ПараметрыДиалога = Новый Структура;
		КонецЕсли;
		Если ПараметрыДиалога.Свойство("Режим") Тогда
			Режим = ПараметрыДиалога.Режим;
			Если Режим = РежимДиалогаВыбораФайла.ВыборКаталога Тогда
				ВызватьИсключение НСтр("ru = 'Выбор каталога не поддерживается'");
			КонецЕсли;
		Иначе
			Режим = РежимДиалогаВыбораФайла.Открытие;
		КонецЕсли;
		
		Диалог = Новый ДиалогВыбораФайла(Режим);
		Диалог.ПолноеИмяФайла = НачальноеИмяФайла;
		ЗаполнитьЗначенияСвойств(Диалог, ПараметрыДиалога);
		
		ПомещенныеФайлы = Новый Массив;
		Если ИдентификаторФормы <> Неопределено Тогда
			ВыборВыполнен = ПоместитьФайлы(, ПомещенныеФайлы, Диалог, Истина, ИдентификаторФормы);
		Иначе
			ВыборВыполнен = ПоместитьФайлы(, ПомещенныеФайлы, Диалог, Истина);
		КонецЕсли;
		ОбработатьРезультатПомещенияФайла(ВыборВыполнен, ПомещенныеФайлы, Неопределено, ДополнительныеПараметры);
		
	Иначе
		
		Обработчик = Новый ОписаниеОповещения("ОбработатьРезультатПомещенияФайла", ЭтотОбъект, ДополнительныеПараметры);
		НачатьПомещениеФайла(Обработчик, , НачальноеИмяФайла, Истина, ИдентификаторФормы);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик результата работы процедуры ПоказатьПомещениеФайла.
&НаКлиенте
Процедура ОбработатьРезультатПомещенияФайла(ВыборВыполнен, АдресИлиРезультатВыбора, ВыбранноеИмяФайла, ДополнительныеПараметры)
	
	Если ТипЗнч(ДополнительныеПараметры.ОбработчикРезультата) = Тип("ОписаниеОповещения") Тогда
		
		Если ВыборВыполнен = Истина Тогда
			Если ТипЗнч(АдресИлиРезультатВыбора) = Тип("Массив") Тогда
				РезультатВыбора = АдресИлиРезультатВыбора;
			Иначе
				РезультатВыбора = Новый Массив;
				ЭлементРезультата = Новый Структура;
				ЭлементРезультата.Вставить("Хранение", АдресИлиРезультатВыбора);
				ЭлементРезультата.Вставить("Имя",      ВыбранноеИмяФайла);
				РезультатВыбора.Добавить(ЭлементРезультата);
			КонецЕсли;
		Иначе
			РезультатВыбора = Неопределено;
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, РезультатВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеИзФайлаПослеВыбораФайла(ПомещенныеФайлы, ПараметрыРегистрации) Экспорт 
	Если ПомещенныеФайлы = Неопределено Или ПомещенныеФайлы.Количество() = 0 Тогда
		ВыполнитьОбработкуОповещения(ПараметрыРегистрации.ОбработчикРезультата, ПараметрыРегистрации);
		Возврат;
	КонецЕсли;
	
	ОписаниеФайла = ПомещенныеФайлы[0];
	
	Если ЭтоНовый ИЛИ НЕ ЭтоАдресВременногоХранилища(АдресДанных) Тогда
		СоздатьНовуюВерсию = Истина;
	Иначе
		ДвоичныеДанныеТекущаяВерсия = ПолучитьИзВременногоХранилища(АдресДанных);
		ДвоичныеДанныеНоваяВерсия = ПолучитьИзВременногоХранилища(ОписаниеФайла.Хранение);
		Если ДвоичныеДанныеТекущаяВерсия = ДвоичныеДанныеНоваяВерсия Тогда
			Сообщить("Файл обработки не изменился, новая версия не будет добавлена.");
			СоздатьНовуюВерсию = Ложь;
		Иначе
			Сообщить("Изменился файл обработки, будет добавлена новая версия.");
			СоздатьНовуюВерсию = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
	Ключи = Новый Структура("ИмяФайла, ЭтоОтчет, ОтключатьПубликацию, ОтключатьКонфликтующие, Конфликтующие");
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыРегистрации, Ключи, Ложь);
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеФайла.Имя, "\");
	ПараметрыРегистрации.ИмяФайла = МассивПодстрок.Получить(МассивПодстрок.ВГраница());
	Позиция = СтрНайти(Прав(ПараметрыРегистрации.ИмяФайла, 5),".");
	Если Позиция > 0 Тогда
	
		РасшКолСимв = 5-Позиция;
	
	КонецЕсли; 
	РасширениеФайла = ВРег(Прав(ПараметрыРегистрации.ИмяФайла, РасшКолСимв));
	
	Если НЕ НРег(РасширениеФайла) = "mht" Тогда
		ПараметрыРегистрации.Успех = Ложь;
		ДополнительныеОтчетыИОбработкиКлиент.ВернутьРезультатПослеПоказаПредупреждения(
			НСтр("ru = 'Файл должен быть в формате mht.'"),
			ПараметрыРегистрации.ОбработчикРезультата,
			ПараметрыРегистрации);
		Возврат;
	КонецЕсли;
	
	ПараметрыРегистрации.АдресДанных = ОписаниеФайла.Хранение;
	ПараметрыРегистрации.Успех = Истина;
	Объект.ИмяФайла = ПараметрыРегистрации.ИмяФайла;
	ИмяФайлаБезРасширения = Лев(ПараметрыРегистрации.ИмяФайла,СтрДлина(ПараметрыРегистрации.ИмяФайла)-(РасшКолСимв+1));
	Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
		Объект.Наименование = ИмяФайлаБезРасширения;
	КонецЕсли; 
	Объект.КомментарийКФайлуИсточнику = "Исходный файл: " + ПараметрыРегистрации.ИмяФайла + Символы.ПС + "сохранен в ИБ:" + ТекущаяДата();
	
//	Модифицированность = Истина;
	
	ОбновлениеИзФайлаМеханикаНаКлиенте(ПараметрыРегистрации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеИзФайлаМеханикаНаКлиенте(ПараметрыРегистрации)
	
	ОбработчикРезультата = ПараметрыРегистрации.ОбработчикРезультата;
	ПараметрыРегистрации.Удалить("ОбработчикРезультата");
	
	ПараметрыРегистрации.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	
	Если ПараметрыРегистрации.Успех Тогда
		ОповещениеЗаголовок = НСтр("ru = 'Файл загружен'");
		ОповещениеСсылка    = ?(ЭтоНовый, "", ПолучитьНавигационнуюСсылку(Объект.Ссылка));
		ОповещениеТекст     = ПараметрыРегистрации.ИмяФайла;
		ПоказатьОповещениеПользователя(ОповещениеЗаголовок, ОповещениеСсылка, ОповещениеТекст);
		ВыполнитьОбработкуОповещения(ПараметрыРегистрации.ОбработчикРезультата, ПараметрыРегистрации);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеИзФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат.Успех = Ложь Тогда
		Если ПоказатьДиалогЗагрузкиИзФайлаПриОткрытии И Открыта() Тогда
			Закрыть();
		КонецЕсли;
	ИначеЕсли Результат.Успех = Истина Тогда
		Если Не Открыта() Тогда
			Открыть();
		КонецЕсли;
		Модифицированность = Истина;
		РегистрацияОбработки = Истина;
		АдресДанных = Результат.АдресДанных;
		ИмяФайла = Результат.ИмяФайла;
		//РасширениеФайла = Результат.РасширениеФайла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СохранитьФайл(Команда)
	
	Если ПустаяСтрока(АдресДанных) Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьФайл(АдресДанных, ИмяФайла, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Файлы.Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.Владелец = &Владелец
		|	И Файлы.ТипФайла = &ТипФайла
		|	И НЕ Файлы.Ссылка = &ТекущийОбъектСсылка";
	
	Запрос.УстановитьПараметр("Владелец", Объект.Владелец);
	Запрос.УстановитьПараметр("ТипФайла", Объект.ТипФайла);
	Запрос.УстановитьПараметр("ТекущийОбъектСсылка", ТекущийОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() И (Объект.ТипФайла = Перечисления.ТипыФайлов.ТехническоеОписание ИЛИ Объект.ТипФайла = Перечисления.ТипыФайлов.ИнструкцияПользователя)Тогда
		Сообщить("Отказ! "+Объект.ТипФайла+" допускается только в одном экземпляре.");
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(АдресДанных) Тогда
		Сообщить("Отказ! Не загружен файл!");
		Отказ = Истина;
		Возврат;
	Иначе
		ДвоичныеДанныеОбработки = ПолучитьИзВременногоХранилища(АдресДанных);
		ТекущийОбъект.ХранилищеФайла = Новый ХранилищеЗначения(ДвоичныеДанныеОбработки, Новый СжатиеДанных(9));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	АдресДанных = ПоместитьВоВременноеХранилище(
			ТекущийОбъект.ХранилищеФайла.Получить(),
			УникальныйИдентификатор);
	ИмяФайла = ТекущийОбъект.ИмяФайла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если НЕ СоздатьНовуюВерсию Тогда
		Возврат;
	КонецЕсли;
	
	ФормаВозврата = ПолучитьФорму("Справочник.ВнешниеОбработки.Форма.ФормаВозвратаФайла");
	
	СоздатьНовуюВерсиюДоступность = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ФайлСсылка",                    Неопределено);
	СтруктураПараметров.Вставить("КомментарийКВерсии",            "");
	СтруктураПараметров.Вставить("СоздатьНовуюВерсию",            СоздатьНовуюВерсию);
	СтруктураПараметров.Вставить("СоздатьНовуюВерсиюДоступность", СоздатьНовуюВерсиюДоступность);
	
	ФормаВозврата.УстановитьПараметрыИспользования(СтруктураПараметров);
	ФормаВозврата.ВладелецФормы = ЭтотОбъект;
	ФормаВозврата.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	Обработчик = Новый ОписаниеОповещения("ПоместитьВерсию", ЭтотОбъект, );
	РаботаСФайламиСлужебныйКлиент.УстановитьОповещениеФормы(ФормаВозврата, Обработчик);
	
	ФормаВозврата.Открыть();
	
КонецПроцедуры

// Находит максимальный номер версии для данного объекта Файл. Если нет версий - то 0
// Параметры
//  ФайлСсылка  - СправочникСсылка.Файлы - ссылка на файл
//
// Возвращаемое значение:
//   Число  - максимальный номер версии
//
Функция НайтиМаксимальныйНомерВерсии(ФайлСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(Версии.НомерВерсии), 0) КАК МаксимальныйНомер
	|ИЗ
	|	Справочник.ВерсииФайлов КАК Версии
	|ГДЕ
	|	Версии.Владелец = &Файл";
	
	Запрос.Параметры.Вставить("Файл", ФайлСсылка);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если Выборка.МаксимальныйНомер = Null Тогда
			Возврат 0;
		КонецЕсли;
		
		Возврат Число(Выборка.МаксимальныйНомер);
	КонецЕсли;
	
	Возврат 0;
КонецФункции

Функция СоздатьВерсию(ВремяИзменения,
                      ДокСсылка,
                      ИмяБезРасширения,
                      Размер,
                      Расширение,
                      АдресВременногоХранилищаФайла,
                      НоваяВерсияДатаСоздания = Неопределено,
                      НоваяВерсияАвтор = Неопределено,
                      НоваяВерсияКомментарий = Неопределено,
                      НоваяВерсияНомерВерсии = Неопределено,
					  ИмяФайла)
					  
	ХранилищеФайла = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(ВремяИзменения) Тогда
		
		ВремяИзменения = ТекущаяДатаСеанса();
	КонецЕсли;
	
//	ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьРасширениеФайлаДляЗагрузки(Расширение);
	
	Версия = Справочники.ВерсииФайлов.СоздатьЭлемент();
	
	Версия.РодительскаяВерсия = Объект.ТекущаяВерсия;
	
	Если НоваяВерсияНомерВерсии = Неопределено Тогда
		Версия.НомерВерсии = НайтиМаксимальныйНомерВерсии(ДокСсылка) + 1;
	Иначе
		Версия.НомерВерсии = НоваяВерсияНомерВерсии;
	КонецЕсли;
	
	Версия.Владелец = ДокСсылка;
	Версия.ДатаМодификацииФайла = ВремяИзменения;
	
	Версия.Комментарий = НоваяВерсияКомментарий;
	
	Если НоваяВерсияАвтор = Неопределено Тогда
		Версия.Автор = Пользователи.ТекущийПользователь();
	Иначе
		Версия.Автор = НоваяВерсияАвтор;
	КонецЕсли;
	
	Если НоваяВерсияДатаСоздания = Неопределено Тогда
		Версия.ДатаСоздания = ТекущаяДатаСеанса();
	Иначе
		Версия.ДатаСоздания = НоваяВерсияДатаСоздания;
	КонецЕсли;
	
	Версия.ПолноеНаименование = ИмяБезРасширения;
	Версия.Размер = Размер;
	Версия.ИмяФайла = ИмяФайла;
	Версия.Расширение = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(Расширение);
	
	ХранилищеФайла = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресВременногоХранилищаФайла));
				
	ДвоичныеДанныеФайла = ХранилищеФайла.Получить();
	Версия.Размер = ДвоичныеДанныеФайла.Размер();
		
//	ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьРазмерФайлаДляЗагрузки(Версия);
	
	Версия.Записать();
	
	ЗаписатьФайлВИнформационнуюБазу(Версия.Ссылка, ХранилищеФайла);
	
	Возврат Версия.Ссылка;
	
КонецФункции

// Записывает ХранилищеФайла в информационную базу
//
// Параметры
// ВерсияСсылка - ссылка на версию файла
// ХранилищеФайла - ХранилищеЗначения, с двоичными данными файла, которые требуется записать
//
Процедура ЗаписатьФайлВИнформационнуюБазу(ВерсияСсылка, ХранилищеФайла)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.ХранимыеФайлыВерсий.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ВерсияФайла = ВерсияСсылка;
	МенеджерЗаписи.ХранимыйФайл = ХранилищеФайла;
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ПоместитьВерсию(Результат, ДополнительныеПараметры) Экспорт 
	КомментарийКВерсии = "";
	Если НЕ Результат = Неопределено Тогда
		Результат.Свойство("КомментарийКВерсии", КомментарийКВерсии);
	КонецЕсли; 
	НоваяВерсия = СоздатьВерсию(,Объект.Ссылка, ИмяФайлаБезРасширения,,РасширениеФайла, АдресДанных,,,КомментарийКВерсии,,ИмяФайла);
	ОбновитьТекущуюВерсию(НоваяВерсия);
	СоздатьНовуюВерсию = Ложь;
КонецПроцедуры // ()
 
&НаСервере
Процедура ОбновитьТекущуюВерсию(Версия)
	
	ВнешниеОбработкиОбъект = РеквизитФормыВЗначение("Объект");
	ВнешниеОбработкиОбъект.ТекущаяВерсия = Версия;
	
//	ВнешниеОбработкиОбъект.ИндексКартинки = Версия.ИндексКартинки;
	ВнешниеОбработкиОбъект.ТекущаяВерсияРазмер = Версия.Размер;
	ВнешниеОбработкиОбъект.ТекущаяВерсияДатаСоздания = Версия.ДатаСоздания;
	ВнешниеОбработкиОбъект.ТекущаяВерсияАвтор = Версия.Автор;
	ВнешниеОбработкиОбъект.ТекущаяВерсияРасширение = Версия.Расширение;
	ВнешниеОбработкиОбъект.ТекущаяВерсияНомерВерсии = Версия.НомерВерсии;
	ВнешниеОбработкиОбъект.ТекущаяВерсияКод = Версия.Код;
	ВнешниеОбработкиОбъект.ТекущаяВерсияДатаМодификацииФайла = Версия.ДатаМодификацииФайла;
//	ВнешниеОбработкиОбъект.ТекущаяВерсияРазработчик = Версия.ТекущийРазработчик;
	
	ВнешниеОбработкиОбъект.Записать();
	ЗначениеВРеквизитФормы(ВнешниеОбработкиОбъект,"Объект");
	
КонецПроцедуры // ()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
		
		ИмяФайла = ТИ.ПолучитьПолноеОписаниеФайла(Объект.Ссылка);
			
		ПолучитьФайл(АдресДанных, ИмяФайла, Истина);
			
		Отказ = Истина;
		
	#Иначе	
		
		Если НЕ (ТИ.ДоступнаРоль("ПолныеПрава") ИЛИ ТИ.ДоступнаРоль("Разработчик")) Тогда
			
			ИмяФайла = ТИ.ПолучитьПолноеОписаниеФайла(Объект.Ссылка);
			
			ПолучитьФайл(АдресДанных, ИмяФайла, Истина);
			
			Отказ = Истина;
			
		КонецЕсли; 
		
	#КонецЕсли
КонецПроцедуры

