
&НаКлиенте
Процедура ВидОбработкиПриИзменении(Элемент)
	
	ОбновитьДоступностьПринадлежности();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьПринадлежности()
	
	Если Объект.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма Тогда
		Заголовок = "Регистрация внешней печатной формы";
	ИначеЕсли Объект.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.ЗаполнениеТабличныхЧастей Тогда
		Заголовок = "Регистрация внешней обработки заполнения табличных частей";
	ИначеЕсли Объект.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка Тогда
		Заголовок = "Регистрация внешней обработки";
	ИначеЕсли Объект.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда
		Заголовок = "Регистрация внешнего отчета";
	ИначеЕсли Объект.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.ВнешняяОбработкаПодключаемаяКОтчету Тогда
		Заголовок = "Регистрация внешней обработки подключаемой к отчету";
	КонецЕсли;
	
	Если Объект.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка ИЛИ Объект.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет ИЛИ Объект.ВидОбработки.Пустая() Тогда
		
		Если Не Объект.Принадлежность.Количество() = 0  Тогда
			Объект.Принадлежность.Очистить();
		КонецЕсли;
		
		ЭтотОбъект.Элементы.Принадлежность.Доступность = Ложь;
		ЭтотОбъект.Элементы.Принадлежность.КоманднаяПанель.Доступность = Ложь;
		
		//ЭлементыФормы.КоманднаяПанельОбъектов.Доступность = Ложь;
		//ЭлементыФормы.РамкаГруппыОбъект.Принадлежность.Доступность = Ложь;
		//ЭлементыФормы.Панель.Доступность = Ложь;
		//ЭлементыФормы.Объект.Принадлежность.Доступность = Ложь;
		
	Иначе
		
		ЭтотОбъект.Элементы.Принадлежность.Доступность = Истина;
		ЭтотОбъект.Элементы.Принадлежность.КоманднаяПанель.Доступность = Истина;
		
		//ЭлементыФормы.КоманднаяПанельОбъектов.Доступность = Истина;
		//ЭлементыФормы.РамкаГруппыОбъект.Принадлежность.Доступность = Истина;
		//ЭлементыФормы.Панель.Доступность = Истина;
		//ЭлементыФормы.Объект.Принадлежность.Доступность = Истина;
		//
		//Если Объект.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма Тогда
		//	ЭлементыФормы.РамкаГруппыОбъект.Принадлежность.Заголовок = "Объект.Принадлежность печатной формы";
		//ИначеЕсли Объект.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.ВнешняяОбработкаПодключаемаяКОтчету Тогда
		//	ЭлементыФормы.РамкаГруппыОбъект.Принадлежность.Заголовок = "Объект.Принадлежность";
		//Иначе
		//	ЭлементыФормы.РамкаГруппыОбъект.Принадлежность.Заголовок = "Объект.Принадлежность обработки по заполнению табличных частей";
		//КонецЕсли; 
		
	КонецЕсли;
	
//	ЭлементыФормы.Объект.Принадлежность.Колонки.ТабличнаяЧасть.Видимость                 = (Объект.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.ЗаполнениеТабличныхЧастей);
	ЭтотОбъект.Элементы.ТабличнаяЧастьПредставление.Видимость = (Объект.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.ЗаполнениеТабличныхЧастей);
	ЭтотОбъект.Элементы.ТабличнаяЧастьИмя.Видимость = (Объект.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.ЗаполнениеТабличныхЧастей);
	
	ЭтоВидОбработкиПечатнойФормы = Объект.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма;
	ЭтоВидОбработкиПодключаемойКОтчету = Объект.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.ВнешняяОбработкаПодключаемаяКОтчету;
	ЭтоВидОбработкиЗаполнениеТЧ  = Объект.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.ЗаполнениеТабличныхЧастей;
	//ЭлементыФормы.Объект.Принадлежность.Колонки.ПредставлениеКнопки.Видимость            = ЭтоВидОбработкиЗаполнениеТЧ ИЛИ ЭтоОбъект.ВидОбработкиПодключаемойКОтчету;
	//ЭлементыФормы.Объект.Принадлежность.Колонки.ПредставлениеОтбораПостроителя.Видимость = ЭтоВидОбработкиПечатнойФормы;
	//ЭлементыФормы.Объект.Принадлежность.Колонки.ЗаменяемаяПечатнаяФорма.Видимость        = ЭтоВидОбработкиПечатнойФормы;
	//ЭлементыФормы.Объект.Принадлежность.Колонки.ИмяФайлаПечатнойФормы.Видимость          = Объект.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма;
	//ЭлементыФормы.Объект.Принадлежность.Колонки.ПредставлениеНастроекОбработки.Видимость = НЕ ЭтоВидОбработкиПодключаемойКОтчету;
	//ЭлементыФормы.Объект.Принадлежность.Колонки.СпособЗапуска.Видимость = ЭтоВидОбработкиПодключаемойКОтчету;
	
	ЭтотОбъект.Элементы.ПредставлениеКнопки.Видимость            = ЭтоВидОбработкиЗаполнениеТЧ ИЛИ ЭтоВидОбработкиПодключаемойКОтчету;
//	ЭтотОбъект.Элементы.ПредставлениеОтбораПостроителя.Видимость = ЭтоВидОбработкиПечатнойФормы;
	ЭтотОбъект.Элементы.ЗаменяемаяПечатнаяФорма.Видимость        = ЭтоВидОбработкиПечатнойФормы;
	//ЭтотОбъект.Элементы.ИмяФайлаПечатнойФормы.Видимость          = Объект.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма;
	//ЭтотОбъект.Элементы.ПредставлениеНастроекОбработки.Видимость = НЕ ЭтоВидОбработкиПодключаемойКОтчету;
	//ЭтотОбъект.Элементы.СпособЗапуска.Видимость = ЭтоВидОбработкиПодключаемойКОтчету;
	
КонецПроцедуры // ОбновитьДоступностьПринадлежности 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьДоступностьПринадлежности();

	Если ПоказатьДиалогЗагрузкиИзФайлаПриОткрытии Тогда
		ПодключитьОбработчикОжидания("ОбновлениеИзФайлаЗапуск", 0.1, Истина);
	КонецЕсли;
	
	ЗаполнитьКлиентов();
	
	ЭтаФорма.Доступность = ФормаДоступна();
	
	Если ЗначениеЗаполнено(ТестируемаяВерсия)
		И НЕ ТестируемаяВерсия = Объект.ТекущаяВерсия Тогда
		Элементы.Группа10.Видимость = Истина;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Объект.ТекущаяВерсия) Тогда
		Элементы.Группа9.Видимость = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	Если Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияОбращений.НаДоработке") ИЛИ Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияОбращений.НаТестировании") Тогда
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтаФорма, Параметры);

		ПоказатьВопрос(Оповещение,"ВНИМАНИЕ!!! В настоящий момент по обработке ведутся работы. Продолжить?",Режим);
	Иначе
		ОбновлениеИзФайлаЗапуск();
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	
	ОбновлениеИзФайлаЗапуск();

КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеИзФайлаЗапуск()
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Успех", Ложь);
	ПараметрыРегистрации.Вставить("АдресДанных", АдресДанных);
	ПараметрыРегистрации.Вставить("ОбработчикРезультата", Новый ОписаниеОповещения("ОбновлениеИзФайлаЗавершение", ЭтотОбъект));
	
	Обработчик = Новый ОписаниеОповещения("ОбновлениеИзФайлаПослеВыбораФайла", ЭтотОбъект, ПараметрыРегистрации);
	
	ПараметрыДиалога = Новый Структура("Режим, Фильтр, ИндексФильтра, Заголовок");
	ПараметрыДиалога.Режим  = РежимДиалогаВыбораФайла.Открытие;
	ПараметрыДиалога.Фильтр = ДополнительныеОтчетыИОбработкиКлиентСервер.ФильтрДиалоговВыбораИСохранения();
	Если Объект.Ссылка.Пустая() Тогда
		ПараметрыДиалога.ИндексФильтра = 0;
		ПараметрыДиалога.Заголовок = НСтр("ru = 'Выберите файл внешнего отчета или обработки'");
	ИначеЕсли Объект.ВидОбработки = ВидДополнительныйОтчет Тогда
		ПараметрыДиалога.ИндексФильтра = 1;
		ПараметрыДиалога.Заголовок = НСтр("ru = 'Выберите файл внешнего отчета'");
	Иначе
		ПараметрыДиалога.ИндексФильтра = 2;
		ПараметрыДиалога.Заголовок = НСтр("ru = 'Выберите файл внешней обработки'");
	КонецЕсли;
	
//	ДополнительныеОтчетыИОбработкиКлиент.ПоказатьПомещениеФайла(Обработчик, УникальныйИдентификатор, Объект.ИмяФайла, ПараметрыДиалога);
	ПоказатьПомещениеФайла(Обработчик, УникальныйИдентификатор, "", ПараметрыДиалога);
КонецПроцедуры

// Показывает диалог выбора файлов и помещает выбранные файлы во временное хранилище.
//   Совмещает работу методов глобального метода НачатьПомещениеФайла и ПоместитьФайлы,
//   возвращая идентичный результат вне зависимости от того, подключено расширение работы с файлами, или нет.
//
// Параметры:
//   ОбработчикРезультата - ОписаниеОповещения - Описание процедуры, принимающей результат выбора.
//   ИдентификаторФормы - УникальныйИдентификатор - Уникальный идентификатор формы, из которой выполняется размещение файла.
//   НачальноеИмяФайла - Строка - Полный путь и имя файла, которые будут предложены пользователю в начале выбора.
//   ПараметрыДиалога - Структура, Неопределено - См. свойства ДиалогВыбораФайла в синтакс-помощнике.
//       Используется в случае, если удалось подключить расширение работы с файлами.
//
// Значение первого параметра, возвращаемого в ОбработчикРезультата:
//   ПомещенныеФайлы - Результат выбора.
//       * - Неопределено - Пользователь отказался от выбора.
//       * - Массив из ОписаниеПереданногоФайла, Структура - Пользователь выбрал файл.
//           ** Имя      - Строка - Полное имя выбранного файла.
//           ** Хранение - Строка - Адрес во временном хранилище, по которому размещен файл.
//
// Ограничения:
//   Используется только для интерактивного выбора в диалоге.
//   Не используется для выбора каталогов - эта опция не поддерживается веб-клиентом.
//   Не поддерживается множественный выбор в веб-клиенте, если не установлено расширение работы с файлами.
//   Не поддерживается передача адреса временного хранилища.
//
&НаКлиенте
Процедура ПоказатьПомещениеФайла(ОбработчикРезультата, ИдентификаторФормы, НачальноеИмяФайла, ПараметрыДиалога)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		
		Если ПараметрыДиалога = Неопределено Тогда
			ПараметрыДиалога = Новый Структура;
		КонецЕсли;
		Если ПараметрыДиалога.Свойство("Режим") Тогда
			Режим = ПараметрыДиалога.Режим;
			Если Режим = РежимДиалогаВыбораФайла.ВыборКаталога Тогда
				ВызватьИсключение НСтр("ru = 'Выбор каталога не поддерживается'");
			КонецЕсли;
		Иначе
			Режим = РежимДиалогаВыбораФайла.Открытие;
		КонецЕсли;
		
		Диалог = Новый ДиалогВыбораФайла(Режим);
		Диалог.ПолноеИмяФайла = НачальноеИмяФайла;
		ЗаполнитьЗначенияСвойств(Диалог, ПараметрыДиалога);
		
		ПомещенныеФайлы = Новый Массив;
		Если ИдентификаторФормы <> Неопределено Тогда
			ВыборВыполнен = ПоместитьФайлы(, ПомещенныеФайлы, Диалог, Истина, ИдентификаторФормы);
		Иначе
			ВыборВыполнен = ПоместитьФайлы(, ПомещенныеФайлы, Диалог, Истина);
		КонецЕсли;
		ОбработатьРезультатПомещенияФайла(ВыборВыполнен, ПомещенныеФайлы, Неопределено, ДополнительныеПараметры);
		
	Иначе
		
		Обработчик = Новый ОписаниеОповещения("ОбработатьРезультатПомещенияФайла", ЭтотОбъект, ДополнительныеПараметры);
		НачатьПомещениеФайла(Обработчик, , НачальноеИмяФайла, Истина, ИдентификаторФормы);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик результата работы процедуры ПоказатьПомещениеФайла.
&НаКлиенте
Процедура ОбработатьРезультатПомещенияФайла(ВыборВыполнен, АдресИлиРезультатВыбора, ВыбранноеИмяФайла, ДополнительныеПараметры)
	
	Если ТипЗнч(ДополнительныеПараметры.ОбработчикРезультата) = Тип("ОписаниеОповещения") Тогда
		
		Если ВыборВыполнен = Истина Тогда
			Если ТипЗнч(АдресИлиРезультатВыбора) = Тип("Массив") Тогда
				РезультатВыбора = АдресИлиРезультатВыбора;
			Иначе
				РезультатВыбора = Новый Массив;
				ЭлементРезультата = Новый Структура;
				ЭлементРезультата.Вставить("Хранение", АдресИлиРезультатВыбора);
				ЭлементРезультата.Вставить("Имя",      ВыбранноеИмяФайла);
				РезультатВыбора.Добавить(ЭлементРезультата);
			КонецЕсли;
		Иначе
			РезультатВыбора = Неопределено;
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, РезультатВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеИзФайлаПослеВыбораФайла(ПомещенныеФайлы, ПараметрыРегистрации) Экспорт 
	Если ПомещенныеФайлы = Неопределено Или ПомещенныеФайлы.Количество() = 0 Тогда
		ВыполнитьОбработкуОповещения(ПараметрыРегистрации.ОбработчикРезультата, ПараметрыРегистрации);
		Возврат;
	КонецЕсли;
	
	ОписаниеФайла = ПомещенныеФайлы[0];
	
	Если ЭтоНовый ИЛИ НЕ ЭтоАдресВременногоХранилища(АдресДанных) Тогда
		СоздатьНовуюВерсию = Истина;
	Иначе
		ДвоичныеДанныеТекущаяВерсия = ПолучитьИзВременногоХранилища(АдресДанных);
		ДвоичныеДанныеНоваяВерсия = ПолучитьИзВременногоХранилища(ОписаниеФайла.Хранение);
		Если ДвоичныеДанныеТекущаяВерсия = ДвоичныеДанныеНоваяВерсия Тогда
			Сообщить("Файл обработки не изменился, новая версия не будет добавлена.");
			СоздатьНовуюВерсию = Ложь;
		Иначе
			Сообщить("Изменился файл обработки, будет добавлена новая версия.");
			СоздатьНовуюВерсию = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
	Ключи = Новый Структура("ИмяФайла, ЭтоОтчет, ОтключатьПубликацию, ОтключатьКонфликтующие, Конфликтующие");
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыРегистрации, Ключи, Ложь);
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеФайла.Имя, "\");
	ПараметрыРегистрации.ИмяФайла = МассивПодстрок.Получить(МассивПодстрок.ВГраница());
	РасширениеФайла = ВРег(Прав(ПараметрыРегистрации.ИмяФайла, 3));
	
	Если РасширениеФайла = "ERF" Тогда
		ПараметрыРегистрации.ЭтоОтчет = Истина;
	ИначеЕсли РасширениеФайла = "EPF" Тогда
		ПараметрыРегистрации.ЭтоОтчет = Ложь;
	Иначе
		ПараметрыРегистрации.Успех = Ложь;
		ДополнительныеОтчетыИОбработкиКлиент.ВернутьРезультатПослеПоказаПредупреждения(
			НСтр("ru = 'Расширение файла не соответствует расширению внешнего отчета (ERF) или обработки (EPF).'"),
			ПараметрыРегистрации.ОбработчикРезультата,
			ПараметрыРегистрации);
		Возврат;
	КонецЕсли;
	
	ПараметрыРегистрации.АдресДанных = ОписаниеФайла.Хранение;
	ПараметрыРегистрации.Успех = Истина;
	Объект.ИмяФайла = ПараметрыРегистрации.ИмяФайла;
	Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
		Объект.Наименование = Лев(ПараметрыРегистрации.ИмяФайла,СтрДлина(ПараметрыРегистрации.ИмяФайла)-4);
	КонецЕсли; 
	Объект.КомментарийКФайлуИсточнику = "Исходный файл: " + ПараметрыРегистрации.ИмяФайла + Символы.ПС + "сохранен в ИБ:" + ТекущаяДата();
	ИмяФайлаБезРасширения = Объект.Наименование;
	
//	Модифицированность = Истина;
	
	ОбновлениеИзФайлаМеханикаНаКлиенте(ПараметрыРегистрации);
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеИзФайлаМеханикаНаКлиенте(ПараметрыРегистрации)
	
	ОбработчикРезультата = ПараметрыРегистрации.ОбработчикРезультата;
	ПараметрыРегистрации.Удалить("ОбработчикРезультата");
	
	ПараметрыРегистрации.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	
	Если ПараметрыРегистрации.Успех Тогда
		ОповещениеЗаголовок = ?(ПараметрыРегистрации.ЭтоОтчет, НСтр("ru = 'Файл внешнего отчета загружен'"), НСтр("ru = 'Файл внешней обработки загружен'"));
		ОповещениеСсылка    = ?(ЭтоНовый, "", ПолучитьНавигационнуюСсылку(Объект.Ссылка));
		ОповещениеТекст     = ПараметрыРегистрации.ИмяФайла;
		ПоказатьОповещениеПользователя(ОповещениеЗаголовок, ОповещениеСсылка, ОповещениеТекст);
		ВыполнитьОбработкуОповещения(ПараметрыРегистрации.ОбработчикРезультата, ПараметрыРегистрации);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеИзФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат.Успех = Ложь Тогда
		Если ПоказатьДиалогЗагрузкиИзФайлаПриОткрытии И Открыта() Тогда
			Закрыть();
		КонецЕсли;
	ИначеЕсли Результат.Успех = Истина Тогда
		Если Не Открыта() Тогда
			Открыть();
		КонецЕсли;
		Модифицированность = Истина;
		РегистрацияОбработки = Истина;
		АдресДанных = Результат.АдресДанных;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяОбработки()

	Возврат ВнешниеОбработки.Подключить(АдресДанных);
	
КонецФункции // ЗаполнитьСведенияОбОбработке()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоНовый = Объект.Ссылка.Пустая();
	
	ВидДополнительнаяОбработка = Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка;
	ВидДополнительныйОтчет     = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет;
	
	Параметры.Свойство("ПоказатьДиалогЗагрузкиИзФайлаПриОткрытии", ПоказатьДиалогЗагрузкиИзФайлаПриОткрытии);
	
	Если ЭтоНовый Тогда
//		ПоказатьДиалогЗагрузкиИзФайлаПриОткрытии = Истина;
		Объект.Автор = Пользователи.ТекущийПользователь();
		
		Объект.Конфигурация = Объект.Родитель.Конфигурация;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//в этот реквизит всегда записывается файл той версии, с которой работает программист
	//при добавлении новой тестовой версии обработки, ее файл записывается сюда
	//после согласования файл тестовой версии помещенный сюда становится файлом текущей версии
	//при снятии обработки с тестирования, файл тестовой версии помещенный сюда заменяется файлом текущей версии 
	
	Если ЗначениеЗаполнено(АдресДанных) Тогда
		ДвоичныеДанныеОбработки = ПолучитьИзВременногоХранилища(АдресДанных);
		ТекущийОбъект.ХранилищеВнешнейОбработки = Новый ХранилищеЗначения(ДвоичныеДанныеОбработки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	АдресДанныхХВО = ПоместитьВоВременноеХранилище(
			ТекущийОбъект.ХранилищеВнешнейОбработки.Получить(),
			УникальныйИдентификатор);
	
	ТестируемаяВерсия = ПолучитьТестируемуюВерсию(ТекущийОбъект.Ссылка);		
	
	Если ЗначениеЗаполнено(ТестируемаяВерсия) Тогда
		
		АдресДанных = АдресДанныхХВО;
				
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ТекущийОбъект.ТекущаяВерсия) Тогда
		
		Если ЗначениеЗаполнено(ТестируемаяВерсия) Тогда
			
			ХранимыйФайлТекущаяВерсия = ТИ.ПолучитьФайлВерсии(ТекущийОбъект.ТекущаяВерсия);
			
			Если ТипЗнч(ХранимыйФайлТекущаяВерсия) = тип("ХранилищеЗначения") Тогда
				
				АдресДанныхТекущейВерсии = ПоместитьВоВременноеХранилище(
				ХранимыйФайлТекущаяВерсия.Получить(),
				УникальныйИдентификатор);
				
			КонецЕсли; 
			
		Иначе
			
			АдресДанныхТекущейВерсии = АдресДанныхХВО;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТестируемуюВерсию(ВнешняяОбработкаСсылка)
	
	ТестируемаяВерсия = Справочники.ВерсииВнешнихОбработок.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВерсииВнешнихОбработок.Ссылка
		|ИЗ
		|	Справочник.ВерсииВнешнихОбработок КАК ВерсииВнешнихОбработок
		|ГДЕ
		|	ВерсииВнешнихОбработок.Владелец = &Владелец
		|	И ВерсииВнешнихОбработок.НомерВерсии >= &НомерТекущейВерсии
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВерсииВнешнихОбработок.НомерВерсии УБЫВ";
	
	Запрос.УстановитьПараметр("Владелец", ВнешняяОбработкаСсылка);
	Запрос.УстановитьПараметр("НомерТекущейВерсии", ВнешняяОбработкаСсылка.ТекущаяВерсияНомерВерсии);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ТестируемаяВерсия = Выборка.Ссылка;
		
	КонецЕсли; 
	
	Возврат ТестируемаяВерсия;

КонецФункции // ПолучитьТестируемуюВерсию()

&НаКлиенте
Процедура ВыгрузитьВФайл(Команда)
	
	Если Команда.Имя = "ВыгрузитьВФайлТестовая" Тогда
		Адрес = АдресДанных;
		НомерВерсии = ТИ.ПолучитьРеквизитПоСсылке(ТестируемаяВерсия, "НомерВерсии");
	Иначе
		Адрес = АдресДанныхТекущейВерсии;
		НомерВерсии = Объект.ТекущаяВерсияНомерВерсии;
	КонецЕсли; 
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ЭтоОтчет", Объект.ВидОбработки = ВидДополнительныйОтчет);
	//ПараметрыВыгрузки.Вставить("ИмяФайла", Объект.ИмяФайла);
	ПараметрыВыгрузки.Вставить("ИмяФайла", Объект.Наименование+" (вер. "+НомерВерсии+")");
	ПараметрыВыгрузки.Вставить("АдресДанных", Адрес);
	ДополнительныеОтчетыИОбработкиКлиент.ВыгрузитьВФайл(ПараметрыВыгрузки);
	
КонецПроцедуры

// Внешние отчеты и обработки Кутья АА

&НаСервере
Процедура ЗаполнитьКлиентов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗ.Клиент
		|ПОМЕСТИТЬ ВТТЧКлиенты
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Клиенты.Ссылка,
		|	ТЧКлиенты.Клиент
		|ИЗ
		|	Справочник.Клиенты КАК Клиенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТЧКлиенты КАК ТЧКлиенты
		|		ПО Клиенты.Ссылка = ТЧКлиенты.Клиент
		|ГДЕ
		|	ТЧКлиенты.Клиент ЕСТЬ NULL 
		|	И Клиенты.ПометкаУдаления = ЛОЖЬ
		|	И Клиенты.Неиспользуемый = ЛОЖЬ";

	Запрос.УстановитьПараметр("ТЗ",Объект.Клиенты.Выгрузить());
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока = Объект.Клиенты.Добавить();
		НоваяСтрока.Клиент = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	Объект.Клиенты.Сортировать("Клиент");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	УстановитьСнятьФлажки(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	УстановитьСнятьФлажки(Ложь);
КонецПроцедуры
 
&НаСервере
Процедура УстановитьСнятьФлажки(ЗначениеФлажка)
	ТЗ = Объект.Клиенты.Выгрузить();
	ТЗ.ЗаполнитьЗначения(ЗначениеФлажка,"Использование");
	Объект.Клиенты.Загрузить(ТЗ);
КонецПроцедуры

// Находит максимальный номер версии для данного объекта Файл. Если нет версий - то 0
// Параметры
//  ФайлСсылка  - СправочникСсылка.Файлы - ссылка на файл
//
// Возвращаемое значение:
//   Число  - максимальный номер версии
//
Функция НайтиМаксимальныйНомерВерсии(ФайлСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(Версии.НомерВерсии), 0) КАК МаксимальныйНомер
	|ИЗ
	|	Справочник.ВерсииВнешнихОбработок КАК Версии
	|ГДЕ
	|	Версии.Владелец = &Файл";
	
	Запрос.Параметры.Вставить("Файл", ФайлСсылка);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если Выборка.МаксимальныйНомер = Null Тогда
			Возврат 0;
		КонецЕсли;
		
		Возврат Число(Выборка.МаксимальныйНомер);
	КонецЕсли;
	
	Возврат 0;
КонецФункции

Функция СоздатьВерсию(ВремяИзменения,
                      ДокСсылка,
                      ИмяБезРасширения,
                      Размер,
                      Расширение,
                      АдресВременногоХранилищаФайла,
                      НоваяВерсияДатаСоздания = Неопределено,
                      НоваяВерсияАвтор = Неопределено,
                      НоваяВерсияКомментарий = Неопределено,
                      НоваяВерсияНомерВерсии = Неопределено)
					  
	ХранилищеФайла = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(ВремяИзменения) Тогда
		
		ВремяИзменения = ТекущаяДатаСеанса();
	КонецЕсли;
	
//	ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьРасширениеФайлаДляЗагрузки(Расширение);
	
	Версия = Справочники.ВерсииВнешнихОбработок.СоздатьЭлемент();
	
	Версия.РодительскаяВерсия = Объект.ТекущаяВерсия;
	
	Если НоваяВерсияНомерВерсии = Неопределено Тогда
		Версия.НомерВерсии = НайтиМаксимальныйНомерВерсии(ДокСсылка) + 1;
	Иначе
		Версия.НомерВерсии = НоваяВерсияНомерВерсии;
	КонецЕсли;
	
	Версия.Владелец = ДокСсылка;
	Версия.ДатаМодификацииФайла = ВремяИзменения;
	
	Версия.Комментарий = НоваяВерсияКомментарий;
	
	Если НоваяВерсияАвтор = Неопределено Тогда
		Версия.Автор = Пользователи.ТекущийПользователь();
	Иначе
		Версия.Автор = НоваяВерсияАвтор;
	КонецЕсли;
	
	Если НоваяВерсияДатаСоздания = Неопределено Тогда
		Версия.ДатаСоздания = ТекущаяДатаСеанса();
	Иначе
		Версия.ДатаСоздания = НоваяВерсияДатаСоздания;
	КонецЕсли;
	
	Версия.ПолноеНаименование = ИмяБезРасширения;
	Версия.Размер = Размер;
	Версия.Расширение = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(Расширение);
	
	ХранилищеФайла = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресВременногоХранилищаФайла));
				
	ДвоичныеДанныеФайла = ХранилищеФайла.Получить();
	Версия.Размер = ДвоичныеДанныеФайла.Размер();
		
//	ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьРазмерФайлаДляЗагрузки(Версия);
	
	Версия.Записать();
	
	ЗаписатьФайлВИнформационнуюБазу(Версия.Ссылка, ХранилищеФайла);
	
	Возврат Версия.Ссылка;
	
КонецФункции

// Записывает ХранилищеФайла в информационную базу
//
// Параметры
// ВерсияСсылка - ссылка на версию файла
// ХранилищеФайла - ХранилищеЗначения, с двоичными данными файла, которые требуется записать
//
Процедура ЗаписатьФайлВИнформационнуюБазу(ВерсияСсылка, ХранилищеФайла)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.ХранимыеОбработкиВерсий.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ВерсияФайла = ВерсияСсылка;
	МенеджерЗаписи.ХранимыйФайл = ХранилищеФайла;
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ПоместитьВерсию(Результат, ДополнительныеПараметры) Экспорт 
	КомментарийКВерсии = "";
	Если НЕ Результат = Неопределено Тогда
		Результат.Свойство("КомментарийКВерсии", КомментарийКВерсии);
	КонецЕсли; 
	НоваяВерсия = СоздатьВерсию(,Объект.Ссылка,ИмяФайлаБезРасширения,,РасширениеФайла, АдресДанных,,,КомментарийКВерсии,);
	//  07.04.17 текущая версия может быть обновлена только после согласования задачи по тестированию
//	ОбновитьТекущуюВерсию(НоваяВерсия);
	ТестируемаяВерсия = НоваяВерсия;
	Если НЕ Элементы.Группа10.Видимость Тогда
		Элементы.Группа10.Видимость = Истина;
	КонецЕсли; 
	СоздатьНовуюВерсию = Ложь;
	
КонецПроцедуры // ()

&НаСервере
Процедура ОбновитьТекущуюВерсию(Версия)
	
	ВнешниеОбработкиОбъект = РеквизитФормыВЗначение("Объект");
	ВнешниеОбработкиОбъект.ТекущаяВерсия = Версия;
	
//	ВнешниеОбработкиОбъект.ИндексКартинки = Версия.ИндексКартинки;
	ВнешниеОбработкиОбъект.ТекущаяВерсияРазмер = Версия.Размер;
	ВнешниеОбработкиОбъект.ТекущаяВерсияДатаСоздания = Версия.ДатаСоздания;
	ВнешниеОбработкиОбъект.ТекущаяВерсияАвтор = Версия.Автор;
	ВнешниеОбработкиОбъект.ТекущаяВерсияРасширение = Версия.Расширение;
	ВнешниеОбработкиОбъект.ТекущаяВерсияНомерВерсии = Версия.НомерВерсии;
	ВнешниеОбработкиОбъект.ТекущаяВерсияКод = Версия.Код;
	ВнешниеОбработкиОбъект.ТекущаяВерсияДатаМодификацииФайла = Версия.ДатаМодификацииФайла;
	ВнешниеОбработкиОбъект.ТекущаяВерсияРазработчик = Версия.ТекущийРазработчик;
	
	ВнешниеОбработкиОбъект.Записать();
	ЗначениеВРеквизитФормы(ВнешниеОбработкиОбъект,"Объект");
	
КонецПроцедуры // ()

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если НЕ СоздатьНовуюВерсию Тогда
		Возврат;
	КонецЕсли;
	
	ФормаВозврата = ПолучитьФорму("Справочник.ВнешниеОбработки.Форма.ФормаВозвратаФайла");
	
	СоздатьНовуюВерсиюДоступность = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ФайлСсылка",                    Неопределено);
	СтруктураПараметров.Вставить("КомментарийКВерсии",            "");
	СтруктураПараметров.Вставить("СоздатьНовуюВерсию",            СоздатьНовуюВерсию);
	СтруктураПараметров.Вставить("СоздатьНовуюВерсиюДоступность", СоздатьНовуюВерсиюДоступность);
	
	ФормаВозврата.УстановитьПараметрыИспользования(СтруктураПараметров);
	ФормаВозврата.ВладелецФормы = ЭтотОбъект;
	ФормаВозврата.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	Обработчик = Новый ОписаниеОповещения("ПоместитьВерсию", ЭтотОбъект, );
	РаботаСФайламиСлужебныйКлиент.УстановитьОповещениеФормы(ФормаВозврата, Обработчик);
	
	ФормаВозврата.Открыть();
	
КонецПроцедуры

&НаСервере
Функция ФормаДоступна()
	
	Доступность = ЭтаФорма.Доступность;

	Разработчик = Неопределено;
	
	Если ЗначениеЗаполнено(ТестируемаяВерсия) Тогда
		
		РеквизитыВерсии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТестируемаяВерсия, "ТекущийРазработчик, Автор");
		
		Если ЗначениеЗаполнено(РеквизитыВерсии.ТекущийРазработчик) Тогда
			Разработчик = РеквизитыВерсии.ТекущийРазработчик;
		Иначе
			Разработчик = РеквизитыВерсии.Автор;
		КонецЕсли;
		
	КонецЕсли;  
	
	ДоступРазработчика = Разработчик = ТИ.ТекущийПользователь();
	БлокируемыеСостояния = Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияОбращений.НаДоработке") 
			ИЛИ Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияОбращений.НаТестировании");
	
	Если БлокируемыеСостояния
			И НЕ ТИ.ЕстьДоступКОбъекту(Объект.Ссылка) 
			И НЕ ДоступРазработчика 
			Тогда
			
		Доступность = Ложь;
		Сообщить("В настоящий момент по обработке ведутся работы. При необходимости получения более подробных сведений обратитесь к автору текущей версии или администратору системы.");
	КонецЕсли;
	
	Возврат Доступность;

КонецФункции // ФормаДоступна()

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не ЗначениеЗаполнено(АдресДанных) Тогда
		//Отказ = Истина;
		Сообщить("Не выбран файл обработки!",СтатусСообщения.Важное);
	КонецЕсли; 
	Если Объект.Родитель.Пустая() Тогда
		Отказ = Истина;
		Сообщить("Не заполнена группа!",СтатусСообщения.Важное);
	КонецЕсли;//Вставить содержимое обработчика
	
	Если НЕ ФормаДоступна() Тогда
		Отказ = Истина;
	КонецЕсли; 
	
	Если Объект.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма") 
		ИЛИ Объект.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыДополнительныхВнешнихОбработок.ЗаполнениеТабличныхЧастей") Тогда
		
		Если Объект.Принадлежность.Количество() = 0 Тогда
			Отказ = Истина;
			Сообщить("Не заполнена принадлежность обработки!", СтатусСообщения.Важное);
		Иначе 
			Если Объект.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма") Тогда
				
				Для Каждого СтрокаПринадлежность Из Объект.Принадлежность Цикл
					
					Если ПустаяСтрока(СтрокаПринадлежность.МетаданныеОбъекта) ИЛИ ПустаяСтрока(СтрокаПринадлежность.ПредставлениеОбъекта) Тогда
						Отказ = Истина;
						Сообщить("Не указан объект принадлжености печатной формы. Строка: "+СтрокаПринадлежность.НомерСтроки, СтатусСообщения.Внимание);
					КонецЕсли;
					
				КонецЦикла;
				
			ИначеЕсли Объект.ВидОбработки = ПредопределенноеЗначение("Перечисление.ВидыДополнительныхВнешнихОбработок.ЗаполнениеТабличныхЧастей") Тогда 	
				
				// Сообщить о неуказанных табличных частей для заполнения.
				Для Каждого СтрокаПринадлежность Из Объект.Принадлежность Цикл
					
					Если ПустаяСтрока(СтрокаПринадлежность.МетаданныеОбъекта) ИЛИ ПустаяСтрока(СтрокаПринадлежность.ПредставлениеОбъекта) Тогда
						Отказ = Истина;
						Сообщить("Не указан объект принадлжености обработки. Строка: "+СтрокаПринадлежность.НомерСтроки, СтатусСообщения.Внимание);
					КонецЕсли;
					
					Если ПустаяСтрока(СтрокаПринадлежность.ТабличнаяЧастьИмя) ИЛИ ПустаяСтрока(СтрокаПринадлежность.ТабличнаяЧастьПредставление) Тогда
						Отказ = Истина;
						Сообщить("Не указана табличная часть для заполнения. Строка: "+СтрокаПринадлежность.НомерСтроки, СтатусСообщения.Внимание);
					КонецЕсли;
					
					Если ПустаяСтрока(СтрокаПринадлежность.ПредставлениеКнопки) Тогда
						Отказ = Истина;
						Сообщить("Не указано представление кнопки. Строка: "+СтрокаПринадлежность.НомерСтроки, СтатусСообщения.Внимание);
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;//Вставить содержимое обработчика
	
КонецПроцедуры

&НаКлиенте
Процедура РодительПриИзменении(Элемент)
//	Объект.Конфигурация = ТИ.ПолучитьРеквизитПоСсылке(Объект.Родитель, "Конфигурация");
	ЗаполнитьОбъектКонфигурация();
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ЗаполнитьОбъектКонфигурация()
	Объект.Конфигурация = ТИ.ПолучитьРеквизитПоСсылке(Объект.Родитель, "Конфигурация");
КонецПроцедуры // ()

&НаКлиенте
Процедура ПредставлениеНастроекОбработкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Если новый объект, записать перед установкой параметров
	Если ЭтоНовый Тогда
		
		Ответ = Вопрос("Перед установкой параметров необходимо записать объект. Записать?", РежимДиалогаВопрос.ДаНет);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ЭтаФорма.ЗаписатьВФорме() Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущиеДанные = ЭтаФорма.Элементы.Принадлежность.ТекущиеДанные;
	ИДСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	СтрокаОбъекта = Объект.Принадлежность.НайтиПоИдентификатору(ИДСтроки);
	
	// Получить форму редактирования параметров
//	ФормаПараметров = Ссылка.ПолучитьФорму("ФормаПараметровОбработки");
	ФормаПараметров = ПолучитьФорму("Справочник.ВнешниеОбработки.Форма.УправляемаяФормаПараметровОбработки");
	// Передать параметры форме
//	ФормаПараметров.ХранилищеПараметрыОбработки = ТекущиеДанные.ДополнительныеПараметрыОбработки;
//	ФормаПараметров.ХранилищеПараметрыОбработки = СтрокаОбъекта.ДополнительныеПараметрыОбработки;

//	ОбъектПринадлежность = РеквизитФормыВЗначение("Объект.Принадлежность");
	//ЭтотОбъект.ДанныеХранилища = Новый ХранилищеЗначения(ТекФайл);
	//ЗначениеВРеквизитФормы(ЭтотОбъект,"Объект");

	// Получить измененные параметры
//	Параметры = ФормаПараметров.ОткрытьМодально();
	ФормаПараметров.Открыть();
	// Если параметры изменились, принять изменения
	Если Параметры <> Неопределено Тогда
		
		Если Параметры.Получить().Количество() > 0 Тогда
//			СтрокаОбъекта.ДополнительныеПараметрыОбработки = Параметры;
//			ТекущиеДанные.ДополнительныеПараметрыОбработки = Параметры;
			ТекущиеДанные.ПредставлениеНастроекОбработки   = "<Изменить параметры>";
		
		Иначе
//			СтрокаОбъекта.ДополнительныеПараметрыОбработки = Неопределено;
//			ТекущиеДанные.ДополнительныеПараметрыОбработки = Неопределено;
			ТекущиеДанные.ПредставлениеНастроекОбработки   = "<Задать параметры>";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеНастроекОбработкиОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭтаФорма.Элементы.Принадлежность.ТекущиеДанные;
	
	// Если структура параметров заполнена, запросить подтверждение на очистку
	Если ТекущиеДанные.ДополнительныеПараметрыОбработки.Получить() <> Неопределено Тогда
		
		Ответ = Вопрос("Параметры внешней обработки будут очищены. Продолжить?", РежимДиалогаВопрос.ДаНет);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			ТекущиеДанные.ДополнительныеПараметрыОбработки = Неопределено;
			ТекущиеДанные.ПредставлениеНастроекОбработки   = "<Задать параметры>";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МетаданныеОбъектаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
    Оповещение = Новый ОписаниеОповещения("ВыборОбъектаМетаданныхЗавершение", ЭтотОбъект);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Конфигурация", Объект.Конфигурация);
	ФормаВыбора = ОткрытьФорму("Справочник.ВидыОбъектов.ФормаВыбора",ПараметрыФормы,,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборОбъектаМетаданныхЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ТекущиеДанные = ЭтаФорма.Элементы.Принадлежность.ТекущиеДанные;
	ТекущиеДанные.МетаданныеОбъекта = "Документ." + ТИ.ПолучитьРеквизитПоСсылке(Результат, "Наименование");
	ТекущиеДанные.ПредставлениеОбъекта = "Документ """ + ТИ.ПолучитьРеквизитПоСсылке(Результат, "Синоним") + """";
	ТекущиеДанные.ТабличнаяЧастьИмя = "";
	ТекущиеДанные.ТабличнаяЧастьПредставление = "";
	Модифицированность = Истина;
	
КонецПроцедуры // ВыборОбъектаМетаданныхЗавершение()

&НаКлиенте
Процедура ТабличнаяЧастьИмяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
    Оповещение = Новый ОписаниеОповещения("ВыборТабличнойЧастиЗавершение", ЭтотОбъект);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МетаданныеОбъекта", ЭтаФорма.Элементы.Принадлежность.ТекущиеДанные.МетаданныеОбъекта);
	ПараметрыФормы.Вставить("Конфигурация", Объект.Конфигурация);
	ФормаВыбора = ОткрытьФорму("Справочник.ТабличныеЧастиОбъектов.ФормаВыбора",ПараметрыФормы,,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТабличнойЧастиЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ТекущиеДанные = ЭтаФорма.Элементы.Принадлежность.ТекущиеДанные;
	ТекущиеДанные.ТабличнаяЧастьИмя = ТИ.ПолучитьРеквизитПоСсылке(Результат, "Наименование");
	ТекущиеДанные.ТабличнаяЧастьПредставление = ТИ.ПолучитьРеквизитПоСсылке(Результат, "Синоним");
	Модифицированность = Истина;
	
КонецПроцедуры // ВыборОбъектаМетаданныхЗавершение()

&НаКлиенте
Процедура КлиентыИспользованиеПриИзменении(Элемент)
	
	Если Элементы.Клиенты.ТекущиеДанные.Использование Тогда
		
		Если ТИ.СписокБазПуст(Элементы.Клиенты.ТекущиеДанные.Клиент) Тогда
			
			Элементы.Клиенты.ТекущиеДанные.Использование = Ложь;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'У данного клиента не заданы базы для выгрузки. Обратитесь к администратору системы.'"),,
				"Клиенты["+Строка(Элементы.Клиенты.ТекущиеДанные.НомерСтроки-1)+"].Клиент","Объект",
				);
				
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

// Внешние отчеты и обработки Кутья АА

