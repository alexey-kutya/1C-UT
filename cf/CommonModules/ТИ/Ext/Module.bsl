#Область СервисныеФункцииИПроцедуры

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция ПолучитьСистемныеПочтовыеАдреса() Экспорт 

	Адреса = Новый Структура;
	Адреса.Вставить("АдресHelpDesk", Константы.АдресHelpDesk.Получить());
	Адреса.Вставить("АдресАдминистратораСистемы", Константы.АдминистраторСистемы.Получить().АдресЭлектроннойПочты);
	
	Возврат Адреса;

КонецФункции // ПолучитьСистемныеПочтовыеАдреса()
 
&НаСервере
Функция ПолучитьПочтовыйАдресТекущегоПользователя() Экспорт 

	Возврат Пользователи.ТекущийПользователь().ФизЛицо.АдресЭлектроннойПочты;

КонецФункции // ПолучитьСистемныеПочтовыеАдреса()

&НаСервере
Функция ПолучитьПользователяПоФизЛицу(ФизЛицо, Полномочия) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Логин = ФизЛицо.Логин;
	Пользователь = Справочники.Пользователи.НайтиПоРеквизиту("ФизЛицо", ФизЛицо);
	Если Пользователь.Пустая() Тогда
		// Новый пользователь ИБ
		ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
		ПользовательИБ.ПользовательОС = Логин;
	    ПользовательИБ.АутентификацияОС = Истина;
	    ПользовательИБ.АутентификацияСтандартная = Ложь;
	    ПользовательИБ.ПоказыватьВСпискеВыбора = Ложь;
//		ПользовательИБ.Имя = ПользователиСлужебныйКлиентСервер.ПолучитьКраткоеИмяПользователяИБ(ФизЛицо.Наименование);
		ПользовательИБ.Имя = Логин;
		ПользовательИБ.ПолноеИмя = ФизЛицо.Наименование;
		
		ПользовательИБ.Роли.Добавить(Метаданные.Роли.БазовыеПрава);
		ПользовательИБ.Роли.Добавить(Метаданные.Роли.ВыводНаПринтерФайлБуферОбмена);
		ПользовательИБ.Роли.Добавить(Метаданные.Роли.ЗапускТонкогоКлиента);
		ПользовательИБ.Роли.Добавить(Метаданные.Роли.ИзменениеВыполнениеЗадач);
		ПользовательИБ.Роли.Добавить(Метаданные.Роли.ЧтениеБазовойНСИ);
		ПользовательИБ.Роли.Добавить(Метаданные.Роли.ЧтениеЗаданий);
		ПользовательИБ.Роли.Добавить(Метаданные.Роли.ЧтениеЗадач);
		ПользовательИБ.Роли.Добавить(Метаданные.Роли.ЧтениеОбщейБазовойНСИ);
		
		Если Полномочия = "Пользователь" Тогда
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.ПотребительУслуг);
		ИначеЕсли Полномочия = "Сотрудник" Тогда
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.Разработчик);
		КонецЕсли;
		ПользовательИБ.Записать();
		
		// Новый пользователь
		НовыйПользователь = Справочники.Пользователи.СоздатьЭлемент();
		НовыйПользователь.Наименование = Логин;
		НовыйПользователь.ФизЛицо = ФизЛицо;
		НовыйПользователь.ОсновнаяКонфигурация = Справочники.Конфигурации.KT2000_Alcohol_Mnfc;
		НовыйПользователь.ДополнительныеСвойства.Вставить("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
		НовыйПользователь.ИдентификаторПользователяИБ = ПользовательИБ.УникальныйИдентификатор;
		Попытка
			НовыйПользователь.Записать();
			НовыйПользователь.Наименование = ФизЛицо.Наименование;
			НовыйПользователь.Записать();
			Пользователь = НовыйПользователь.Ссылка;
		Исключение
			Пользователь = Неопределено;
		КонецПопытки; 
		
	Иначе
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь.ИдентификаторПользователяИБ);
		Если ПользовательИБ = Неопределено Тогда
			
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ПользователиСлужебныйКлиентСервер.ПолучитьКраткоеИмяПользователяИБ(ФизЛицо.Наименование));
			
			Если ПользовательИБ = Неопределено Тогда
				
				ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Логин);
				
				Если ПользовательИБ = Неопределено Тогда
					// Новый пользователь ИБ
					ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
					ПользовательИБ.ПользовательОС = Логин;
					ПользовательИБ.АутентификацияОС = Истина;
					ПользовательИБ.АутентификацияСтандартная = Ложь;
					ПользовательИБ.ПоказыватьВСпискеВыбора = Ложь;
	//				ПользовательИБ.Имя = ПользователиСлужебныйКлиентСервер.ПолучитьКраткоеИмяПользователяИБ(ФизЛицо.Наименование);
					ПользовательИБ.Имя = Логин;
					ПользовательИБ.ПолноеИмя = ФизЛицо.Наименование;
					
					ПользовательИБ.Роли.Добавить(Метаданные.Роли.БазовыеПрава);
					ПользовательИБ.Роли.Добавить(Метаданные.Роли.ВыводНаПринтерФайлБуферОбмена);
					ПользовательИБ.Роли.Добавить(Метаданные.Роли.ЗапускТонкогоКлиента);
					ПользовательИБ.Роли.Добавить(Метаданные.Роли.ИзменениеВыполнениеЗадач);
					ПользовательИБ.Роли.Добавить(Метаданные.Роли.ЧтениеБазовойНСИ);
					ПользовательИБ.Роли.Добавить(Метаданные.Роли.ЧтениеЗаданий);
					ПользовательИБ.Роли.Добавить(Метаданные.Роли.ЧтениеЗадач);
					ПользовательИБ.Роли.Добавить(Метаданные.Роли.ЧтениеОбщейБазовойНСИ);
					
					Если Полномочия = "Пользователь" Тогда
						ПользовательИБ.Роли.Добавить(Метаданные.Роли.ПотребительУслуг);
					ИначеЕсли Полномочия = "Сотрудник" Тогда
						ПользовательИБ.Роли.Добавить(Метаданные.Роли.Разработчик);
					КонецЕсли;
					ПользовательИБ.Записать();
					
				КонецЕсли; 
			КонецЕсли;
			// запишем уникальный идентификатор
			ПользовательОбъект = Пользователь.ПолучитьОбъект();
			ПользовательОбъект.ДополнительныеСвойства.Вставить("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
			ПользовательОбъект.ИдентификаторПользователяИБ = ПользовательИБ.УникальныйИдентификатор;
			Если НЕ ЗначениеЗаполнено(ПользовательОбъект.ОсновнаяКонфигурация) Тогда
				ПользовательОбъект.ОсновнаяКонфигурация = Справочники.Конфигурации.KT2000_Alcohol_Mnfc;
			КонецЕсли; 
			Попытка
				ПользовательОбъект.Записать();
			Исключение
			КонецПопытки; 
		КонецЕсли;
		
		// добавим роль согласно полномочий, если ее нет
		Если Полномочия = "Пользователь" И НЕ ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПотребительУслуг) Тогда
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.ПотребительУслуг);
			ПользовательИБ.Записать();
		ИначеЕсли Полномочия = "Сотрудник" И НЕ ПользовательИБ.Роли.Содержит(Метаданные.Роли.Разработчик)  Тогда
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.Разработчик);
			ПользовательИБ.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Пользователь;
	
КонецФункции // ()

&НаСервере
Функция ПолучитьСотрудникаПоФизЛицу(ФизЛицо) Экспорт
	
	Возврат Справочники.Сотрудники.НайтиПоРеквизиту("ФизЛицо", ФизЛицо);
	
КонецФункции // ()

&НаСервере
Функция ПолучитьБазыКлиентаПоЗаданномуТипу(Файл,ТипИБ) Экспорт
	
	Отбор = Новый Структура("Использование", Истина);
	Клиенты = Файл.Клиенты.НайтиСтроки(Отбор);
	
	МассивИБ = Новый Массив;
	Для каждого СтрокаМассива Из Клиенты Цикл
		Для каждого СтрокаИнформационнаяБаза Из СтрокаМассива.Клиент.ИнформационныеБазы Цикл
			Если СтрокаИнформационнаяБаза.ИнформационнаяБаза.ТипИнформационнойБазы = ТипИБ Тогда
				МассивИБ.Добавить(СтрокаИнформационнаяБаза.ИнформационнаяБаза);
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла;
	Возврат МассивИБ;
	
КонецФункции // ()

&НаСервере
Функция ЗначениеЗаполненоНаСервере(Задача) Экспорт

	ТекстСообщения = "";
	Если ТипЗнч(Задача.Предмет) = Тип("ДокументСсылка.Обращение") Тогда
		Если Задача.Предмет.ВнешниеОтчетыИОбработки.Количество() < 1 Тогда
			ТекстСообщения = "В обращении не указана внешняя обработка."+Символы.ПС;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(Задача.Предмет.Конфигурация) Тогда
			ТекстСообщения = ТекстСообщения + "В обращении не указана конфигурация."+Символы.ПС;
		КонецЕсли; 
		
		Для каждого СтрокаВнешнийОтчетОбработка Из Задача.Предмет.ВнешниеОтчетыИОбработки Цикл
			НайденныеЗначения = СтрокаВнешнийОтчетОбработка.ВнешняяОбработка.Клиенты.НайтиСтроки(Новый Структура("Использование", Истина));
			Если НайденныеЗначения.Количество() = 0 Тогда
				ТекстСообщения = ТекстСообщения + "В обработке " + СтрокаВнешнийОтчетОбработка.ВнешняяОбработка +" должен быть выбран хотя бы 1 клиент.";
			КонецЕсли; 
		КонецЦикла; 
		 
	КонецЕсли; 
	
	Возврат ?(ТекстСообщения = "",ТекстСообщения,"Действие не выполнено!"+Символы.ПС+ТекстСообщения);
	
КонецФункции // ()

&НаСервере
Процедура ИзменитьСтатусОбращения(Индекс, Задача) Экспорт
	Если НЕ ТипЗнч(Задача.Предмет) = Тип("ДокументСсылка.Обращение") Тогда
		Возврат;
	КонецЕсли; 
	Состояние = Перечисления.СостоянияОбращений[Индекс];
	ОбращениеОбъект = Задача.Предмет.ПолучитьОбъект();
	ОбращениеОбъект.Состояние = Состояние;
	Попытка
		ОбращениеОбъект.Записать();
	Исключение
		ЗаписьЖурналаРегистрации("Изменение состояния обращения",,Метаданные.Документы.Обращение,Задача.Предмет,ОписаниеОшибки(),);
	КонецПопытки; 
	
	Для каждого СтрокаВнешнийОтчетОбработка Из Задача.Предмет.ВнешниеОтчетыИОбработки Цикл
		ВнешниеОбработкиОбъект = СтрокаВнешнийОтчетОбработка.ВнешняяОбработка.ПолучитьОбъект();
		ВнешниеОбработкиОбъект.Состояние = Состояние;
		Попытка
			ВнешниеОбработкиОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации("Изменение состояния внешней обработки",,Метаданные.Справочники.ВнешниеОбработки,СтрокаВнешнийОтчетОбработка.ВнешняяОбработка,ОписаниеОшибки(),);
		КонецПопытки;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСтатусИзмененияКонфигурации(Индекс, ДокументСсылка) Экспорт
	
	Если НЕ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ИзменениеКонфигурации") Тогда
		Возврат;
	КонецЕсли; 
	
	Состояние = Перечисления.СостоянияИзмененийКонфигурации[Индекс];
	ИзменениеКонфигурацииОбъект = ДокументСсылка.ПолучитьОбъект();
	ИзменениеКонфигурацииОбъект.Состояние = Состояние;
	Попытка
		ИзменениеКонфигурацииОбъект.Записать();
	Исключение
		ЗаписьЖурналаРегистрации("Изменение состояния ИзменениеКонфигурации",,Метаданные.Документы.ИзменениеКонфигурации,ДокументСсылка,ОписаниеОшибки(),);
	КонецПопытки;
	
КонецПроцедуры

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция ПолучитьЭлектронныйАдресИзБизнесПроцесса(БП, РеквизитБП) Экспорт 

Возврат БП[РеквизитБП].ФизЛицо.АдресЭлектроннойПочты;

КонецФункции // ПолучитьЭлектронныйАдресПроверяющегоБизнесПроцесса()

&НаСервере
Функция ПолучитьРеквизитПоСсылке(Ссылка, Реквизит) Экспорт

	Возврат Ссылка[Реквизит];	

КонецФункции // ПолучитьРеквизитПоСсылке()

&НаСервере
Функция ПолучитьКонстанту(ИмяКонстанты) Экспорт

	Возврат Константы[ИмяКонстанты].Получить();	

КонецФункции // ПолучитьРеквизитПоСсылке()

&НаСервере
Процедура ЗаписатьКомментарийПоЗадаче(Задача) Экспорт
	
	БизнесПроцессОбъект = Задача.БизнесПроцесс.ПолучитьОбъект();
	БизнесПроцессОбъект.КомментарийПоЗадаче = Задача.РезультатВыполнения;
	БизнесПроцессОбъект.Записать();
	
КонецПроцедуры

&НаСервере
Функция ВыполнятьСогласование() Экспорт 

	Возврат Константы.ВыполнятьСогласование.Получить();

КонецФункции // ()

Функция ТекущийПользователь() Экспорт
	
	Возврат Пользователи.ТекущийПользователь();
	
КонецФункции // ()

&НаСервере
Функция ЕстьДоступКОбъекту(Объект) Экспорт 
	
	ЕстьДоступ = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	РегистрСведений.ДоступКЗакрытымОбъектам КАК ДоступКЗакрытымОбъектам
		|ГДЕ
		|	ДоступКЗакрытымОбъектам.Пользователь = &Пользователь
		|	И ДоступКЗакрытымОбъектам.Объект = &Объект";
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ЕстьДоступ = Истина;
	КонецЕсли; 
	
	Возврат ЕстьДоступ;

КонецФункции // ()

Процедура СоздатьСообщениеПоЗапросу(КлючЗаписи) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СообщенияИУведомления.Документ,
		|	СообщенияИУведомления.Код,
		|	СообщенияИУведомления.Отправлено,
		|	СообщенияИУведомления.Получатель,
		|	СообщенияИУведомления.Отправитель,
		|	СообщенияИУведомления.Заголовок,
		|	СообщенияИУведомления.ТекстСообщения,
		|	СообщенияИУведомления.Статус,
		|	СообщенияИУведомления.ДатаРегистрации,
		|	СообщенияИУведомления.НаличиеПрикрепленныхФайлов,
		|	СообщенияИУведомления.Копия,
		|	СообщенияИУведомления.КопияТекст,
		|	СообщенияИУведомления.ДатаОтправки,
		|	СообщенияИУведомления.Параметры
		|ИЗ
		|	РегистрСведений.СообщенияИУведомления КАК СообщенияИУведомления
		|ГДЕ
		|	СообщенияИУведомления.Документ = &Документ
		|	И СообщенияИУведомления.Код = &Код";
	
	Запрос.УстановитьПараметр("Документ", КлючЗаписи.Документ);
	Запрос.УстановитьПараметр("Код", КлючЗаписи.Код);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	МенеджерЗаписи = РегистрыСведений.СообщенияИУведомления.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаДетальныеЗаписи);
	МенеджерЗаписи.ДатаОтправки = Дата("00010101000000");
	МенеджерЗаписи.ДатаРегистрации = ТекущаяДата();
	МенеджерЗаписи.Код = ТИ.ПолучитьНовыйКодДляРегистраСведений("СообщенияИУведомления",Новый Структура("Документ", КлючЗаписи.Документ)); 
	ФизЛицо = ТИ.ТекущийПользователь().ФизЛицо;
	МенеджерЗаписи.Отправитель = ФизЛицо;
	МенеджерЗаписи.Отправлено = Ложь;
	МенеджерЗаписи.Получатель = ФизЛицо.АдресЭлектроннойПочты;
	МенеджерЗаписи.Статус = "Сообщение готово к отправлению";
	МенеджерЗаписи.Записать();

КонецПроцедуры // СоздатьСообщениеПоЗапросу()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция ДоступнаРоль(Роль) Экспорт 

	Возврат РольДоступна(Роль);

КонецФункции // ДоступнаРоль()

Функция ПолучитьПолноеОписаниеФайла(Файл, Расширение = Истина) Экспорт 
	
	ИмяФайла = "ТипФайла-ПолныйКод-НаименованиеФункции-Версия НомерВерсии";
	ИмяФайла = СтрЗаменить(ИмяФайла, "ТипФайла", Файл.ТипФайла);
	ИмяФайла = СтрЗаменить(ИмяФайла, "ПолныйКод", Файл.Владелец.ПолныйКод);
	ИмяФайла = СтрЗаменить(ИмяФайла, "НаименованиеФункции", Файл.Владелец.Наименование);
	ИмяФайла = СтрЗаменить(ИмяФайла, "НомерВерсии", Файл.ТекущаяВерсияНомерВерсии);
	Если Расширение Тогда
		ИмяФайла = ИмяФайла + "." + Файл.ТекущаяВерсияРасширение;
	КонецЕсли; 
	
	Возврат ИмяФайла;

КонецФункции // ПолучитьПолноеОписаниеФайла()

Функция ПолучитьИмяСервера() Экспорт 

	Возврат ИмяКомпьютера();

КонецФункции // ПолучитьИмяСервера()

Функция СписокБазПуст(Клиент) Экспорт

	Возврат Клиент.ИнформационныеБазы.Количество()=0;

КонецФункции // СписокБазЗаполнен()

Функция ПолучитьПоследниеВерсииОбработок(ОбращениеСсылка)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбращениеВнешниеОтчетыИОбработки.ВнешняяОбработка,
		|	МАКСИМУМ(ВерсииВнешнихОбработок.НомерВерсии) КАК НомерВерсии
		|ПОМЕСТИТЬ ВнешниеОбработкиПоследниеВерсии
		|ИЗ
		|	Документ.Обращение.ВнешниеОтчетыИОбработки КАК ОбращениеВнешниеОтчетыИОбработки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииВнешнихОбработок КАК ВерсииВнешнихОбработок
		|		ПО ОбращениеВнешниеОтчетыИОбработки.ВнешняяОбработка = ВерсииВнешнихОбработок.Владелец
		|ГДЕ
		|	ОбращениеВнешниеОтчетыИОбработки.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбращениеВнешниеОтчетыИОбработки.ВнешняяОбработка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВнешниеОбработкиПоследниеВерсии.ВнешняяОбработка,
		|	ВерсииВнешнихОбработок.Ссылка КАК Версия
		|ИЗ
		|	ВнешниеОбработкиПоследниеВерсии КАК ВнешниеОбработкиПоследниеВерсии
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииВнешнихОбработок КАК ВерсииВнешнихОбработок
		|		ПО ВнешниеОбработкиПоследниеВерсии.НомерВерсии = ВерсииВнешнихОбработок.НомерВерсии
		|			И ВнешниеОбработкиПоследниеВерсии.ВнешняяОбработка = ВерсииВнешнихОбработок.Владелец
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВнешниеОбработкиПоследниеВерсии";
	
	Запрос.УстановитьПараметр("Ссылка", ОбращениеСсылка);
	
	Возврат Запрос.Выполнить();

КонецФункции // ()
 

Процедура ДобавитьИнформациюВПоследнююВерсиюОбработок(ОбращениеСсылка, Статус) Экспорт

	РезультатЗапроса = ПолучитьПоследниеВерсииОбработок(ОбращениеСсылка);
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Версия) Тогда
			ВерсияОбъект = ВыборкаДетальныеЗаписи.Версия.ПолучитьОбъект();
			ВерсияОбъект.Обращение = ОбращениеСсылка;
			ВерсияОбъект.Статус = Статус;
			ВерсияОбъект.Записать();
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ДобавитьИнформациюВПоследнююВерсиюОбработок()

Процедура ОбновитьТекущиеВерсииВнешнихОбработок(ОбращениеСсылка) Экспорт

	РезультатЗапроса = ПолучитьПоследниеВерсииОбработок(ОбращениеСсылка);
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Версия) Тогда
			ВыборкаДетальныеЗаписи.ВнешняяОбработка.ПолучитьОбъект().ОбновитьТекущуюВерсию(ВыборкаДетальныеЗаписи.Версия);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ОткатитьХранилищеВнешнейОбработкиДоТекущейВерсии(ОбращениеСсылка) Экспорт 

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбращениеВнешниеОтчетыИОбработки.ВнешняяОбработка,
		|	ХранимыеОбработкиВерсий.ХранимыйФайл
		|ИЗ
		|	Документ.Обращение.ВнешниеОтчетыИОбработки КАК ОбращениеВнешниеОтчетыИОбработки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ХранимыеОбработкиВерсий КАК ХранимыеОбработкиВерсий
		|		ПО ОбращениеВнешниеОтчетыИОбработки.ВнешняяОбработка.ТекущаяВерсия = ХранимыеОбработкиВерсий.ВерсияФайла
		|ГДЕ
		|	ОбращениеВнешниеОтчетыИОбработки.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ОбращениеСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ХранимыйФайл) Тогда
			ВнешняяОбработкаОбъект = ВыборкаДетальныеЗаписи.ВнешняяОбработка.ПолучитьОбъект();
			ВнешняяОбработкаОбъект.ХранилищеВнешнейОбработки = ВыборкаДетальныеЗаписи.ХранимыйФайл;
			ВнешняяОбработкаОбъект.Записать();
		КонецЕсли; 
	КонецЦикла;

КонецПроцедуры
 
Функция ПолучитьФайлВерсии(ВерсияФайла) Экспорт 
	
	ВозвращаемоеЗначение = Неопределено;
	
	РесурсыСтруктура = РегистрыСведений.ХранимыеОбработкиВерсий.Получить(Новый Структура("ВерсияФайла", ВерсияФайла));
	Если РесурсыСтруктура.Количество() Тогда
		
		ВозвращаемоеЗначение = РесурсыСтруктура.ХранимыйФайл;
		
	КонецЕсли; 
	
	Возврат ВозвращаемоеЗначение;

КонецФункции // ПолучитьФайлВерсии()
 

#КонецОбласти 
//#Область СервисныеФункцииИПроцедуры

#Область ОтправкаИПолучениеУведомлений

&НаСервере
Процедура ОтправкаУведомлений() Экспорт
	
	ПустойМассив = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЖурналУведомлений.Задача,
	|	ЖурналУведомлений.Узел,
	|	ЖурналУведомлений.Узел.ИнформационнаяБаза КАК ИнформационнаяБаза,
	|	ЖурналУведомлений.Операция,
	|	ЖурналВыгрузки.Обработка,
	|	ЖурналУведомлений.ЧислоОтправлений + 1 КАК ЧислоОтправлений
	|ИЗ
	|	РегистрСведений.ЖурналУведомлений КАК ЖурналУведомлений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналВыгрузки КАК ЖурналВыгрузки
	|		ПО ЖурналУведомлений.Задача = ЖурналВыгрузки.Задача
	|			И ЖурналУведомлений.Узел = ЖурналВыгрузки.Узел
	|			И ЖурналУведомлений.Операция = ЖурналВыгрузки.Операция
	|			И ЖурналУведомлений.Обработка = ЖурналВыгрузки.Обработка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЖурналУведомлений.Узел.ИнформационнаяБаза КАК ИнформационнаяБаза,
	|	ЖурналУведомлений.Обработка,
	|	ЖурналУведомлений.Операция,
	|	ЖурналУведомлений.Задача
	|ИЗ
	|	РегистрСведений.ЖурналУведомлений КАК ЖурналУведомлений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналВыгрузки КАК ЖурналВыгрузки
	|		ПО ЖурналУведомлений.Узел = ЖурналВыгрузки.Узел
	|			И ЖурналУведомлений.Задача = ЖурналВыгрузки.Задача
	|			И ЖурналУведомлений.Операция = ЖурналВыгрузки.Операция
	|			И ЖурналУведомлений.Обработка = ЖурналВыгрузки.Обработка
	|ГДЕ
	|	ЖурналВыгрузки.Узел ЕСТЬ NULL";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаНевыгруженных = МассивРезультатов[0].Выгрузить();
	ТаблицаВыгруженных = МассивРезультатов[1].Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЖурналУведомлений.Задача КАК Задача,
		|	ЖурналУведомлений.Операция,
		|	МАКСИМУМ(ЖурналУведомлений.ЧислоОтправлений) КАК ЧислоОтправлений
		|ИЗ
		|	РегистрСведений.ЖурналУведомлений КАК ЖурналУведомлений
		|
		|СГРУППИРОВАТЬ ПО
		|	ЖурналУведомлений.Задача,
		|	ЖурналУведомлений.Операция
		|ИТОГИ ПО
		|	Задача";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаЗадача = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЗадача.Следующий() Цикл
	
		ВыборкаДетальныеЗаписи = ВыборкаЗадача.Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Задача = ВыборкаДетальныеЗаписи.Задача;
			Операция = ВыборкаДетальныеЗаписи.Операция;
			ЧислоОтправлений = ВыборкаДетальныеЗаписи.ЧислоОтправлений;
			
			Отбор = Новый Структура;
			Отбор.Вставить("Задача", Задача);
			Отбор.Вставить("Операция", Операция);
			
			ТаблицаНевыгруженныхСОтбором = ТаблицаНевыгруженных.Скопировать(Отбор);
			ТаблицаВыгруженныхСОтбором = ТаблицаВыгруженных.Скопировать(Отбор);
			
			АдресИсполнителя = "";
			АдресУведомления = "";
			ДинамическийСписокАдресов = "";
			Отправитель = Неопределено;
			Если Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоТестированию.ПередачаНаТестирование") Тогда
				АдресИсполнителя = Задача.Предмет.Инициатор.ФизЛицо.АдресЭлектроннойПочты;
				АдресУведомления = Задача.Предмет.Ответственный.ФизЛицо.АдресЭлектроннойПочты;
				ШаблонСообщения = Справочники.ШаблоныСообщений.ТестированиеВнешнейОбработки;
				Отправитель = Задача.Предмет.Ответственный.ФизЛицо;
			ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоТестированию.УспешноеСогласование") Тогда
				Если Задача.БизнесПроцесс.НаПроверке Тогда
					ШаблонСообщения = Справочники.ШаблоныСообщений.УспешноеСогласование;
					АдресИсполнителя = Задача.Предмет.Ответственный.ФизЛицо.АдресЭлектроннойПочты;
					АдресУведомления = Задача.Предмет.Инициатор.ФизЛицо.АдресЭлектроннойПочты;
					Отправитель = Задача.Предмет.Инициатор.ФизЛицо;
					ДинамическийСписокАдресов = АдресИсполнителя;
				Иначе
					ШаблонСообщения = Справочники.ШаблоныСообщений.УведомлениеОВыгрузке;
					АдресИсполнителя = Задача.Предмет.Инициатор.ФизЛицо.АдресЭлектроннойПочты;
					АдресУведомления = Задача.Предмет.Ответственный.ФизЛицо.АдресЭлектроннойПочты;
					Отправитель = Задача.Предмет.Инициатор.ФизЛицо;
					ДинамическийСписокАдресов = АдресИсполнителя;
				КонецЕсли;
			КонецЕсли; 
			
			//уведомление еще не отправлялось
			Если ЧислоОтправлений = 0 Тогда
				
				СформироватьИОтправитьУведомление(Задача, ШаблонСообщения, АдресИсполнителя, Задача.БизнесПроцесс.КомментарийПоЗадаче,Отправитель,ТаблицаВыгруженныхСОтбором, ТаблицаНевыгруженныхСОтбором,,,АдресУведомления);
				
				//есть невыгруженные, отправим отдельное сообщение
				Если ТаблицаНевыгруженныхСОтбором.Количество() > 0 Тогда
					СформироватьИОтправитьУведомление(Задача, Справочники.ШаблоныСообщений.УведомлениеПользователяОПроблеме, АдресИсполнителя,"",Отправитель,ТаблицаВыгруженныхСОтбором, ТаблицаНевыгруженныхСОтбором,,,АдресУведомления);
				КонецЕсли; 
			КонецЕсли; 
			
			//если было выгружено, то что ранее не выгрузилось
			Если ЧислоОтправлений > 0 И ТаблицаВыгруженныхСОтбором.Количество() > 0 Тогда
				СформироватьИОтправитьУведомление(Задача, Справочники.ШаблоныСообщений.УведомлениеОВыгрузке, АдресИсполнителя,"",,ТаблицаВыгруженныхСОтбором, ТаблицаНевыгруженныхСОтбором,,,АдресУведомления);
			КонецЕсли;
			
			//В случае успешной отправки оставим в Журнале Уведомлений только не выгруженные
			НаборЗаписей = РегистрыСведений.ЖурналУведомлений.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Операция.Установить(Операция);
			НаборЗаписей.Отбор.Задача.Установить(Задача);
			НаборЗаписей.Загрузить(ТаблицаНевыгруженныхСОтбором);
			НаборЗаписей.Записать();
			
		КонецЦикла;
	КонецЦикла;
	
	ОтправитьЗаявкиВСлужбуПоддержки();
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьЗаявкиВСлужбуПоддержки()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЖурналОшибокОбмена.Узел,
		|	ЖурналОшибокОбмена.ВидОшибкиОбмена КАК ВидОшибкиОбмена,
		|	ЖурналОшибокОбмена.КоличествоПопытокОбмена КАК КоличествоПопытокОбмена,
		|	ЖурналОшибокОбмена.ОписаниеОшибки,
		|	ЖурналОшибокОбмена.Узел.ИнформационнаяБаза.WSСсылка КАК WSСсылка,
		|	ЖурналОшибокОбмена.Узел.ИнформационнаяБаза КАК ИнформационнаяБаза
		|ИЗ
		|	РегистрСведений.ЖурналОшибокОбмена КАК ЖурналОшибокОбмена
		|ГДЕ
		|	ЖурналОшибокОбмена.ЗаявкаВСлужбуПоддержкиОтправлена = ЛОЖЬ
		|ИТОГИ
		|	МАКСИМУМ(КоличествоПопытокОбмена)
		|ПО
		|	ВидОшибкиОбмена";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаВидОшибкиОбмена = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	КоличествоПопытокОбменаКонстанта = Константы.КоличествоПопытокОбмена.Получить();
	
	Пока ВыборкаВидОшибкиОбмена.Следующий() Цикл
		
		Если ВыборкаВидОшибкиОбмена.КоличествоПопытокОбмена > КоличествоПопытокОбменаКонстанта Тогда
			
			ВыборкаДетальныеЗаписи = ВыборкаВидОшибкиОбмена.Выбрать();
			
			Если ВыборкаВидОшибкиОбмена.ВидОшибкиОбмена = Перечисления.ВидыОшибокОбмена.ОшибкаСоединения Тогда
				ТекстОбращения = "<P>Не работают веб-сервисы информационных баз 1С: </P>";
			ИначеЕсли ВыборкаВидОшибкиОбмена.ВидОшибкиОбмена = Перечисления.ВидыОшибокОбмена.ОшибкаОбмена Тогда
				ТекстОбращения = "<P>Не работает обмен в информационных базах 1С: </P>";
			КонецЕсли; 
			
			МассивУзлов = Новый Массив;
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Если ВыборкаДетальныеЗаписи.КоличествоПопытокОбмена > КоличествоПопытокОбменаКонстанта Тогда
					
					МассивУзлов.Добавить(ВыборкаДетальныеЗаписи.Узел);
					
					//Если ВыборкаВидОшибкиОбмена.ВидОшибкиОбмена = Перечисления.ВидыОшибокОбмена.ОшибкаСоединения Тогда
					//	Объект = ВыборкаДетальныеЗаписи.WSСсылка;
					//ИначеЕсли ВыборкаВидОшибкиОбмена.ВидОшибкиОбмена = Перечисления.ВидыОшибокОбмена.ОшибкаОбмена Тогда
					//	Объект = ВыборкаДетальныеЗаписи.ИнформационнаяБаза;
					//КонецЕсли; 
					
					Объект = ВыборкаДетальныеЗаписи.ИнформационнаяБаза;
					
					ТекстОбращения = ТекстОбращения + "<P>" + Объект+"</P>";
					ТекстОбращения = ТекстОбращения + "<P>" + ВыборкаДетальныеЗаписи.ОписаниеОшибки+"</P>";
					
				КонецЕсли; 
				
			КонецЦикла;
			
			Попытка
				
				СформироватьИОтправитьУведомление(ВыборкаВидОшибкиОбмена.ВидОшибкиОбмена,Справочники.ШаблоныСообщений.УведомлениеОПроблемеНаHelpDesk, Константы.АдресHelpDesk.Получить(),ТекстОбращения, Константы.АдминистраторСистемы.Получить(),,,,,,Константы.АдминистраторСистемы.Получить().АдресЭлектроннойПочты);
				
				Для каждого Узел Из МассивУзлов Цикл
					
					//ЖурналОшибокОбмена = РегистрыСведений.ЖурналОшибокОбмена.СоздатьНаборЗаписей();
					//ЖурналОшибокОбмена.Отбор.Узел.Установить(Узел);
					//ЖурналОшибокОбмена.Отбор.ВидОшибкиОбмена.Установить(ВыборкаВидОшибкиОбмена.ВидОшибкиОбмена);
					//ЖурналОшибокОбмена.Прочитать();
					//Для каждого Запись Из ЖурналОшибокОбмена Цикл
					//	Запись.ЗаявкаВСлужбуПоддержкиОтправлена = Истина;
					//КонецЦикла; 
					//ЖурналОшибокОбмена.Записать();
					
					ЖурналОшибокОбмена = РегистрыСведений.ЖурналОшибокОбмена.СоздатьМенеджерЗаписи();
					ЖурналОшибокОбмена.Узел = Узел;
					ЖурналОшибокОбмена.ВидОшибкиОбмена = ВыборкаВидОшибкиОбмена.ВидОшибкиОбмена;
					ЖурналОшибокОбмена.Прочитать();
					Если ЖурналОшибокОбмена.Выбран() Тогда
						ЖурналОшибокОбмена.ЗаявкаВСлужбуПоддержкиОтправлена = Истина;
						ЖурналОшибокОбмена.Записать();
					КонецЕсли; 
					
				КонецЦикла; 
				
			Исключение
			КонецПопытки;
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ОтправитьЗаявкуВСлужбуПоддержки()

&НаСервере
Процедура СформироватьИОтправитьУведомление(Задача, ШаблонСообщения, Адресат, КомментарийПоЗадаче = "", Отправитель = Неопределено, ТаблицаВыгруженных = Неопределено, ТаблицаНевыгруженных = Неопределено, АдресОтправителя = Неопределено, ТипИнформационнойБазы = Неопределено, Копия = Неопределено, СлепаяКопия = Неопределено) Экспорт 

	СообщениеСтруктура = СформироватьЗаголовокИТекстСообщения(Задача, ШаблонСообщения, КомментарийПоЗадаче, Отправитель,,,ТаблицаВыгруженных, ТаблицаНевыгруженных);
	
	Если Копия <> Неопределено И ТипЗнч(Копия) = Тип("Строка") Тогда
		КопияМассив = Новый Массив;
		КопияМассив.Добавить(Копия);
	Иначе
		КопияМассив = Копия;
	КонецЕсли; 
	
	Если ТипЗнч(Задача) = Тип("СправочникСсылка.Файлы") 
		или ТипЗнч(Задача) = Тип("СправочникСсылка.Функции") 
		или ТипЗнч(Задача) = Тип("ПеречислениеСсылка.ВидыОшибокОбмена") Тогда
		Основание = Задача;
	Иначе
		Основание = Задача.Предмет;
	КонецЕсли; 
	
	ИмяФайла = Неопределено;
	СсылкаНаДвоичныеДанныеФайла = Неопределено;
	
	Если ТипЗнч(Задача) = Тип("СправочникСсылка.Файлы") Тогда
		//это сообщение со ссылкой на инструкцию
		ИмяФайла = ТИ.ПолучитьПолноеОписаниеФайла(Задача);
		СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(Задача.ХранилищеФайла.Получить(), Новый УникальныйИдентификатор);
	
	КонецЕсли; 
	
	СоздатьСообщение(Основание, СообщениеСтруктура, Отправитель, Адресат, КопияМассив, ИмяФайла, СсылкаНаДвоичныеДанныеФайла, СлепаяКопия);
	
//	ОтправитьПочтовоеСообщение(Адресат, СообщениеСтруктура.ЗаголовокПисьма, СообщениеСтруктура.ТекстПисьма, АдресОтправителя, Копия);
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьПочтовоеСообщение(Получатель, ТемаСообщения, ТекстСообщения, АдресОтправителя = Неопределено, Копия = Неопределено,СлепаяКопия = Неопределено, Ошибка = "", Вложения = Неопределено) Экспорт
	
	    Если НЕ ЗначениеЗаполнено(Получатель) Тогда
			Возврат;
		КонецЕсли; 
		Почта = Новый ИнтернетПочта;
		Профиль = Новый ИнтернетПочтовыйПрофиль;
		Профиль.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
		Профиль.АдресСервераSMTP = "mail.rusalco.com";
		Профиль.ПортSMTP = 25;
		Профиль.ВремяОжидания = 100;
		
		Попытка
			Почта.Подключиться(Профиль);
		Исключение
			ЗаписьЖурналаРегистрации("Подключение почты",,,,ОписаниеОшибки(),);
			Ошибка = "Описание ошибки: "+ОписаниеОшибки();
			Возврат;
		КонецПопытки;              
		
		Сообщение = Новый ИнтернетПочтовоеСообщение;
		Сообщение.Тема = ТемаСообщения;
		Сообщение.Тексты.Добавить(ТекстСообщения, ТипТекстаПочтовогоСообщения.HTML);
		
		Если ТипЗнч(Получатель) = Тип("Массив") И Получатель.Количество() Тогда
			Для каждого ЭлементМассива Из Получатель Цикл
				Сообщение.Получатели.Добавить(СокрЛП(ЭлементМассива));
			КонецЦикла; 
		Иначе
			Сообщение.Получатели.Добавить(СокрЛП(Получатель));
		КонецЕсли;  
		
		Если НЕ Копия = Неопределено Тогда
			Если ТипЗнч(Копия) = Тип("Массив") И Копия.Количество() Тогда
				Для каждого ЭлементМассива Из Копия Цикл
					Сообщение.Копии.Добавить(СокрЛП(ЭлементМассива));
				КонецЦикла; 
			Иначе
				Сообщение.Копии.Добавить(СокрЛП(Копия));
			КонецЕсли;  
		КонецЕсли;  
		
		Если НЕ СлепаяКопия = Неопределено Тогда
			Если ТипЗнч(СлепаяКопия) = Тип("Массив") И СлепаяКопия.Количество() Тогда
				Для каждого ЭлементМассива Из СлепаяКопия Цикл
					Сообщение.СлепыеКопии.Добавить(СокрЛП(ЭлементМассива));
				КонецЦикла; 
			Иначе
				Сообщение.СлепыеКопии.Добавить(СокрЛП(СлепаяКопия));
			КонецЕсли;  
		КонецЕсли;  
		
		Если АдресОтправителя = Неопределено Тогда
			
			СтруктураПараметров = Константы.ХранилищеПараметровПочтовогоЯщика.Получить().Получить();
			Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
				АдресОтправителя = СтруктураПараметров.АдресОтправителя;
				ИмяОтправителя = СтруктураПараметров.ИмяОтправителя;
			Иначе
				АдресОтправителя = "1c.ut@roust.com";              
				ИмяОтправителя = "1С: Управление тестированием";              
			КонецЕсли; 
			
			Сообщение.Отправитель.Адрес = АдресОтправителя;              
			Сообщение.Отправитель.ОтображаемоеИмя = ИмяОтправителя;
			
		Иначе
			
			Сообщение.Отправитель.Адрес = АдресОтправителя;              
			
		КонецЕсли; 
		
		Если НЕ Вложения = Неопределено Тогда
			Для каждого Вложение Из Вложения Цикл
				Сообщение.Вложения.Добавить(Вложение.Данные,Вложение.ИмяФайла);
			КонецЦикла; 
		КонецЕсли; 
		
		Попытка
			Почта.Послать(Сообщение);
		Исключение
			ЗаписьЖурналаРегистрации("Отправка почты",,,,ОписаниеОшибки(),);
			Ошибка = "Описание ошибки: "+ОписаниеОшибки();
		КонецПопытки;              
		
		Попытка
			Почта.Отключиться(); 
		Исключение
		КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция СформироватьЗаголовокИТекстСообщения(Задача, ШаблонСообщения, КомментарийПоЗадаче = Неопределено, Отправитель = Неопределено, Исполнитель = Неопределено, Проверяющий = Неопределено, ТаблицаВыгруженных = Неопределено, ТаблицаНевыгруженных = Неопределено) Экспорт 
	
	Если ТипЗнч(Задача) = Тип("ПеречислениеСсылка.ВидыОшибокОбмена") Тогда
		
		Если Задача = Перечисления.ВидыОшибокОбмена.ОшибкаСоединения Тогда
			ЗаголовокОбращения = "Веб-сервисы 1С";
		ИначеЕсли Задача = Перечисления.ВидыОшибокОбмена.ОшибкаОбмена Тогда
			ЗаголовокОбращения = "1С: УТ Обмен";
		КонецЕсли; 
			
		ЗаголовокПисьма = ЗаголовокОбращения;
		
		ТекстПисьма = ШаблонСообщения.ТекстПисьма;
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%ТекстОбращения%", КомментарийПоЗадаче);
		
		Возврат Новый Структура("ЗаголовокПисьма, ТекстПисьма",ЗаголовокПисьма, ТекстПисьма);
		
	ИначеЕсли ТипЗнч(Задача) = Тип("СправочникСсылка.Функции") Тогда
		
		ЗаголовокПисьма = ШаблонСообщения.ЗаголовокПисьма;
		
		ТекстПисьма = ШаблонСообщения.ТекстПисьма;
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%ТекстОбращения%", КомментарийПоЗадаче);
		
		Возврат Новый Структура("ЗаголовокПисьма, ТекстПисьма",ЗаголовокПисьма, ТекстПисьма);
		
	ИначеЕсли ТипЗнч(Задача) = Тип("ДокументСсылка.ИзменениеКонфигурации") Тогда
		
		ЗаголовокПисьма = ШаблонСообщения.ЗаголовокПисьма;
		ЗаголовокПисьма = СтрЗаменить(ЗаголовокПисьма, "%ИзменениеКонфигурации%", Задача);
		
		ТекстПисьма = ШаблонСообщения.ТекстПисьма;
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%ИзменениеКонфигурации%", Задача);
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%СсылкаНаИзменениеКонфигурации%", "#"+ПолучитьНавигационнуюСсылку(Задача));
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "АдресБазыНаВебСервере", Константы.АдресБазыНаВебСервере.Получить());
		
		Возврат Новый Структура("ЗаголовокПисьма, ТекстПисьма",ЗаголовокПисьма, ТекстПисьма);
		
	ИначеЕсли ТипЗнч(Задача) = Тип("СправочникСсылка.Файлы") Тогда
		
		ЗаголовокПисьма = ШаблонСообщения.ЗаголовокПисьма;
		ЗаголовокПисьма = СтрЗаменить(ЗаголовокПисьма, "%Функция%", Задача.Владелец.Наименование);
		
		ТекстПисьма = ШаблонСообщения.ТекстПисьма;
		
		ИмяФайла = ТИ.ПолучитьПолноеОписаниеФайла(Задача, Ложь);
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%Инструкция%", ИмяФайла);
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%СсылкаНаИнструкцию%", "#"+ПолучитьНавигационнуюСсылку(Задача));
		                                                                   
		Исполнитель = Пользователи.ТекущийПользователь();
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%Разработчик%", Исполнитель);
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%ТелефонРазработчика%", Исполнитель.ФизЛицо.Телефон);
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%АдресЭлектроннойПочтыРазработчика%", Исполнитель.ФизЛицо.АдресЭлектроннойПочты);
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "АдресБазыНаВебСервере", Константы.АдресБазыНаВебСервере.Получить());
		
		Возврат Новый Структура("ЗаголовокПисьма, ТекстПисьма",ЗаголовокПисьма, ТекстПисьма);
		
	ИначеЕсли ТипЗнч(Задача.Предмет) = Тип("ДокументСсылка.ИзменениеКонфигурации") Тогда
		
		Документ = Задача.Предмет;
		
		ЗаголовокПисьма = ШаблонСообщения.ЗаголовокПисьма;
		ТекстПисьма = ШаблонСообщения.ТекстПисьма;
		
		Если НЕ Проверяющий = Неопределено Тогда
			ЗаголовокПисьма = СтрЗаменить(ЗаголовокПисьма, "%Заказчик%", Проверяющий);
		КонецЕсли; 
			
		ЗаголовокПисьма = СтрЗаменить(ЗаголовокПисьма, "%ИзменениеКонфигурации%", Документ);
		
		Релиз = Задача.БизнесПроцесс.Релиз;
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%ПериодИзмененийНачало%", Формат(Релиз.ПериодИзмененийНачало, "ДФ=dd.MM.yyyy"));
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%ПериодИзмененийОкончание%", Формат(Релиз.ПериодИзмененийОкончание, "ДФ=dd.MM.yyyy"));
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%ПериодТестированияНачало%", Формат(Релиз.ПериодТестированияНачало, "ДФ=dd.MM.yyyy"));
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%ПериодТестированияОкончание%", Формат(Релиз.ПериодТестированияОкончание, "ДФ=dd.MM.yyyy"));
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%ПланируемаяДатаОбновленияРабочихБаз%", Формат(Релиз.ПланируемаяДатаОбновленияРабочихБаз, "ДФ=dd.MM.yyyy"));
		
		Если НЕ Проверяющий = Неопределено Тогда
			ТекстПисьма = СтрЗаменить(ТекстПисьма, "%Заказчик%", Проверяющий);
			ТекстПисьма = СтрЗаменить(ТекстПисьма, "%ТелефонЗаказчика%", Проверяющий.ФизЛицо.Телефон);
			ТекстПисьма = СтрЗаменить(ТекстПисьма, "%АдресЭлектроннойПочтыЗаказчика%", Проверяющий.ФизЛицо.АдресЭлектроннойПочты);
		КонецЕсли; 
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%ИзменениеКонфигурации%", Документ);
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%СсылкаНаИзменениеКонфигурации%", "#"+ПолучитьНавигационнуюСсылку(Документ));
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%Обращение%", Строка(Документ.ДокументОснование));
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%СсылкаНаОбращение%", "#"+ПолучитьНавигационнуюСсылку(Документ.ДокументОснование));
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%Комментарий%", КомментарийПоЗадаче);
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%Задача%", Задача.Наименование);
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%СсылкаНаЗадачу%", "#"+ПолучитьНавигационнуюСсылку(Задача));
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%Адрес1СУТ%", Константы.ХранилищеПараметровПочтовогоЯщика.Получить().Получить().АдресОтправителя);
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%НомерЗадачи%", Задача.Номер);
		
		ТекстСогласования = "ВНИМАНИЕ! В письмо должен быть вложен подписанный скан отчета о тестировании в формате pdf, jpeg или png.%0D%0DСогласовано.%0D%0D"+"Выполненные изменения протестированы и могут быть перенесены в рабочие базы.%0D%0D"
		+Документ+"%0D%0DСуть изменений: "+Документ.СутьИзменений+"%0D%0DОснование: "+Документ.ДокументОснование+"%0D%0DЕсли у вас есть замечания, вы можете написать их здесь:";
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%ТекстСогласования%", ТекстСогласования);
		
		//тестовые базы
		ТестовыеБазы = "";
		Если Документ.ЛюбаяБазаДляТестирования Тогда
			ТестовыеБазы = "любая база";
		Иначе
			СтрокиМассив = Документ.БазыТестирования.НайтиСтроки(Новый Структура("Использовать",Истина));
			Если СтрокиМассив.Количество() Тогда
				Для каждого СтрокаМассива Из СтрокиМассив Цикл
					ТестовыеБазы = ТестовыеБазы+СтрокаМассива.База.Наименование+"<BR>";
				КонецЦикла; 
			КонецЕсли; 
		КонецЕсли; 
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%ТестовыеБазы%", ТестовыеБазы);
		
		//функция и руководство пользователя
		ФункцияТекст = "";
		РуководствоПользователяТекст = "";
		Если ЗначениеЗаполнено(Документ.Функция) Тогда
			
			Аббревиатура = ПолучитьПолнуюАббревиатуруРекурсивно(Документ.Функция);
			
			ФункцияТекст = Документ.Функция.ПолныйКод+" "+Аббревиатура+" "+Документ.Функция.Наименование;
			
			Файл = ПолучитьФайлФункцииНаСервере(Документ.Функция, Перечисления.ТипыФайлов.ИнструкцияПользователя);
			Если НЕ Файл = Неопределено Тогда
				РуководствоПользователяТекст = ПолучитьПолноеОписаниеФайла(Файл, Ложь);
				ТекстПисьма = СтрЗаменить(ТекстПисьма, "%СсылкаНаРуководствоПользователя%", "#"+ПолучитьНавигационнуюСсылку(Файл));
			КонецЕсли;
		КонецЕсли; 
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%Функция%", ФункцияТекст);
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%РуководствоПользователя%", РуководствоПользователяТекст);
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "АдресБазыНаВебСервере", Константы.АдресБазыНаВебСервере.Получить());
				
		Возврат Новый Структура("ЗаголовокПисьма, ТекстПисьма",ЗаголовокПисьма, ТекстПисьма);
		
	ИначеЕсли ТипЗнч(Задача.Предмет) = Тип("ДокументСсылка.Обращение") 
		И ШаблонСообщения = Справочники.ШаблоныСообщений.УведомлениеПользователяОПроблеме Тогда
		
		ЗаголовокПисьма = ШаблонСообщения.ЗаголовокПисьма;
		ТекстПисьма = ШаблонСообщения.ТекстПисьма;
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%Обращение%", Строка(Задача.Предмет));
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%СсылкаНаОбращение%", "#"+ПолучитьНавигационнуюСсылку(Задача.Предмет));
		
		ПутьВнешнейОбработкиИБазы = "<P><STRONG>ВНИМАНИЕ!!! По техническим причинам не выгружены обработки: </STRONG>";
		ПутьВнешнейОбработкиИБазы = ПутьВнешнейОбработкиИБазы+"<P>----------------------------------------------------------------------------</P>";
		
		НевыгруженныеОбработкиТЗ = ТаблицаНевыгруженных.Скопировать(,"Обработка");
		НевыгруженныеОбработкиТЗ.Свернуть("Обработка");
		
		Для каждого СтрокаТаблицы Из НевыгруженныеОбработкиТЗ Цикл
			ВнешняяОбработка = СтрокаТаблицы.Обработка;
			Путь = "Сервис - Дополнительные внешние отчеты и обработки - ";
			Если ВнешняяОбработка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка Тогда
				ВидОбработки = "Внешняя обработка";
				Путь = Путь + "Обработки - " + Путь(ВнешняяОбработка, Строка(ВнешняяОбработка));
			ИначеЕсли ВнешняяОбработка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда
				ВидОбработки = "Внешний отчет";
				Путь = Путь + "Отчеты - " + Путь(ВнешняяОбработка, Строка(ВнешняяОбработка));
			ИначеЕсли ВнешняяОбработка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.ЗаполнениеТабличныхЧастей Тогда
				ВидОбработки = "Внешняя обработка заполнения табличных частей";
				Путь = ВнешняяОбработка.Наименование;
				Для каждого СтрокаПринадлежность Из ВнешняяОбработка.Принадлежность Цикл
					Путь = Путь + "<P>"+СтрокаПринадлежность.ПредставлениеОбъекта+", таб. часть: "+СтрокаПринадлежность.ТабличнаяЧастьПредставление+", кнопка: "+СтрокаПринадлежность.ПредставлениеКнопки+"</P>";
				КонецЦикла; 
			ИначеЕсли ВнешняяОбработка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма Тогда
				ВидОбработки = "Внешняя печатная форма";
				Путь = ВнешняяОбработка.Наименование;
				Для каждого СтрокаПринадлежность Из ВнешняяОбработка.Принадлежность Цикл
					Путь = Путь + "<P>"+СтрокаПринадлежность.ПредставлениеОбъекта+"; ";
				КонецЦикла;
				Путь = Путь + "</P>";
			КонецЕсли; 
			ПутьВнешнейОбработкиИБазы = ПутьВнешнейОбработкиИБазы+"<P><STRONG>"+ВидОбработки+":</STRONG> "+Путь+"</P>";
			
			Отбор = Новый Структура;
			Отбор.Вставить("Обработка", ВнешняяОбработка);
			
			МассивСтрокНевыгруженные = ТаблицаНевыгруженных.НайтиСтроки(Отбор);
			
			Если МассивСтрокНевыгруженные.Количество() Тогда
				//ПутьВнешнейОбработкиИБазы = ПутьВнешнейОбработкиИБазы+"<P><STRONG>ВНИМАНИЕ!!! Из-за технической проблемы не выполнена выгрузка в информационные базы: </STRONG>";
				ПутьВнешнейОбработкиИБазы = ПутьВнешнейОбработкиИБазы+"<P>Не выполнена выгрузка в информационные базы:<BR>";
				Для каждого СтрокаМассива Из МассивСтрокНевыгруженные Цикл
					ПутьВнешнейОбработкиИБазы = ПутьВнешнейОбработкиИБазы + СтрокаМассива.ИнформационнаяБаза.Наименование + ";<BR>";
				КонецЦикла; 
				ПутьВнешнейОбработкиИБазы = ПутьВнешнейОбработкиИБазы + "</P>";
				//ПутьВнешнейОбработкиИБазы = ПутьВнешнейОбработкиИБазы+"<P><STRONG>Информация о проблеме будет отправлена в службу поддержки. как только выгрузка будет выполнена, вам будет отправлено уведомление.</STRONG></P>";
			КонецЕсли;
			ПутьВнешнейОбработкиИБазы = ПутьВнешнейОбработкиИБазы+"<P>----------------------------------------------------------------------------</P>";
			
		КонецЦикла; 
		
		ПутьВнешнейОбработкиИБазы = ПутьВнешнейОбработкиИБазы+"<P><STRONG>В настоящий момент мы ведем работы по восстановлению работоспособности сервисов обмена.<BR>Ожидайте дополнительное уведомление о выгрузке.</STRONG></P>";
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%ПутьВнешнейОбработкиИБазы%", ПутьВнешнейОбработкиИБазы);
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "АдресБазыНаВебСервере", Константы.АдресБазыНаВебСервере.Получить());
		
		Возврат Новый Структура("ЗаголовокПисьма, ТекстПисьма",ЗаголовокПисьма, ТекстПисьма);
		
	ИначеЕсли ТипЗнч(Задача.Предмет) = Тип("ДокументСсылка.Обращение") 
		И ШаблонСообщения = Справочники.ШаблоныСообщений.УведомлениеОВыгрузке Тогда
		
		ЗаголовокПисьма = ШаблонСообщения.ЗаголовокПисьма;
		ТекстПисьма = ШаблонСообщения.ТекстПисьма;
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%Обращение%", Строка(Задача.Предмет));
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%СсылкаНаОбращение%", "#"+ПолучитьНавигационнуюСсылку(Задача.Предмет));
		
		ПутьВнешнейОбработкиИБазы = "<P>----------------------------------------------------------------------------</P>";
		
		ВыгруженныеОбработкиТЗ = ТаблицаВыгруженных.Скопировать(,"Обработка");
		НевыгруженныеОбработкиТЗ = ТаблицаНевыгруженных.Скопировать(,"Обработка");
		
		//объединим таблицы
		ТаблицаОбработок = ВыгруженныеОбработкиТЗ.Скопировать();
		Для каждого СтрокаТаблицы Из НевыгруженныеОбработкиТЗ Цикл
			НоваяСтрока = ТаблицаОбработок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЦикла; 
		ТаблицаОбработок.Свернуть("Обработка");
		
		Для каждого СтрокаТаблицыОбработок Из ТаблицаОбработок Цикл
			
			ВнешняяОбработка = СтрокаТаблицыОбработок.Обработка;
			
			Путь = "Сервис - Дополнительные внешние отчеты и обработки - ";
			Если ВнешняяОбработка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка Тогда
				ВидОбработки = "Внешняя обработка";
				Путь = Путь + "Обработки - " + Путь(ВнешняяОбработка, Строка(ВнешняяОбработка));
			ИначеЕсли ВнешняяОбработка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда
				ВидОбработки = "Внешний отчет";
				Путь = Путь + "Отчеты - " + Путь(ВнешняяОбработка, Строка(ВнешняяОбработка));
			ИначеЕсли ВнешняяОбработка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.ЗаполнениеТабличныхЧастей Тогда
				ВидОбработки = "Внешняя обработка заполнения табличных частей";
				Путь = ВнешняяОбработка.Наименование;
				Для каждого СтрокаПринадлежность Из ВнешняяОбработка.Принадлежность Цикл
					Путь = Путь + "<P>"+СтрокаПринадлежность.ПредставлениеОбъекта+", таб. часть: "+СтрокаПринадлежность.ТабличнаяЧастьПредставление+", кнопка: "+СтрокаПринадлежность.ПредставлениеКнопки+"</P>";
				КонецЦикла; 
			ИначеЕсли ВнешняяОбработка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма Тогда
				ВидОбработки = "Внешняя печатная форма";
				Путь = ВнешняяОбработка.Наименование;
				Для каждого СтрокаПринадлежность Из ВнешняяОбработка.Принадлежность Цикл
					Путь = Путь + "<P>"+СтрокаПринадлежность.ПредставлениеОбъекта+"; ";
				КонецЦикла;
				Путь = Путь + "</P>";
			КонецЕсли; 
			ПутьВнешнейОбработкиИБазы = ПутьВнешнейОбработкиИБазы+"<P><STRONG>"+ВидОбработки+":</STRONG> "+Путь+"</P>";
			
			Отбор = Новый Структура;
			Отбор.Вставить("Обработка", ВнешняяОбработка);
			
			МассивСтрокВыгруженные = ТаблицаВыгруженных.НайтиСтроки(Отбор);
			МассивСтрокНевыгруженные = ТаблицаНевыгруженных.НайтиСтроки(Отбор);
			
			Если МассивСтрокВыгруженные.Количество() Тогда
				ПутьВнешнейОбработкиИБазы = ПутьВнешнейОбработкиИБазы+"<P><STRONG>Размещено в базах: </STRONG></P>";
				Для н=0 по МассивСтрокВыгруженные.Количество()-1 Цикл
					ПутьВнешнейОбработкиИБазы = ПутьВнешнейОбработкиИБазы + ?(н=0,"","<BR>") + МассивСтрокВыгруженные[н].ИнформационнаяБаза.Наименование + "; ";
				КонецЦикла; 
			КонецЕсли;
			
			Если МассивСтрокНевыгруженные.Количество() Тогда
				ПутьВнешнейОбработкиИБазы = ПутьВнешнейОбработкиИБазы+"<P><STRONG>ВНИМАНИЕ !!! По техническим причинам не выполнена выгрузка в информационные базы: </STRONG><BR>";
				Для каждого СтрокаМассива Из МассивСтрокНевыгруженные Цикл
					ПутьВнешнейОбработкиИБазы = ПутьВнешнейОбработкиИБазы + СтрокаМассива.ИнформационнаяБаза.Наименование + ";<BR>";
				КонецЦикла; 
				ПутьВнешнейОбработкиИБазы = ПутьВнешнейОбработкиИБазы + "</P>";
				ПутьВнешнейОбработкиИБазы = ПутьВнешнейОбработкиИБазы+"<P><STRONG>В настоящий момент мы ведем работы по восстановлению работоспособности сервисов обмена.<BR>Ожидайте дополнительное уведомление о выгрузке.</STRONG></P>";
			КонецЕсли;
			ПутьВнешнейОбработкиИБазы = ПутьВнешнейОбработкиИБазы+"<P>----------------------------------------------------------------------------</P>";
			
		КонецЦикла; 
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%ПутьВнешнейОбработкиИБазы%", ПутьВнешнейОбработкиИБазы);
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "АдресБазыНаВебСервере", Константы.АдресБазыНаВебСервере.Получить());
		
		Возврат Новый Структура("ЗаголовокПисьма, ТекстПисьма",ЗаголовокПисьма, ТекстПисьма);
		
	ИначеЕсли ТипЗнч(Задача.Предмет) = Тип("ДокументСсылка.Обращение") Тогда
		
		ЗаголовокПисьма = ШаблонСообщения.ЗаголовокПисьма;
		ТекстПисьма = ШаблонСообщения.ТекстПисьма;
		
		Исполнитель = ?(Исполнитель = Неопределено, Задача.БизнесПроцесс.Исполнитель, Исполнитель);
		Проверяющий = ?(Проверяющий = Неопределено, Задача.БизнесПроцесс.Проверяющий, Проверяющий);
		
		ЗаголовокПисьма = СтрЗаменить(ЗаголовокПисьма, "%Заказчик%", Проверяющий);
		ЗаголовокПисьма = СтрЗаменить(ЗаголовокПисьма, "%Разработчик%", Исполнитель);
		ЗаголовокПисьма = СтрЗаменить(ЗаголовокПисьма, "%Отправитель%", Отправитель);
		ЗаголовокПисьма = СтрЗаменить(ЗаголовокПисьма, "%Обращение%", Строка(Задача.Предмет));
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%Задача%", Задача.Наименование);
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%СсылкаНаЗадачу%", "#"+ПолучитьНавигационнуюСсылку(Задача));
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%Обращение%", Строка(Задача.Предмет));
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%СсылкаНаОбращение%", "#"+ПолучитьНавигационнуюСсылку(Задача.Предмет));
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%Комментарий%", КомментарийПоЗадаче);
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%СрокТестирования%", Строка(Формат(Задача.СрокИсполнения,"ДФ=dd.MM.yyyy")));
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%Заказчик%", Проверяющий);
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%ТелефонЗаказчика%", Проверяющий.ФизЛицо.Телефон);
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%АдресЭлектроннойПочтыЗаказчика%", Проверяющий.ФизЛицо.АдресЭлектроннойПочты);
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%Разработчик%", Исполнитель);
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%ТелефонРазработчика%", Исполнитель.ФизЛицо.Телефон);
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%АдресЭлектроннойПочтыРазработчика%", Исполнитель.ФизЛицо.АдресЭлектроннойПочты);
		
		Если НЕ Отправитель = Неопределено Тогда
			ТекстПисьма = СтрЗаменить(ТекстПисьма, "%Отправитель%", Отправитель);
			ТекстПисьма = СтрЗаменить(ТекстПисьма, "%ТелефонОтправителя%", Отправитель.Телефон);
			ТекстПисьма = СтрЗаменить(ТекстПисьма, "%АдресЭлектроннойПочтыОтправителя%", Отправитель.АдресЭлектроннойПочты);
		КонецЕсли; 
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%Адрес1СУТ%", Константы.ХранилищеПараметровПочтовогоЯщика.Получить().Получить().АдресОтправителя);
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%НомерЗадачи%", Задача.Номер);
		
		ПутьВнешнейОбработкиИБазы = "<P>----------------------------------------------------------------------------</P>";
		СписокСогласуемыхОбъектов = "";
		Для каждого СтрокаВнешниеОтчетыИОбработки Из Задача.Предмет.ВнешниеОтчетыИОбработки Цикл
			
			ВнешняяОбработка = СтрокаВнешниеОтчетыИОбработки.ВнешняяОбработка;
			
			Путь = "Сервис - Дополнительные внешние отчеты и обработки - ";
			Если ВнешняяОбработка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка Тогда
				ВидОбработки = "Внешняя обработка";
				Путь = Путь + "Обработки - " + Путь(ВнешняяОбработка, Строка(ВнешняяОбработка));
			ИначеЕсли ВнешняяОбработка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет Тогда
				ВидОбработки = "Внешний отчет";
				Путь = Путь + "Отчеты - " + Путь(ВнешняяОбработка, Строка(ВнешняяОбработка));
			ИначеЕсли ВнешняяОбработка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.ЗаполнениеТабличныхЧастей Тогда
				ВидОбработки = "Внешняя обработка заполнения табличных частей";
				Путь = ВнешняяОбработка.Наименование;
				Для каждого СтрокаПринадлежность Из ВнешняяОбработка.Принадлежность Цикл
					Путь = Путь + "<P>"+СтрокаПринадлежность.ПредставлениеОбъекта+", таб. часть: "+СтрокаПринадлежность.ТабличнаяЧастьПредставление+", кнопка: "+СтрокаПринадлежность.ПредставлениеКнопки+"</P>";
				КонецЦикла; 
			ИначеЕсли ВнешняяОбработка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма Тогда
				ВидОбработки = "Внешняя печатная форма";
				Путь = ВнешняяОбработка.Наименование;
				Для каждого СтрокаПринадлежность Из ВнешняяОбработка.Принадлежность Цикл
					Путь = Путь + "<P>"+СтрокаПринадлежность.ПредставлениеОбъекта+"; ";
				КонецЦикла;
				Путь = Путь + "</P>";
			КонецЕсли; 
			ПутьВнешнейОбработкиИБазы = ПутьВнешнейОбработкиИБазы+"<P><STRONG>"+ВидОбработки+":</STRONG> "+Путь+"</P>";
			
			Если НЕ (ТаблицаВыгруженных = Неопределено И ТаблицаНевыгруженных = Неопределено) Тогда
				Отбор = Новый Структура;
				Отбор.Вставить("Обработка", ВнешняяОбработка);
				
				МассивСтрокВыгруженные = ТаблицаВыгруженных.НайтиСтроки(Отбор);
				МассивСтрокНевыгруженные = ТаблицаНевыгруженных.НайтиСтроки(Отбор);
				
				Если МассивСтрокВыгруженные.Количество() Тогда
					ПутьВнешнейОбработкиИБазы = ПутьВнешнейОбработкиИБазы+"<P><STRONG>Размещено в базах: </STRONG></P>";
					Для н=0 по МассивСтрокВыгруженные.Количество()-1 Цикл
						ПутьВнешнейОбработкиИБазы = ПутьВнешнейОбработкиИБазы + ?(н=0,"","<BR>") + МассивСтрокВыгруженные[н].ИнформационнаяБаза.Наименование + "; ";
					КонецЦикла; 
				КонецЕсли;
				
				Если МассивСтрокНевыгруженные.Количество() Тогда
					ПутьВнешнейОбработкиИБазы = ПутьВнешнейОбработкиИБазы+"<P><STRONG>ВНИМАНИЕ!!! По техническим причинам не выполнена выгрузка в информационные базы: </STRONG><BR>";
					Для каждого СтрокаМассива Из МассивСтрокНевыгруженные Цикл
						ПутьВнешнейОбработкиИБазы = ПутьВнешнейОбработкиИБазы + СтрокаМассива.ИнформационнаяБаза.Наименование + ";<BR>";
					КонецЦикла; 
					ПутьВнешнейОбработкиИБазы = ПутьВнешнейОбработкиИБазы + "</P>";
					ПутьВнешнейОбработкиИБазы = ПутьВнешнейОбработкиИБазы+"<P><STRONG>В настоящий момент мы ведем работы по восстановлению работоспособности сервисов обмена. Ожидайте дополнительное уведомление о выгрузке.</STRONG></P>";
				КонецЕсли;
				
				//какой-то исключительный случай
				Если НЕ МассивСтрокВыгруженные.Количество() И НЕ МассивСтрокНевыгруженные.Количество() Тогда
					ПутьВнешнейОбработкиИБазы = ПутьВнешнейОбработкиИБазы+"<P><STRONG>ВНИМАНИЕ!!! Обработка не попала в выгрузку. обратитесь в службу поддержки.</STRONG></P>";
				КонецЕсли; 
			КонецЕсли; 
			ПутьВнешнейОбработкиИБазы = ПутьВнешнейОбработкиИБазы+"<P>----------------------------------------------------------------------------</P>";
			
			СписокСогласуемыхОбъектов = СписокСогласуемыхОбъектов+ВидОбработки +": "+ВнешняяОбработка+"%0D";
		КонецЦикла;
		
		ТекстСогласования = "Согласовано.%0D%0D"+"Выполненные изменения протестированы и могут быть перенесены в рабочие базы.%0D%0D"
		+"Список согласуемых объектов:%0D"+СписокСогласуемыхОбъектов+"%0DОснование: "+Задача.Предмет+"%0D%0DЕсли у вас есть замечания, вы можете написать их здесь:";
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%ТекстСогласования%", ТекстСогласования);
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%ПутьВнешнейОбработкиИБазы%", ПутьВнешнейОбработкиИБазы);
		
		//функция и руководство пользователя
		ФункцияТекст = "";
		РуководствоПользователяТекст = "";
		Если ЗначениеЗаполнено(Задача.Предмет.Функция) Тогда
			
			Аббревиатура = ПолучитьПолнуюАббревиатуруРекурсивно(Задача.Предмет.Функция);
			
			ФункцияТекст = Задача.Предмет.Функция.ПолныйКод+" "+Аббревиатура+" "+Задача.Предмет.Функция.Наименование;
			
			Файл = ПолучитьФайлФункцииНаСервере(Задача.Предмет.Функция, Перечисления.ТипыФайлов.ИнструкцияПользователя);
			Если НЕ Файл = Неопределено Тогда
				РуководствоПользователяТекст = ПолучитьПолноеОписаниеФайла(Файл, Ложь);
				ТекстПисьма = СтрЗаменить(ТекстПисьма, "%СсылкаНаРуководствоПользователя%", "#"+ПолучитьНавигационнуюСсылку(Файл));
			КонецЕсли;
		КонецЕсли; 
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%Функция%", ФункцияТекст);
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%РуководствоПользователя%", РуководствоПользователяТекст);
		
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "АдресБазыНаВебСервере", Константы.АдресБазыНаВебСервере.Получить());
		
		Возврат Новый Структура("ЗаголовокПисьма, ТекстПисьма",ЗаголовокПисьма, ТекстПисьма);
		
	КонецЕсли; 

КонецФункции // СформироватьЗаголовокИТекстСообщения()

&НаСервере
Функция ПолучитьПолнуюАббревиатуруРекурсивно(ФункцияСсылка, Аббревиатура="")
	
	Аббревиатура = "["+ФункцияСсылка.Аббревиатура+"]"+Аббревиатура;
	
	Если ФункцияСсылка.Уровень() Тогда
		Аббревиатура = ПолучитьПолнуюАббревиатуруРекурсивно(ФункцияСсылка.Родитель, Аббревиатура);
	КонецЕсли; 
	
	Возврат Аббревиатура;
	
КонецФункции // ПолучитьПолнуюАббревиатуру(Функция)()
 
&НаСервере
Функция Путь(Обработка, СтрокаПуть)
	
	Если ЗначениеЗаполнено(Обработка.Родитель) Тогда
		СтрокаПуть = Строка(Обработка.Родитель) + " - " + СтрокаПуть;
		СтрокаПуть = Путь(Обработка.Родитель, СтрокаПуть);
	КонецЕсли;
	
	Возврат СтрокаПуть;

КонецФункции // ()

// Функция определяет доступное значение кода для заданного регистра сведений
//
// Параметры
//  ИмяРегистра – <Строка> 
//              – имя регистра сведений, для которого определяется
//                доступное значение кода
//
// Возвращаемое значение:
//   <Число>    – значение, которое может быть использовано для новой
//                записи регистра сведений в качестве кода
//
Функция ПолучитьНовыйКодДляРегистраСведений(ИмяРегистра, Условия = Неопределено) Экспорт

	Запрос = Новый Запрос;

	УсловиеЗапроса = "";
	Если Условия <> Неопределено Тогда
		Для Каждого ПараметрУсловия Из Условия Цикл
			
			Если ТипЗнч(ПараметрУсловия.Значение) = Тип("УникальныйИдентификатор") Тогда
			
				Запрос.УстановитьПараметр(ПараметрУсловия.Ключ, Строка(ПараметрУсловия.Значение));
			Иначе
				
				Запрос.УстановитьПараметр(ПараметрУсловия.Ключ, ПараметрУсловия.Значение);
			
			КонецЕсли;
			
			Если ТипЗнч(ПараметрУсловия.Значение) = Тип("УникальныйИдентификатор") Тогда
				
				Возврат 0;
				
			КонецЕсли;
			
			Если УсловиеЗапроса = "" Тогда
				УсловиеЗапроса = " ГДЕ Регистр." + ПараметрУсловия.Ключ + "=&" + ПараметрУсловия.Ключ;
			Иначе
				УсловиеЗапроса = " И Регистр." + ПараметрУсловия.Ключ + "=&" + ПараметрУсловия.Ключ;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(Максимум(Регистр.Код),0) КАК Код
	|ИЗ
	|	РегистрСведений." + ИмяРегистра + " КАК Регистр " + УсловиеЗапроса;

	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Код = 0;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Код = Выборка.Код;
	КонецЕсли;
		
	Возврат Код + 1;

КонецФункции // ПолучитьНовыйКодДляРегистраСведений()

Процедура СоздатьСообщение(Предмет = Неопределено, СообщениеСтруктура, Отправитель = Неопределено, Получатели, Копия = Неопределено, ИмяФайла = Неопределено, СсылкаНаДвоичныеДанныеФайла = Неопределено, СлепаяКопия = Неопределено) Экспорт 
	
	Если ТипЗнч(Получатели) = Тип("Строка") Тогда
		Получатель 	= Получатели;
		ПолучателиМассив = Новый Массив;
		ПолучателиМассив.Добавить(Получатели);
	Иначе
		Получатель 	= Получатели[0];
		ПолучателиМассив = Получатели;	
	КонецЕсли; 
	
	НаборЗаписей = РегистрыСведений.СообщенияИУведомления.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Предмет);
	
	КодЗаписи = ТИ.ПолучитьНовыйКодДляРегистраСведений("СообщенияИУведомления",Новый Структура("Документ", Предмет)); 
	Запись = НаборЗаписей.Добавить();
	
	Запись.Код	= КодЗаписи;
	Если НЕ Предмет = Неопределено Тогда
		Запись.Документ		= Предмет;
	КонецЕсли; 
	Запись.Заголовок 	= СообщениеСтруктура.ЗаголовокПисьма;
	Если НЕ Отправитель = Неопределено Тогда
		Запись.Отправитель 	= Отправитель;
	КонецЕсли; 
	Запись.Отправлено 	= Ложь;
	Запись.Получатель 	= Получатель;
	
	Запись.ТекстСообщения	= СообщениеСтруктура.ТекстПисьма;
	Запись.ДатаРегистрации = ТекущаяДата();
	Запись.Статус		= "Сообщение готово к отправлению";
	
	Если Копия <> Неопределено И Копия.Количество() Тогда
		Запись.Копия		= ЗначениеВСтрокуВнутр(Копия);
		КопияТекст = "";
		Для каждого КопияАдрес Из Копия Цикл
			КопияТекст = КопияТекст + КопияАдрес + ";";
		КонецЦикла; 
		Запись.КопияТекст	= КопияТекст;
	КонецЕсли;
	
	Если ТипЗнч(СлепаяКопия) = Тип("Строка") Тогда
		СлепаяКопияМассив = Новый Массив;
		СлепаяКопияМассив.Добавить(СлепаяКопия);
	ИначеЕсли ТипЗнч(СлепаяКопия) = Тип("Массив") Тогда
		СлепаяКопияМассив = СлепаяКопия;
	Иначе
		СлепаяКопияМассив = Неопределено;
	КонецЕсли; 

	Если НЕ СлепаяКопияМассив = Неопределено И СлепаяКопияМассив.Количество() Тогда
		Запись.СлепаяКопия		= ЗначениеВСтрокуВнутр(СлепаяКопияМассив);
		СлепаяКопияТекст = "";
		Для каждого СлепаяКопияАдрес Из СлепаяКопияМассив Цикл
			СлепаяКопияТекст = СлепаяКопияТекст + СлепаяКопияАдрес + ";";
		КонецЦикла; 
		Запись.СлепаяКопияТекст	= СлепаяКопияТекст;
	КонецЕсли;
	
	Вложения = Новый Массив;
	Если НЕ СсылкаНаДвоичныеДанныеФайла = Неопределено Тогда
		Вложение = Новый Структура;
		Если ТипЗнч(СсылкаНаДвоичныеДанныеФайла) = Тип("ИнтернетПочтовоеСообщение") Тогда
			Вложение.Вставить("Данные", СсылкаНаДвоичныеДанныеФайла);
			Вложение.Вставить("ИмяФайла", СсылкаНаДвоичныеДанныеФайла.ИдентификаторСообщения+".msg");
		ИначеЕсли ТипЗнч(СсылкаНаДвоичныеДанныеФайла) = Тип("Строка") Тогда	
			Вложение.Вставить("Данные", ПолучитьИзВременногоХранилища(СсылкаНаДвоичныеДанныеФайла));
			Вложение.Вставить("ИмяФайла", ИмяФайла);
		КонецЕсли; 
		Вложения.Добавить(Вложение);
		
	КонецЕсли; 
	СтруктураСообщения = Новый Структура("Вложения, Получатели", Вложения, ПолучателиМассив);
	Запись.Параметры = Новый ХранилищеЗначения(СтруктураСообщения, Новый СжатиеДанных(9));
	
	НаборЗаписей.Записать(ЛОЖЬ);
			
КонецПроцедуры

Функция СоздатьВложение(Документ) Экспорт
	
	Ответ = Новый Структура();
	
	Релиз = Документ.Релиз;
	
	ИмяФайла = "Отчет о тестировании изменений конфигурации 1С.xls";
	ПолноеИмяФайла = КаталогВременныхФайлов() + ИмяФайла;
	
	Попытка
		Excel = Новый COMОбъект("Excel.Application");
	Исключение
		ЗаписьЖурналаРегистрации("проблема при создании эксель");
		ЗаписьЖурналаРегистрации(""+ОписаниеОшибки());
		Ответ.Вставить("Отказ", Истина);
		Ответ.Вставить("ОписаниеОшибки", ОписаниеОшибки());
		Возврат Ответ;
	КонецПопытки;
	
	ПолучитьОбщийМакет("ОтчетОТестировании").Записать(ПолноеИмяФайла);

	ТекстИзменений = "";
	Для каждого СтрокаИзменений Из Документ.Изменения Цикл
		ТекстИзменений = ТекстИзменений+СтрокаИзменений.ГруппаМетаданных.Наименование+" "+СтрокаИзменений.ОбъектМетаданных.Наименование+"; ";
	КонецЦикла;
	
	ИмяКонфигурации = "";
	Если Релиз.Владелец = Справочники.Конфигурации.KT2000_Alcohol_Mnfc Тогда
		ИмяКонфигурации = "УПП";
	ИначеЕсли Релиз.Владелец = Справочники.Конфигурации.ЗарплатаИУправлениеПерсоналом Тогда
		ИмяКонфигурации = "ЗУП";
	КонецЕсли; 
	
	Workbook = Excel.Workbooks.Open(ПолноеИмяФайла);
	Лист = Workbook.Worksheets(1);
	Лист.Cells(2,1).Value = Лист.Cells(2,1).Value + ИмяКонфигурации;
	Лист.Cells(3,2).Value = Строка(Релиз.Наименование);
	Лист.Cells(4,2).Value = Строка(Формат(Релиз.ДатаРелиза,"ДФ=dd.MM.yyyy"));
	
	Базы = "";
	Если Документ.ЛюбаяБазаДляТестирования Тогда
		Базы = "Тестирование допускается в любой базе";
	Иначе
		МассивСтрок = Документ.БазыТестирования.НайтиСтроки(Новый Структура("Использовать", Истина));
		Для Индекс = 0 По МассивСтрок.ВГраница() Цикл
			Базы = Базы+МассивСтрок[Индекс].База+?(Индекс = МассивСтрок.ВГраница(),"","; ");
		КонецЦикла; 
	КонецЕсли;
	
	Лист.Cells(5,1).Value = Лист.Cells(5,1).Value + Базы;
	
	Лист.Cells(8,1).Value = Строка(Документ.Заказчик);
	Лист.Cells(8,2).Value = Строка(Документ.ДокументОснование.Номер);
	Лист.Cells(8,3).Value = Строка(Документ.ОписаниеИзменений);
	Лист.Cells(8,4).Value = Строка(Документ.СценарийТестирования);
	Лист.Cells(8,8).Value = ТекстИзменений;
	Лист.Cells(8,9).Value = Строка(Документ.Исполнитель);
	Excel.DisplayAlerts = False;
	//Workbook.Worksheets(1).Protect("Admin1c");
	//Workbook.Protect("Admin1c");
	Workbook.Save();
	Workbook.Close();							
	Excel.Application.Quit();
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
	СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
	УдалитьФайлы(ПолноеИмяФайла);
	
	Ответ.Вставить("Отказ", Ложь);
	Ответ.Вставить("ОписаниеОшибки", "");
	Ответ.Вставить("Адрес", СсылкаНаДвоичныеДанныеФайла);
	Ответ.Вставить("ИмяФайла", ИмяФайла);
	
	Возврат Ответ;
	
КонецФункции

// Функция для повторного отправления сообщений
&НаСервере 
Функция ПовторноеОтправлениеСообщений(Сообщение, СписокПолучателей = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ *
	               |ИЗ
	               |	РегистрСведений.СообщенияИУведомления КАК СообщенияИУведомления
	               |ГДЕ
	               |	СообщенияИУведомления.Документ = &Документ
	               |	И СообщенияИУведомления.Код = &Код";
				   
	Запрос.УстановитьПараметр("Документ",Сообщение.Документ);
	Запрос.УстановитьПараметр("Код",Сообщение.Код);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Получатель = Выборка.Получатель;
		Параметры = выборка.Параметры;
		
		Если СписокПолучателей <> Неопределено Тогда			
			
			МассивПолучателей = СписокПолучателей.ВыгрузитьЗначения();
			
			Если МассивПолучателей.Количество() = 0 Тогда
				
				Возврат("Сообщение по документу " + Строка(Выборка.Документ) + ", Код = " + Строка(Выборка.Код) + " не удалось отправить повторно")
				
			КонецЕсли;
			
			Параметры = Выборка.Параметры.Получить();
			Параметры.Получатели = МассивПолучателей;
			Параметры = Новый ХранилищеЗначения(Параметры);
			Если МассивПолучателей.Найти(Выборка.Получатель) = Неопределено Тогда
				
				Получатель = МассивПолучателей[0];
				
			Иначе
				
				Получатель = Выборка.Получатель;
				
			КонецЕсли;			
			
		КонецЕсли;
		
		Если Выборка.Отправлено = Ложь Тогда
			
			Возврат("Сообщение по документу " + Строка(Выборка.Документ) + ", Код = " + Строка(Выборка.Код) + " не удалось отправить, так как неотправленные сообщения отправлять повторно запрещено");
			
		Иначе
			
			ЗапросДляКода = Новый Запрос;
			ЗапросДляКода.Текст = "ВЫБРАТЬ
			               |	МАКСИМУМ(СообщенияИУведомления.Код) КАК МаксимумКод
			               |ИЗ
			               |	РегистрСведений.СообщенияИУведомления КАК СообщенияИУведомления
			               |ГДЕ
			               |	СообщенияИУведомления.Документ = &Документ";
						   
			ЗапросДляКода.УстановитьПараметр("Документ",Сообщение.Документ);
			ВыборкаКода = ЗапросДляКода.Выполнить().Выбрать();
			Код = 0;
			Пока  ВыборкаКода.Следующий() Цикл
				Код = ВыборкаКода.МаксимумКод;
			КонецЦикла;

			НаборЗаписей = РегистрыСведений.СообщенияИУведомления.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ);
			НаборЗаписей.Прочитать();
						
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ДатаРегистрации = ТекущаяДата();
			НоваяЗапись.Документ        = Выборка.Документ;
			НоваяЗапись.Код             = Код + 1;
			НоваяЗапись.Отправлено      = Ложь;
			НоваяЗапись.Получатель      = Получатель;
			НоваяЗапись.Отправитель     = Выборка.Отправитель;
			НоваяЗапись.Заголовок       = Выборка.Заголовок;
			НоваяЗапись.ТекстСообщения	= Выборка.ТекстСообщения;
			НоваяЗапись.Копия			= Выборка.Копия;
			НоваяЗапись.КопияТекст		= Выборка.КопияТекст;
			НоваяЗапись.Параметры       = Параметры;
			НоваяЗапись.Статус          = "";
			НоваяЗапись.НаличиеПрикрепленныхФайлов = Выборка.НаличиеПрикрепленныхФайлов;
			
			Попытка 
				
				НаборЗаписей.Записать();
				Возврат("Сообщение отправлено");
				
			Исключение
				            
				Возврат("Сообщение по документу " + Строка(Выборка.Документ) + ", Код = " + Строка(Выборка.Код) + " не удалось отправить повторно");
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;

КонецФункции

//позволяет выбрать из списка с пометками нужные адреса
Функция ПолучитьСписокОтобранныйПользователем(СписокПолучателей,НомерПисьма)Экспорт

	СписокПолучателей.ЗаполнитьПометки(Истина);
	
	Текст = "Выберите получателей для письма с номером: " + НомерПисьма;
	Если ПустаяСтрока(НомерПисьма) Тогда
		
		Текст = "Выберите получателей для письма";
		
	КонецЕсли;
	
	Если СписокПолучателей.ОтметитьЭлементы(Текст) Тогда
		
		СписокВозвр = Новый СписокЗначений;
		Для каждого Стр Из СписокПолучателей Цикл
			
			Если Стр.Пометка Тогда
				
				СписокВозвр.Добавить(Стр.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат СписокВозвр;
		
	Иначе
		
		Возврат Новый СписокЗначений;
		
	КонецЕсли;

КонецФункции // ПолучитьСписокОтобранныйПользователем(СписокПолучателей)

Процедура ОтправкаИПолучениеСообщений() Экспорт

	ПолучениеСообщений();
	
	ОтправкаСообщений();
	
КонецПроцедуры

Процедура ОтправкаСообщений() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СообщенияИУведомления.Документ,
		|	СообщенияИУведомления.Код,
		|	СообщенияИУведомления.Получатель,
		|	СообщенияИУведомления.Отправитель,
		|	СообщенияИУведомления.Заголовок,
		|	СообщенияИУведомления.ТекстСообщения,
		|	СообщенияИУведомления.Копия,
		|	СообщенияИУведомления.СлепаяКопия,
		|	СообщенияИУведомления.Параметры
		|ИЗ
		|	РегистрСведений.СообщенияИУведомления КАК СообщенияИУведомления
		|ГДЕ
		|	СообщенияИУведомления.Отправлено = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Ошибка = "";
		Копия = Неопределено;
		Если НЕ Выборка.Копия = "" Тогда
			Копия = ЗначениеИзСтрокиВнутр(Выборка.Копия)
		КонецЕсли; 
		
		СлепаяКопия = Неопределено;
		Если НЕ Выборка.СлепаяКопия = "" Тогда
			СлепаяКопия = ЗначениеИзСтрокиВнутр(Выборка.СлепаяКопия)
		КонецЕсли; 
		
		СтруктураПараметров = Выборка.Параметры.Получить();
		Вложения = Неопределено;
		Если НЕ СтруктураПараметров = Неопределено Тогда
			Вложения = СтруктураПараметров.Вложения;
		КонецЕсли; 
		
		Если Выборка.Отправитель = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
			АдресОтправителя = Неопределено;
		Иначе
			АдресОтправителя = Выборка.Отправитель.АдресЭлектроннойПочты;
		КонецЕсли; 
		
		ОтправитьПочтовоеСообщение(Выборка.Получатель, Выборка.Заголовок, Выборка.ТекстСообщения, АдресОтправителя, Копия, СлепаяКопия, Ошибка, Вложения);
		
		Если Ошибка = "" Тогда 
			Статус = "Сообщение отправлено";
			Отправлено = Истина;
			ДатаОтправки = ТекущаяДата();
		Иначе
			Статус = "Ошибка отправки сообщения. "+Ошибка;
			Отправлено = Ложь;
			ДатаОтправки = Дата('00010101');
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.СообщенияИУведомления.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Код.Установить( Выборка.Код);
		НаборЗаписей.Отбор.Документ.Установить( Выборка.Документ);
			
		НаборЗаписей.Прочитать();
			
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей[0].Отправлено 		= Отправлено;
			НаборЗаписей[0].Статус 	   		= Статус;
			НаборЗаписей[0].ДатаОтправки	= ДатаОтправки;
			НаборЗаписей.Записать();
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ПолучениеСообщений() Экспорт
	
	Статус = Новый Структура;
	Статус.Вставить("КодОшибки", "");								

	ПочтовыйПрофиль = СоздатьПочтовыйПрофиль();
	Если ПочтовыйПрофиль = Неопределено Тогда
		ЗаписьЖурналаРегистрации("Попытка получения сообщений",,,,"Не удалось создать почтовый профиль.");
		Возврат;
	КонецЕсли;
	
	Почта = Новый ИнтернетПочта;
	Попытка
		Почта.Подключиться(ПочтовыйПрофиль);
	Исключение
		Статус.КодОшибки = "Ошибка при подключении к почтовому профилю! " + ОписаниеОшибки();
	КонецПопытки;
	
	Если ПустаяСтрока(Статус.КодОшибки) Тогда
		Статус = ЗагрузитьСообщенияЧерезСервер(Почта);
	КонецЕсли;
	
	// разрыв соединения с сервером
	Почта.Отключиться();										

КонецПроцедуры

// Функция получения соединения с сервером и создание почтового профиля.
//
// Параметры:
//    Нет.
//
// Возвращаемое значение:
//    Полученные почтовый профиль. Тип: ИнтернетПочтовыйПрофиль.
Функция СоздатьПочтовыйПрофиль() Экспорт  
	
	// определяем адреса SMTP и POP3 сервера
	СтруктураПараметров = Константы.ХранилищеПараметровПочтовогоЯщика.Получить().Получить();
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		АдресОтправителя = СтруктураПараметров.АдресОтправителя;
		ИмяОтправителя = СтруктураПараметров.ИмяОтправителя;
		АдресSMTP = СтруктураПараметров.АдресSMTP;
		ПользовательSMTP = СтруктураПараметров.ПользовательSMTP;
		ПарольSMTP = СтруктураПараметров.ПарольSMTP;
		АдресPOP3 = СтруктураПараметров.АдресPOP3;
		ПользовательPOP3 = СтруктураПараметров.ПользовательPOP3;
		ПарольPOP3 = СтруктураПараметров.ПарольPOP3;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
	// устанавливаем адрес SMPT
	Разделитель = Найти(АдресSMTP, ":");
	Если Разделитель > 0 Тогда
		АдресSMTP = Лев(АдресSMTP,Разделитель-1); 
		Попытка 
			ПортSMTP = Число(Сред(АдресSMTP,Разделитель+1));
		Исключение
			ПортSMTP = 25;
		КонецПопытки;
	Иначе
		АдресSMTP = АдресSMTP;
		ПортSMTP = 25;
	КонецЕсли;
	
	// устанавливаем адрес POP3
	Разделитель = Найти(АдресPOP3, ":");
	Если Разделитель > 0 Тогда
		АдресPOP3 = Лев(АдресPOP3,Разделитель-1); 
		Попытка 
			ПортPOP3 = Число(Сред(АдресPOP3,Разделитель+1));
		Исключение
			ПортPOP3 = 110;
		КонецПопытки;
	Иначе
		АдресPOP3 = АдресPOP3;
		ПортPOP3 = 110;
	КонецЕсли;
	
	
	ПочтовыйПрофиль = Новый ИнтернетПочтовыйПрофиль;
	
	Если ЗначениеЗаполнено(АдресSMTP) Тогда
		ПочтовыйПрофиль.АдресСервераSMTP = АдресSMTP;
		ПочтовыйПрофиль.ПортSMTP		 = Число(ПортSMTP);
		Если ЗначениеЗаполнено(ПользовательSMTP) Тогда
			ПочтовыйПрофиль.ПользовательSMTP = ПользовательSMTP;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПарольSMTP) Тогда
			ПочтовыйПрофиль.ПарольSMTP		 = ПарольSMTP;
		КонецЕсли;
		ПочтовыйПрофиль.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
		//SMTPАутентификации = СпособSMTPАвторизации;
		//Если ЗначениеЗаполнено(SMTPАутентификации) Тогда
		//	ПочтовыйПрофиль.АутентификацияSMTP  = СпособSMTPАутентификации[SMTPАутентификации];
		//КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресPOP3) Тогда
		ПочтовыйПрофиль.АдресСервераPOP3 = АдресPOP3;
		ПочтовыйПрофиль.ПортPOP3		 = Число(ПортPOP3);
		ПочтовыйПрофиль.Пользователь	 = ПользовательPOP3;
		ПочтовыйПрофиль.Пароль			 = ПарольPOP3;
		//POP3Аутентификации 		         = СпособPOP3Авторизации;
		//Если ЗначениеЗаполнено(POP3Аутентификации) Тогда
		//	ПочтовыйПрофиль.АутентификацияPOP3   = СпособPOP3Аутентификации[POP3Аутентификации];
		//КонецЕсли;
	КонецЕсли;
		
	Возврат ПочтовыйПрофиль;
	
КонецФункции

Функция ЗагрузитьСообщенияЧерезСервер(Почта)

	Статус = Новый Структура;
	
	Статус.Вставить("КодОшибки", "");
	
	НужноДелатьВыборкуПочты = Ложь;
	
	МассивЗаголовковИлиИдентификаторов = Новый Массив;
	
	// получаем заголовки сообщений
	МассивЗаголовковИлиИдентификаторов	= Почта.ПолучитьЗаголовки();
	
	// проверяем сообщения пользователей
	// если пользователь не найден, тогда ничего не делаем
	КоличествоЗаголовков = МассивЗаголовковИлиИдентификаторов.Количество();
	
	Инд = КоличествоЗаголовков;
	Пока Инд > 0 Цикл
		Инд = Инд - 1;	
	КонецЦикла;
	
	Если МассивЗаголовковИлиИдентификаторов.Количество() > 0 Тогда
		
		НужноДелатьВыборкуПочты = Истина;
		
	КонецЕсли;
	
	ПолученныеСообщения	= Неопределено;
	// получаем письма (если есть)
	Если НужноДелатьВыборкуПочты Тогда
		
		// после получения сообщения не удаляются  
		ПолученныеСообщения	= Почта.Выбрать(Ложь, МассивЗаголовковИлиИдентификаторов);
		
		// обрабатываем сообщения
		Инд = ПолученныеСообщения.ВГраница();
		
		МассивДляУдаления = Новый Массив;
		
		Пока  Инд>=0 Цикл
			
			ПолученноеСообщение = ПолученныеСообщения[Инд];
			
			СтруктураСообщения = Разбор(ПолученноеСообщение);
			
			Если ЗначениеЗаполнено(СтруктураСообщения) Тогда
				
				МассивДляУдаления.Добавить(ПолученноеСообщение);
				
				Задача = Задачи.ЗадачаИсполнителя.ПустаяСсылка();
				
				Согласовано = Ложь;
				Замечания = "";
				
				Если Найти(СтруктураСообщения.Тема, "#addtolist")
					ИЛИ Найти(СтруктураСообщения.Тема, "#removefromlist") Тогда 
					
					ОбработатьСписокРассылки(СтруктураСообщения, ПолученноеСообщение);
					
				ИначеЕсли Найти(СтруктураСообщения.Тема, "Confirm")
						ИЛИ	Найти(СтруктураСообщения.Тема, "Reject") Тогда
					
					Если ПроверкаСообщения(СтруктураСообщения, ПолученноеСообщение, Задача, Согласовано, Замечания) Тогда
						Инд	= Инд -1;
						Продолжить; // если проверка не пройдена не будем сохранять отчет о тестировании
					КонецЕсли;
					
					Попытка
						НачатьТранзакцию();
						
						ВыполнитьЗадачу(Задача, Согласовано, Замечания);
						СохранитьОтчетОТестировании(Задача, ПолученноеСообщение, Согласовано);
						
						Если ТипЗнч(Задача.Предмет) = Тип("ДокументСсылка.ИзменениеКонфигурации") Тогда
							СохранитьОтчетОТестировании(Задача, ПолученныеСообщения[Инд].Вложения[0], Согласовано);
						КонецЕсли;
						
						ЗафиксироватьТранзакцию();
					Исключение
						ЗаписьЖурналаРегистрации("Обработка писем",,,,ОписаниеОшибки());
						ПолученныеСообщения.Удалить(Инд);
						//					Инфор = ИнформацияОбОшибке();
						
						ОтменитьТранзакцию();
						
						//ОбщийМодульСервер.омСообщить(ОписаниеОшибки());
					КонецПопытки;
					
				Иначе
					
					ПричинаОтклонения = "Тема письма не содержит правильных директив. Данное письмо создано автоматически. Пожалуйста, не отвечайте на него. Если вам требуется помощь, переадресуйте его на HelpDesk.";
					
					ШаблонСообщения = Справочники.ШаблоныСообщений.ОтветНаНекорректноеСообщение;
					ЗаголовокПисьма = ШаблонСообщения.ЗаголовокПисьма;
					ЗаголовокПисьма = СтрЗаменить(ЗаголовокПисьма, "%Тема%", СтруктураСообщения.Тема);
					ТекстПисьма = ШаблонСообщения.ТекстПисьма;
					ТекстПисьма = СтрЗаменить(ТекстПисьма, "%ПричинаОтклонения%", ПричинаОтклонения);
					СоздатьСообщение(, Новый Структура("ЗаголовокПисьма, ТекстПисьма", ЗаголовокПисьма, ТекстПисьма), ,СтруктураСообщения.Отправитель, , , ПолученноеСообщение);
					
				КонецЕсли; 
				
			Иначе
				ПолученныеСообщения.Удалить(Инд);
			КонецЕсли;
			Инд	= Инд -1;
			
			
		КонецЦикла;
		// удаляем уже загруженные сообщения
		Почта.УдалитьСообщения(МассивДляУдаления);
		
	КонецЕсли;
	
	Возврат Статус;

КонецФункции // ЗагрузитьСообщенияЧерезСервер()

Процедура ОбработатьСписокРассылки(СтруктураСообщения, ПолученноеСообщение)

	СписокРассылки = ХранилищеОбщихНастроек.Загрузить("СписокРассылкиРелизы",,,"Робот");
	
	Элемент = Неопределено;
	
	Если НЕ СписокРассылки = Неопределено Тогда
		
		Элемент = СписокРассылки.НайтиПоЗначению(СтруктураСообщения.Отправитель);
		
	Иначе
		
		СписокРассылки = Новый СписокЗначений;
		
	КонецЕсли; 
	
	СохранятьСписок = Ложь;
	
	Если Найти(СтруктураСообщения.Тема, "#addtolist") Тогда
		
		Если Элемент = Неопределено Тогда
			
			СписокРассылки.Добавить(СтруктураСообщения.Отправитель);
			
			СохранятьСписок = Истина;
			
			ТекстУведомления = "Вы подписались на рассылку об изменениях релиза.";
			
		Иначе
			
			ТекстУведомления = "Вы уже подписаны на рассылку об изменениях релиза.";
			
		КонецЕсли; 
		
	ИначеЕсли Найти(СтруктураСообщения.Тема, "#removefromlist") Тогда 	
		
		Если Элемент = Неопределено Тогда
			
			ТекстУведомления = "Вы уже отписаны от рассылки об изменениях релиза.";
			
		Иначе
			
			СписокРассылки.Удалить(Элемент);
			
			СохранятьСписок = Истина;
			
			ТекстУведомления = "Вы отписались от рассылки об изменениях релиза.";
			
		КонецЕсли; 
		
	КонецЕсли;
	
	ШаблонСообщения = Справочники.ШаблоныСообщений.УведомлениеОПодпискеНаРассылкуОбИзмененияхРелизов;
	ЗаголовокПисьма = ШаблонСообщения.ЗаголовокПисьма;
	ТекстПисьма = ШаблонСообщения.ТекстПисьма;
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "%ТекстСообщения%", ТекстУведомления);
	СоздатьСообщение(, Новый Структура("ЗаголовокПисьма, ТекстПисьма", ЗаголовокПисьма, ТекстПисьма), ,СтруктураСообщения.Отправитель, , , ПолученноеСообщение);
					
	Если СохранятьСписок Тогда
	
		ХранилищеОбщихНастроек.Сохранить("СписокРассылкиРелизы",,СписокРассылки,,"Робот");
	
	КонецЕсли; 

КонецПроцедуры

Процедура СохранитьОтчетОТестировании(Задача, ПолученноеСообщение, Согласовано)

	Если ТипЗнч(ПолученноеСообщение) = Тип("ИнтернетПочтовоеСообщение") Тогда
		Данные = ПолученноеСообщение;
		ИмяФайла = ПолученноеСообщение.ИдентификаторСообщения+".msg";
		ТипОтчета = "Почтовое сообщение";
	Иначе	
		Данные = ПолученноеСообщение.Данные;
		ИмяФайла = ПолученноеСообщение.Имя;
		ТипОтчета = "Файл";
	КонецЕсли;
	
	ЗаписатьФайлОтчетаОТестированииВИнформационнуюБазу(Задача, , Данные, ИмяФайла, ТипОтчета, Согласовано);
	
КонецПроцедуры

Процедура ЗаписатьФайлОтчетаОТестированииВИнформационнуюБазу(Задача, Адрес = "", Данные = Неопределено, ИмяФайла, ТипОтчета, Согласовано) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Адрес) Тогда
		Данные = ПолучитьИзВременногоХранилища(Адрес);
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ОтчетыОТестировании.СоздатьМенеджерЗаписи();
	Если Согласовано Тогда
		МенеджерЗаписи.РезультатСогласования = "Согласовано";
	Иначе
		МенеджерЗаписи.РезультатСогласования = "Не согласовано";
	КонецЕсли;
	МенеджерЗаписи.ТипОтчета = ТипОтчета;
	МенеджерЗаписи.Задача = Задача;
	МенеджерЗаписи.ДокументТестирования = Задача.Предмет;
	МенеджерЗаписи.ХранимыйФайл = Новый ХранилищеЗначения(Данные, Новый СжатиеДанных(9));
	МенеджерЗаписи.Имя = ИмяФайла;
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

Процедура ВыполнитьДействияПриПередачеНаТестирование(Задача) Экспорт
	
	ИзменитьСтатусОбращения(0, Задача);
	ДобавитьИнформациюВПоследнююВерсиюОбработок(Задача.Предмет, "Передано на тестирование");
	
КонецПроцедуры
 
Процедура ВыполнитьДействияПриВозвратеНаДоработку(Задача) Экспорт 
	
	ИзменитьСтатусОбращения(1, Задача);
	ДобавитьИнформациюВПоследнююВерсиюОбработок(Задача.Предмет, "Возвращено на доработку");
	
КонецПроцедуры

Процедура ВыполнитьДействияПриОтменеОбращения(Задача) Экспорт 
	
	ИзменитьСтатусОбращения(2, Задача);
	Если Задача.БизнесПроцесс.НаПроверке Тогда
		СформироватьИОтправитьУведомление(Задача, Справочники.ШаблоныСообщений.ОтклонениеОбращения, 
			Задача.БизнесПроцесс.Проверяющий.ФизЛицо.АдресЭлектроннойПочты, Задача.РезультатВыполнения);		
	КонецЕсли;
	ОткатитьХранилищеВнешнейОбработкиДоТекущейВерсии(Задача.Предмет);
	ДобавитьИнформациюВПоследнююВерсиюОбработок(Задача.Предмет, "Отменено");
	
КонецПроцедуры

Процедура ВыполнитьДействияПриУспешномСогласовании(Задача) Экспорт 
	
	ИзменитьСтатусОбращения(3, Задача);
	ЗарегистрироватьИзменение(Задача, Перечисления.ВидыОперацийПоТестированию.УспешноеСогласование);
	ДобавитьИнформациюВПоследнююВерсиюОбработок(Задача.Предмет, "Протестировано");
	ОбновитьТекущиеВерсииВнешнихОбработок(Задача.Предмет);
	
КонецПроцедуры

Процедура ВыполнитьЗадачу(Задача, Согласовано, Описание)
	
	Если Задача.Выполнена Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТипЗнч(Задача.Предмет) = Тип("ДокументСсылка.Обращение") 
		И Задача.БизнесПроцесс.НаПроверке 
		И Задача.Операция = Перечисления.ВидыОперацийПоТестированию.ПередачаНаТестирование Тогда
		
		ВыполнитьДействияПоЗадаче(Задача, Согласовано, Описание, "Проверить");
		Если Согласовано Тогда
			ВыполнитьДействияПриУспешномСогласовании(Задача);
		Иначе
			ВыполнитьДействияПриВозвратеНаДоработку(Задача);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Задача.Предмет) = Тип("ДокументСсылка.ИзменениеКонфигурации") 
		ИЛИ (ТипЗнч(Задача.Предмет) = Тип("ДокументСсылка.Обращение") 
		И НЕ Задача.БизнесПроцесс.НаПроверке) Тогда
		
		ВыполнитьДействияПоЗадаче(Задача, Согласовано, Описание, "Выполнить");
		
		Если Согласовано Тогда
			Если ТипЗнч(Задача.Предмет) = Тип("ДокументСсылка.Обращение") Тогда
				ВыполнитьДействияПриУспешномСогласовании(Задача);
			ИначеЕсли ТипЗнч(Задача.Предмет) = Тип("ДокументСсылка.ИзменениеКонфигурации") Тогда
				
				ТИ.ИзменитьСтатусИзмененияКонфигурации(2, Задача.Предмет);
				
				СообщениеСтруктура = ТИ.СформироватьЗаголовокИТекстСообщения(Задача, 
				Справочники.ШаблоныСообщений.СогласованиеИзменения, Задача.РезультатВыполнения,,Задача.Автор, Задача.Исполнитель);
				
				ПараметрыОтправки = ПодготовитьПараметрыОтправки(Задача);
				
				ТИ.СоздатьСообщение(Задача.Предмет, СообщениеСтруктура, ПараметрыОтправки.Отправитель, 
				ПараметрыОтправки.АдресПолучателя, ПараметрыОтправки.Копия);
				
			КонецЕсли; 
		Иначе
			
			Если (ТипЗнч(Задача.Предмет) = Тип("ДокументСсылка.Обращение")) Тогда
				ВыполнитьДействияПриОтменеОбращения(Задача)
			ИначеЕсли (ТипЗнч(Задача.Предмет) = Тип("ДокументСсылка.ИзменениеКонфигурации")) Тогда
				ТИ.ИзменитьСтатусИзмененияКонфигурации(3, Задача.Предмет);
				
				СообщениеСтруктура = ТИ.СформироватьЗаголовокИТекстСообщения(Задача, 
				Справочники.ШаблоныСообщений.ОтклонениеИзменения, Задача.РезультатВыполнения,,Задача.Автор, Задача.Исполнитель);
				
				ПараметрыОтправки = ПодготовитьПараметрыОтправки(Задача);
				
				ТИ.СоздатьСообщение(Задача.Предмет, СообщениеСтруктура, ПараметрыОтправки.Отправитель, 
				ПараметрыОтправки.АдресПолучателя, ПараметрыОтправки.Копия);
				
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Функция ПодготовитьПараметрыОтправки(Задача)

	ПараметрыОтправки = Новый Структура;
	
	ПараметрыОтправки.Вставить("Отправитель", Задача.Исполнитель.ФизЛицо);
	
	ПараметрыОтправки.Вставить("АдресПолучателя", Задача.Автор.ФизЛицо.АдресЭлектроннойПочты);
	
	Копия = Новый Массив;
	Если ЗначениеЗаполнено(Задача.РезультатВыполнения) Тогда
		Копия.Добавить(Константы.АдминистраторСистемы.Получить().АдресЭлектроннойПочты);
	КонецЕсли;
	
	Если Задача.Предмет.ДокументОснование.Инициатор <> Задача.Предмет.Заказчик Тогда
		Копия.Добавить(Задача.Предмет.ДокументОснование.Инициатор.ФизЛицо.АдресЭлектроннойПочты);
	КонецЕсли; 
	ПараметрыОтправки.Вставить("Копия", Копия);
	
	Возврат ПараметрыОтправки;

КонецФункции // ()

Процедура ВыполнитьДействияПоЗадаче(Задача, Согласовано, Описание, ФормаЗадачи)

	ЗаданиеОбъект = Задача.БизнесПроцесс.ПолучитьОбъект();
	ЗаданиеОбъект.Выполнено = Согласовано;
	ЗаданиеОбъект.Подтверждено = Согласовано;
	ЗаданиеОбъект.Записать();
	
	ЗадачаОбъект = Задача.ПолучитьОбъект();
	ЗадачаОбъект.ДатаИсполнения = ТекущаяДата();
	ЗадачаОбъект.РезультатВыполнения = Описание;
//	ЗадачаОбъект.Записать();
	ЗадачаОбъект.ВыполнитьЗадачу();
	
	//Если ФормаЗадачи = "Проверить" Тогда
	//	ВариантТекстаОтклонения = НСтр("ru = '%1, %2 вернул(а) задачу на доработку:
	//		|%3
	//		|'");
	//ИначеЕсли ФормаЗадачи = "Выполнить" Тогда
	//	ВариантТекстаОтклонения = НСтр("ru = '%1, %2 отклонил(а) задачу:
	//		|%3
	//		|'");
	//КонецЕсли; 
	//
	//РезультатВыполнения = РезультатВыполненияТочкиПроверитьВыполнить(Задача, Согласовано, ВариантТекстаОтклонения) + РезультатВыполнения;
	//КомментарийПоЗадаче = Задача.РезультатВыполнения;
	//ЗаданиеОбъект.Записать();
	
КонецПроцедуры
 
Функция РезультатВыполненияТочкиПроверитьВыполнить(Знач ЗадачаСсылка, Согласовано, ВариантТекстаОтклонения)
	
	СтрокаФормат = ?(Согласовано,
	    НСтр("ru = '%1, %2 подтвердил(а) выполнение задачи:
		           |%3
		           |'"),ВариантТекстаОтклонения);
				   
	ЗадачаДанные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаСсылка, 
		"РезультатВыполнения,ДатаИсполнения,Исполнитель");
	Комментарий = СокрЛП(ЗадачаДанные.РезультатВыполнения);
	Комментарий = ?(ПустаяСтрока(Комментарий), "", Комментарий + Символы.ПС);
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаФормат, 
	              ЗадачаДанные.ДатаИсполнения,
	              ЗадачаДанные.Исполнитель,
	              Комментарий);
	
	Возврат Результат;
	
КонецФункции

Функция ПроверкаСообщения(СтруктураСообщения, ПолученноеСообщение, ЗадачаСсылка, Согласовано, Замечания)
	
	Отказ = Ложь;

	Описание = СокрЛП(СтруктураСообщения.Описание);
	Отправитель = СтруктураСообщения.Отправитель;
	Тема = СтруктураСообщения.Тема;
	
	СтруктураЛистПроверки = Новый Структура("Подтверждение, ПризнакЗадачи, Задача, ЗадачаОткрыта, Отправитель, Описание, Вложения, ФорматВложения", Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь); 
	
	Если Найти(Тема, "Confirm") Тогда // задача согласована
		СтруктураЛистПроверки.Подтверждение = Истина;
		СтруктураЛистПроверки.Описание = Истина; // описание не является обязательным
		Согласовано = Истина;
		ПозицияЗамечания = Найти(Описание, "Если у вас есть замечания, вы можете написать их здесь:");
		Если ПозицияЗамечания > 0 Тогда
			Замечания = СокрЛП(Прав(Описание, СтрДлина(Описание)-(ПозицияЗамечания+55)));
		КонецЕсли; 
	ИначеЕсли Найти(Тема, "Reject") Тогда // задача отклонена
		СтруктураЛистПроверки.Подтверждение = Истина;
//		Если Найти(Описание,"Замечания:") = 1 И СтрДлина(Описание)>10 Тогда// описание является обязательным
		Если СтрДлина(Описание)>0 Тогда// описание является обязательным
			СтруктураЛистПроверки.Описание = Истина;
			Замечания = СокрЛП(Описание);
		КонецЕсли; 
	КонецЕсли;
	
	Позиция = Найти(Тема, "#");
	Если Позиция > 0 Тогда
		ОстатокСтроки = Прав(Тема, СтрДлина(Тема)-Позиция);
		Позиция = Найти(ОстатокСтроки, "#");
		Если Позиция > 0 Тогда
			СтруктураЛистПроверки.ПризнакЗадачи = Истина;
			НомерЗадачи = Лев(ОстатокСтроки, Позиция-1);
			ЗадачаСсылка = Задачи.ЗадачаИсполнителя.НайтиПоНомеру(НомерЗадачи);
			
			Если НЕ ЗадачаСсылка.Пустая() Тогда
				СтруктураЛистПроверки.Задача = Истина;
				
				Если НЕ ЗадачаСсылка.Выполнена Тогда
					СтруктураЛистПроверки.ЗадачаОткрыта = Истина;
				КонецЕсли;
				
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
	Если СтруктураЛистПроверки.Задача Тогда // отправитель должен соответствовать исполнителю задачи
		Если НРег(СокрЛП(ЗадачаСсылка.Исполнитель.ФизЛицо.АдресЭлектроннойПочты)) = НРег(СокрЛП(Отправитель)) Тогда
			СтруктураЛистПроверки.Отправитель = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
	Вложения = ПолученноеСообщение.Вложения; //вложение должно быть одно
	Если Вложения.Количество() = 1 ИЛИ (СтруктураЛистПроверки.Задача = Истина И ТипЗнч(ЗадачаСсылка.Предмет) = Тип("ДокументСсылка.Обращение")) Тогда
		СтруктураЛистПроверки.Вложения = Истина;
		Если ТипЗнч(ЗадачаСсылка.Предмет) = Тип("ДокументСсылка.ИзменениеКонфигурации") Тогда
			Расширение = НРег(Прав(Вложения[0].Имя,3));
			Если Расширение = "pdf" ИЛИ Расширение = "peg" ИЛИ Расширение = "jpg" ИЛИ Расширение = "png" Тогда
				СтруктураЛистПроверки.ФорматВложения = Истина;
			КонецЕсли; 
		ИначеЕсли ТипЗнч(ЗадачаСсылка.Предмет) = Тип("ДокументСсылка.Обращение") Тогда
			СтруктураЛистПроверки.ФорматВложения = Истина;
		КонецЕсли; 
	КонецЕсли;
	
	Если НЕ (СтруктураЛистПроверки.Подтверждение И СтруктураЛистПроверки.Задача И СтруктураЛистПроверки.ЗадачаОткрыта
		И СтруктураЛистПроверки.Отправитель И СтруктураЛистПроверки.Описание И СтруктураЛистПроверки.Вложения И СтруктураЛистПроверки.ФорматВложения) Тогда 
		// если сообщение не удовлетворяет хотя бы одному требованию создаем ответное сообшение с причиной отказа 
		Предмет = Неопределено;
		Если СтруктураЛистПроверки.Задача Тогда
			Предмет = ЗадачаСсылка.Предмет;
		КонецЕсли;
		
		ПричинаОтклонения = "";
		Если НЕ СтруктураЛистПроверки.Подтверждение Тогда
			ПричинаОтклонения = ПричинаОтклонения+"Тема письма не содержит действий по задаче. Должно быть Confirm - Согласовано или Reject - Отклонено.<BR>";
		КонецЕсли; 
		
		Если НЕ СтруктураЛистПроверки.ПризнакЗадачи Тогда
			ПричинаОтклонения = ПричинаОтклонения+"Тема письма не содержит ссылку на задачу. Ссылка должна выглядеть так #Номер задачи#.<BR>";
		КонецЕсли; 
		
		Если СтруктураЛистПроверки.ПризнакЗадачи И НЕ СтруктураЛистПроверки.Задача Тогда
			ПричинаОтклонения = ПричинаОтклонения+"Задача с номером "+НомерЗадачи+" не найдена.<BR>";
		КонецЕсли; 
		
		Если СтруктураЛистПроверки.ПризнакЗадачи И СтруктураЛистПроверки.Задача И НЕ СтруктураЛистПроверки.ЗадачаОткрыта Тогда
			ПричинаОтклонения = ПричинаОтклонения+"Задача с номером "+НомерЗадачи+" уже закрыта. Обратитесь к разработчику.<BR>";
		КонецЕсли; 
		
		Если СтруктураЛистПроверки.ПризнакЗадачи И СтруктураЛистПроверки.Задача И НЕ СтруктураЛистПроверки.Отправитель Тогда
			ПричинаОтклонения = ПричинаОтклонения+"Адрес отправителя не соответствует адресу исполнителя задачи.<BR>";
		КонецЕсли; 
		
		Если НЕ СтруктураЛистПроверки.Описание Тогда
			ПричинаОтклонения = ПричинаОтклонения+"В теле письма не указана причина отклонения задачи.<BR>";
		КонецЕсли; 
		
		Если НЕ СтруктураЛистПроверки.Вложения Тогда
			ПричинаОтклонения = ПричинаОтклонения+"Письмо должно содержать одно вложение.<BR>";
		КонецЕсли; 
		
		Если НЕ СтруктураЛистПроверки.ФорматВложения Тогда
			ПричинаОтклонения = ПричинаОтклонения+"Вложение должно быть в формате pdf, jpeg или png.";
		КонецЕсли; 
		
		ШаблонСообщения = Справочники.ШаблоныСообщений.ОтветНаНекорректноеСообщение;
		ЗаголовокПисьма = ШаблонСообщения.ЗаголовокПисьма;
		ЗаголовокПисьма = СтрЗаменить(ЗаголовокПисьма, "%Тема%", Тема);
		ТекстПисьма = ШаблонСообщения.ТекстПисьма;
		ТекстПисьма = СтрЗаменить(ТекстПисьма, "%ПричинаОтклонения%", ПричинаОтклонения);
		
		Копия = Неопределено;
		Если ТипЗнч(ЗадачаСсылка.Предмет) = Тип("ДокументСсылка.ИзменениеКонфигурации") Тогда
		    Копия = Новый Массив;
			Копия.Добавить(Константы.АдминистраторСистемы.Получить().АдресЭлектроннойПочты);
		КонецЕсли; 
		
		СоздатьСообщение(Предмет, Новый Структура("ЗаголовокПисьма, ТекстПисьма", ЗаголовокПисьма, ТекстПисьма), ,Отправитель, Копия, , ПолученноеСообщение);
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Отказ;

КонецФункции // ()
 
// Функция выполняющая разбор сообщения и заполненную структура
// документа для заполненения
// Параметры:
//	Сообщение - объект почты
//	ТипСообщения - "" - 1C, "Outlook" - MS Outlook
//
// Возвращающее значение: Структура будующего документа  
Функция Разбор(Сообщение, ТипСообщения = "")
	
	СтруктураСообщения = Новый Структура;
	
	// устанавливаем контактное лицо
	Если ТипСообщения = "Outlook" Тогда
		//Адрес = Сообщение.SenderEmailAddress;
		//Отправитель = ПолучениеЗначенийСервер.пзПолучитьПользователяПоЭлАдресу(Адрес);
		Отправитель = Сообщение.SenderEmailAddress;
	Иначе
		//АдресОтправЛица = ПолучитьАдресОтправителя(Сообщение); 	
		//Отправитель = ПолучениеЗначенийСервер.пзПолучитьПользователяПоЭлАдресу(АдресОтправЛица);
		Отправитель = Сообщение.Отправитель.Адрес; 	
	КонецЕсли;
	
	СтруктураСообщения.Вставить("Отправитель", Отправитель);
	
	// устанавливаем описание
	СтруктураСообщения.Вставить("Описание", "");
	СтруктураСообщения.Вставить("Тема", "");
	
	Если ТипСообщения = "Outlook" Тогда
		
		СтруктураСообщения.Тема = СтруктураСообщения.Тема + Сообщение.Subject;
		СтруктураСообщения.Описание	= СтруктураСообщения.Описание + ВернутьТекстПисьмаВТекстовомФормате(Сообщение.HTMLBody);
		
	Иначе
		
		СтруктураСообщения.Тема = СтруктураСообщения.Тема + Сообщение.Тема;
		
		Для Каждого Текст Из Сообщение.Тексты Цикл
			
			//удаляем недопустимые символы
			ТекстПисьма = ОчиститьНедопустимыеСимволыXML(Текст.Текст);
			
			//Позиция = НайтиНедопустимыеСимволыXML(Текст.Текст);
			//Если Позиция > 1 Тогда
			//	ТекстПисьма = Лев(Текст.Текст, Позиция-1);
			//КонецЕсли;
			
			//Позиция = Найти(ТекстПисьма, "</html>");
			//Если Позиция > 1 Тогда
			//	ТекстПисьма = Лев(Текст.Текст, Позиция+СтрДлина("</html>")-1);
			//КонецЕсли;
			
			Если Текст.ТипТекста	= ТипТекстаПочтовогоСообщения.HTML Тогда
				СтруктураСообщения.Описание	= СтруктураСообщения.Описание + СокрЛП(ВернутьТекстПисьмаВТекстовомФормате(ТекстПисьма));
				Прервать; // обрабатываем загрузку сообщений, только один раз
			ИначеЕсли Текст.ТипТекста	= ТипТекстаПочтовогоСообщения.ПростойТекст Тогда
				СтруктураСообщения.Описание	= СтруктураСообщения.Описание + СокрЛП(ТекстПисьма);
				Прервать; // обрабатываем загрузку сообщений, только один раз
			ИначеЕсли Текст.ТипТекста	= ТипТекстаПочтовогоСообщения.РазмеченныйТекст Тогда
				СтруктураСообщения.Описание	= СтруктураСообщения.Описание + ТекстПисьма;
				Прервать; // обрабатываем загрузку сообщений, только один раз
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураСообщения;
	
КонецФункции

// Функция возвращает по переданному тексту в формате HTML строку
// в формате обычного текста
//
// Параметры
//  ТекстПисьма - строка текста в формате HTML
//
// Возвращаемое значение:
//  Строка в формате обычного текста
//
Функция ВернутьТекстПисьмаВТекстовомФормате(ТекстПисьма) Экспорт
	
	Текст = ТекстПисьма;
	
	// найдем начала тела HTML документа
	НачалоТела = Найти(ВРЕГ(Текст),"<BODY");
	Если НачалоТела > 0 Тогда
		Текст = Прав(Текст,СтрДлина(Текст)-НачалоТела+1);
	КонецЕсли;
	
	// уберем определение стилей
	КонецСтиля = Найти(ВРЕГ(Текст),"</STYLE>");
	Пока КонецСтиля>0 Цикл
		Текст = Прав(Текст,СтрДлина(Текст)-(КонецСтиля+7));
		КонецСтиля = Найти(ВРЕГ(Текст),"</STYLE>");
	КонецЦикла;
	
	// не понятен смысл таких преобразований
	//// заменим переводы строк
	//Текст = СтрЗаменить(Текст,Символы.ВК,"");
	//Текст = СтрЗаменить(Текст,Символы.ПС,"");
	
	//Текст = СтрЗаменить(Текст,"<br>",Символы.ПС);
	//Текст = СтрЗаменить(Текст,"<BR>",Символы.ПС);
	
	Текст = СтрЗаменить(Текст,"<br>", "");
	Текст = СтрЗаменить(Текст,"<BR>", "");

	Текст = СтрЗаменить(Текст,"</td>",Символы.ПС);
	Текст = СтрЗаменить(Текст,"</TD>",Символы.ПС);
	Текст = СтрЗаменить(Текст,"</th>",Символы.ПС);
	Текст = СтрЗаменить(Текст,"</TH>",Символы.ПС);
	Текст = СтрЗаменить(Текст,"</tr>",Символы.ПС);
	Текст = СтрЗаменить(Текст,"</TH>",Символы.ПС);
	Текст = СтрЗаменить(Текст,"</p>",Символы.ПС);
	Текст = СтрЗаменить(Текст,"</P>",Символы.ПС);
	
	ПозицияКонцаТэга = Найти(Текст,">");
	
	// пробежимся по всем тэгам
	Пока ПозицияКонцаТэга>0 Цикл
		
		КонецТэга = ПозицияКонцаТэга;
		
		НачалоТэга = Найти(Текст,"<");
		
		ДлинаТэга = КонецТэга-НачалоТэга+1; 
		
		Тэг  = Сред(Текст,НачалоТэга,ДлинаТэга);
		                       
		Пока СтрЧислоВхождений(Тэг,"<")>1 Цикл
			НачалоВложенногоТэга = Найти(Прав(Тэг,СтрДлина(Тэг)-1),"<")+1;
			Тэг = Прав(Тэг,СтрДлина(Тэг)-НачалоВложенногоТэга+1);
		КонецЦикла;
		
		Текст = СтрЗаменить(Текст,Тэг,"");
		
		ПозицияКонцаТэга = Найти(Текст,">");
		
	КонецЦикла;
	
	Текст = СтрЗаменить(Текст,"&nbsp;"," ");
 	Текст = СтрЗаменить(Текст, "&lt;", "<");
 	Текст = СтрЗаменить(Текст, "&gt;", ">");
	Текст = СтрЗаменить(Текст, "&quot;", """"); //Двойные кавычки
	Текст = СтрЗаменить(Текст, "&apos;", "'"); //Одиночная кавычка
	Текст = СтрЗаменить(Текст, "&laquo;", "<<"); //Левые кавычки-елочки
	Текст = СтрЗаменить(Текст, "&raquo;", ">>"); //Правые кавычки-елочки
	Текст = СтрЗаменить(Текст, "&lsaquo;", "<"); //Левая одиночная угловая кавычка
	Текст = СтрЗаменить(Текст, "&rsaquo;", ">"); //Правая одиночная угловая кавычка
	Текст = СтрЗаменить(Текст, "&rsquo;", "’"); //Апостроф
	Текст = СтрЗаменить(Текст, "&bdquo;", """"); //Левые кавычки-лапки
	Текст = СтрЗаменить(Текст, "&ldquo;", """"); //Правые кавычки-лапки
	Текст = СтрЗаменить(Текст, "&rdquo;", """"); //Правые английские кавычки
	Текст = СтрЗаменить(Текст, "&lsquo;", "'"); //Левая одиночная кавычка
	Текст = СтрЗаменить(Текст, "&rsquo;", "'"); //Правая одиночная кавычка
	Текст = СтрЗаменить(Текст, "&sbquo;", "'"); //Одиночная low-9 кавычка
	
	Текст = СтрЗаменить(Текст, "&thinsp;", " "); //короткий пробел
	Текст = СтрЗаменить(Текст, "&#8201;", " "); //короткий пробел
	
	Текст = СтрЗаменить(Текст, "&nbsp;", " "); //неразрывный пробел
	Текст = СтрЗаменить(Текст, "&#160;", " "); //неразрывный пробел
	
	Текст = СтрЗаменить(Текст, "&#8209;", "-"); //неразрывный дефис
	
	Текст = СтрЗаменить(Текст, "&#ndash;", "-"); //короткое тире
	Текст = СтрЗаменить(Текст, "&#8211;", "-"); //короткое тире
	
	Текст = СтрЗаменить(Текст, "&#mdash;", "-"); //длинное тире
	Текст = СтрЗаменить(Текст, "&#8212;", "-"); //длинное тире
	
	Текст = СтрЗаменить(Текст, "&#minus;", "-"); //длинное тире
	Текст = СтрЗаменить(Текст, "&#8722;", "-"); //длинное тире

	СтрокаТекста = "";
	
	Для Сч =1 По СтрЧислоСтрок(Текст) Цикл
		
		СтрокаТекста = СтрокаТекста + СокрЛ(СтрПолучитьСтроку(Текст,Сч)) + Символы.ПС;
	
	КонецЦикла;
	
	Возврат СокрЛП(СтрокаТекста);
	
КонецФункции

Функция ОчиститьНедопустимыеСимволыXML(Текст)   Экспорт
	
	Позиция = НайтиНедопустимыеСимволыXML(Текст);
	Пока Позиция > 0 Цикл
		
		Текст = Лев(Текст, Позиция - 1) + " " + Сред(Текст, Позиция + 1);
		Позиция = НайтиНедопустимыеСимволыXML(Текст);
		
	КонецЦикла;
	
	Возврат Текст;
	
КонецФункции

#КонецОбласти 
//#Область ОтправкаИПолучениеУведомлений

#Область ОбменДаннымиXML

&НаСервере
Процедура УдалитьРегистрациюИзмененийУзловТестовыхБазПриЗакрытомБизнесПроцессе() Экспорт
	
//	по уже выполненным бизнес процессам выгрузка обработок в тестовые базы больше не нужна (невыгруженные обработки из-за техн. проблем), поэтому 
// удалим регистрацию изменений по таким обработкам
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЖурналВыгрузки.Узел,
		|	ЖурналВыгрузки.Обработка
		|ПОМЕСТИТЬ ВТНепротестированные
		|ИЗ
		|	РегистрСведений.ЖурналВыгрузки КАК ЖурналВыгрузки
		|ГДЕ
		|	ЖурналВыгрузки.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоТестированию.ПередачаНаТестирование)
		|	И ЖурналВыгрузки.Задача.БизнесПроцесс.Завершен = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	ЖурналВыгрузки.Узел,
		|	ЖурналВыгрузки.Обработка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЖурналВыгрузки.Задача КАК Задача,
		|	ЖурналВыгрузки.Узел,
		|	ЖурналВыгрузки.Обработка,
		|	ВЫБОР
		|		КОГДА ВТНепротестированные.Узел ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Удалять
		|ИЗ
		|	РегистрСведений.ЖурналВыгрузки КАК ЖурналВыгрузки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНепротестированные КАК ВТНепротестированные
		|		ПО ЖурналВыгрузки.Узел = ВТНепротестированные.Узел
		|			И ЖурналВыгрузки.Обработка = ВТНепротестированные.Обработка
		|ГДЕ
		|	ЖурналВыгрузки.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоТестированию.ПередачаНаТестирование)
		|	И ЖурналВыгрузки.Задача.БизнесПроцесс.Завершен = ИСТИНА
		|ИТОГИ ПО
		|	Задача
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТНепротестированные";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
	Пока Выборка.Следующий() Цикл
		
		ВыборкаДетальныеЗаписи = Выборка.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи.Удалять Тогда
				ПланыОбмена.УдалитьРегистрациюИзменений(ВыборкаДетальныеЗаписи.Узел, ВыборкаДетальныеЗаписи.Обработка);
			КонецЕсли; 
		КонецЦикла;
		
// также очистим регистры сведений невыгруженных объектов
		НаборЗаписей = РегистрыСведений.ЖурналВыгрузки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Операция.Установить(Перечисления.ВидыОперацийПоТестированию.ПередачаНаТестирование);
		НаборЗаписей.Отбор.Задача.Установить(Выборка.Задача);
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.ЖурналУведомлений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Операция.Установить(Перечисления.ВидыОперацийПоТестированию.ПередачаНаТестирование);
		НаборЗаписей.Отбор.Задача.Установить(Выборка.Задача);
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры // УдалитьРегистрациюИзмененийУзловТестовыхБазПриЗакрытомБизнесПроцессе()
 
&НаСервере
Процедура ЗарегистрироватьИзменение(Задача, Действие) Экспорт
	
	Обращение = Задача.Предмет;
	
	Если Действие = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоТестированию.ПередачаНаТестирование") Тогда
		ТипИБ = Перечисления.ТипИнформационнойБазы.Тестовая;
	ИначеЕсли Действие = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоТестированию.УспешноеСогласование") Тогда
		ТипИБ = Перечисления.ТипИнформационнойБазы.Рабочая;
	КонецЕсли; 
	
	Для каждого СтрокаВнешниеОтчетыИОбработки Из Обращение.ВнешниеОтчетыИОбработки Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВнешниеОбработкиКлиенты.Клиент
		|ПОМЕСТИТЬ ВТ_Клиенты
		|ИЗ
		|	Справочник.ВнешниеОбработки.Клиенты КАК ВнешниеОбработкиКлиенты
		|ГДЕ
		|	ВнешниеОбработкиКлиенты.Использование = ИСТИНА
		|	И ВнешниеОбработкиКлиенты.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлиентыИнформационныеБазы.ИнформационнаяБаза
		|ИЗ
		|	Справочник.Клиенты.ИнформационныеБазы КАК КлиентыИнформационныеБазы
		|ГДЕ
		|	КлиентыИнформационныеБазы.Ссылка В
		|			(ВЫБРАТЬ
		|				ВТ_Клиенты.Клиент
		|			ИЗ
		|				ВТ_Клиенты)
		|	И КлиентыИнформационныеБазы.ИнформационнаяБаза.ТипИнформационнойБазы = &ТипИБ
		|	И КлиентыИнформационныеБазы.ИнформационнаяБаза.КонфигурацияИБ = &КонфигурацияИБ";
		
		Запрос.УстановитьПараметр("Ссылка", СтрокаВнешниеОтчетыИОбработки.ВнешняяОбработка);	
		Запрос.УстановитьПараметр("КонфигурацияИБ", СтрокаВнешниеОтчетыИОбработки.ВнешняяОбработка.Конфигурация);	
		Запрос.УстановитьПараметр("ТипИБ", ТипИБ);	
		ИнформационныеБазы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИнформационнаяБаза");
		
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнформационныеБазы.Ссылка КАК Узел
		|ИЗ
		|	ПланОбмена.ИнформационныеБазы КАК ИнформационныеБазы
		|ГДЕ
		|	ИнформационныеБазы.ИнформационнаяБаза В(&ИнформационныеБазы)";
		
		Запрос.УстановитьПараметр("ИнформационныеБазы", ИнформационныеБазы);	
		Узлы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Узел");
		
		Если ЗначениеЗаполнено(Узлы) Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(Узлы, СтрокаВнешниеОтчетыИОбработки.ВнешняяОбработка);
			
			ТаблицаДляРС = Запрос.Выполнить().Выгрузить();
			ТаблицаДляРС.Колонки.Добавить("Задача", Новый ОписаниеТипов("ЗадачаСсылка.ЗадачаИсполнителя"));
			ТаблицаДляРС.ЗаполнитьЗначения(Задача, "Задача");
			ТаблицаДляРС.Колонки.Добавить("Операция", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийПоТестированию"));
			ТаблицаДляРС.ЗаполнитьЗначения(Действие, "Операция");
			ТаблицаДляРС.Колонки.Добавить("Обработка", Новый ОписаниеТипов("СправочникСсылка.ВнешниеОбработки"));
			ТаблицаДляРС.ЗаполнитьЗначения(СтрокаВнешниеОтчетыИОбработки.ВнешняяОбработка, "Обработка");
			
			//// запишем в журнал, чтобы понимать принадлежность выгрузки к задаче
			//// наличие записи в регистре после выполнения выгрузки является сигналом, что выгрузка не прошла
			НаборЗаписей = РегистрыСведений.ЖурналВыгрузки.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Операция.Установить(Действие);
			НаборЗаписей.Отбор.Задача.Установить(Задача);
			НаборЗаписей.Отбор.Обработка.Установить(СтрокаВнешниеОтчетыИОбработки.ВнешняяОбработка);
			НаборЗаписей.Загрузить(ТаблицаДляРС);
			НаборЗаписей.Записать();
			
			//для отложенной отправки уведомлений
			НаборЗаписей = РегистрыСведений.ЖурналУведомлений.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Операция.Установить(Действие);
			НаборЗаписей.Отбор.Задача.Установить(Задача);
			НаборЗаписей.Отбор.Обработка.Установить(СтрокаВнешниеОтчетыИОбработки.ВнешняяОбработка);
			НаборЗаписей.Загрузить(ТаблицаДляРС);
			НаборЗаписей.Записать();
			
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры // ()

&НаСервере
Процедура ОбменДаннымиXML() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВнешниеОбработкиИзменения.Узел,
		|	ВнешниеОбработкиИзменения.Узел.ИнформационнаяБаза.WSСсылка КАК WSСсылка,
		|	ВнешниеОбработкиИзменения.Узел.ИнформационнаяБаза.WSПользователь КАК WSПользователь,
		|	ВнешниеОбработкиИзменения.Узел.ИнформационнаяБаза.WSПароль КАК WSПароль
		|ИЗ
		|	Справочник.ВнешниеОбработки.Изменения КАК ВнешниеОбработкиИзменения
		|ГДЕ
		|	НЕ ВнешниеОбработкиИзменения.Узел.ЭтотУзел
		|
		|СГРУППИРОВАТЬ ПО
		|	ВнешниеОбработкиИзменения.Узел,
		|	ВнешниеОбработкиИзменения.Узел.ИнформационнаяБаза.WSПароль,
		|	ВнешниеОбработкиИзменения.Узел.ИнформационнаяБаза.WSПользователь,
		|	ВнешниеОбработкиИзменения.Узел.ИнформационнаяБаза.WSСсылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ПараметрыВыгрузки = ВыгрузитьДанные(ВыборкаДетальныеЗаписи.Узел);
		
		Если ПараметрыВыгрузки.ЧислоВыгруженныхОбъектов = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		ПараметрыWS = Новый Структура("WSСсылка, WSПользователь, WSПароль");
		ПараметрыWS.WSСсылка = ВыборкаДетальныеЗаписи.WSСсылка;
		ПараметрыWS.WSПользователь = ВыборкаДетальныеЗаписи.WSПользователь;
		ПараметрыWS.WSПароль = ВыборкаДетальныеЗаписи.WSПароль;
		
		ПередатьНаСервере(ПараметрыВыгрузки.СтрокаXML, ПараметрыВыгрузки.ЧислоВыгруженныхОбъектов, ВыборкаДетальныеЗаписи.Узел, ПараметрыWS);
		
	КонецЦикла;
	
	ОтправкаУведомлений();
	
	УдалитьРегистрациюИзмененийУзловТестовыхБазПриЗакрытомБизнесПроцессе();
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ЗаписатьСведенияВЖурналОбмена(Узел, ВидОшибкиОбмена, ОписаниеОшибки = "")

	Отбор = Новый Структура;
	Отбор.Вставить("Узел", Узел);
	Отбор.Вставить("ВидОшибкиОбмена", ВидОшибкиОбмена);
	РесурсыСтруктура = РегистрыСведений.ЖурналОшибокОбмена.Получить(Отбор);
	
	КоличествоПопытокОбмена = 0;
	Если РесурсыСтруктура.Количество() Тогда
		КоличествоПопытокОбмена = РесурсыСтруктура.КоличествоПопытокОбмена;
	КонецЕсли;
	
	Если ОписаниеОшибки = "" //успех
		И НЕ КоличествоПопытокОбмена = 0 Тогда //ранее были неудачные попытки выгрузить в этот узел
		
		//Обнулим запись по этому узлу и виду ошибки
		ЖурналОшибокОбмена = РегистрыСведений.ЖурналОшибокОбмена.СоздатьНаборЗаписей();
		ЖурналОшибокОбмена.Отбор.Узел.Установить(Узел);
		ЖурналОшибокОбмена.Отбор.ВидОшибкиОбмена.Установить(ВидОшибкиОбмена);
		ЖурналОшибокОбмена.Записать();
		
		//ЖурналОшибокОбмена = РегистрыСведений.ЖурналОшибокОбмена.СоздатьМенеджерЗаписи();
		//ЖурналОшибокОбмена.Узел = Узел;
		//ЖурналОшибокОбмена.ВидОшибкиОбмена = ВидОшибкиОбмена;
		//ЖурналОшибокОбмена.Прочитать();
		//Если ЖурналОшибокОбмена.Выбран() Тогда
		//	ЖурналОшибокОбмена.Удалить();
		//	ЖурналОшибокОбмена.Записать();
		//КонецЕсли;
		
	ИначеЕсли НЕ ОписаниеОшибки = "" Тогда //ошибка выгрузки
		
		//ЖурналОшибокОбмена = РегистрыСведений.ЖурналОшибокОбмена.СоздатьНаборЗаписей();
		//ЖурналОшибокОбмена.Отбор.Узел.Установить(Узел);
		//ЖурналОшибокОбмена.Отбор.ВидОшибкиОбмена.Установить(ВидОшибкиОбмена);
		//ЖурналОшибокОбмена.Прочитать();
		//Если ЖурналОшибокОбмена.Количество() Тогда
		//	Для каждого Запись Из ЖурналОшибокОбмена Цикл
		//		//Запись.Узел = Узел;
		//		//Запись.ВидОшибкиОбмена = ВидОшибкиОбмена;
		//		Запись.КоличествоПопытокОбмена = КоличествоПопытокОбмена+1;
		//		Запись.ОписаниеОшибки = ОписаниеОшибки;
		//	КонецЦикла; 
		//Иначе
		//	Запись = ЖурналОшибокОбмена.Добавить();
		//	Запись.Узел = Узел;
		//	Запись.ВидОшибкиОбмена = ВидОшибкиОбмена;
		//	Запись.КоличествоПопытокОбмена = КоличествоПопытокОбмена+1;
		//	Запись.ОписаниеОшибки = ОписаниеОшибки;
		//КонецЕсли; 
		//ЖурналОшибокОбмена.Записать();
		
		ЖурналОшибокОбмена = РегистрыСведений.ЖурналОшибокОбмена.СоздатьМенеджерЗаписи();
		ЖурналОшибокОбмена.Узел = Узел;
		ЖурналОшибокОбмена.ВидОшибкиОбмена = ВидОшибкиОбмена;
		ЖурналОшибокОбмена.Прочитать();
		Если ЖурналОшибокОбмена.Выбран() Тогда
			ЖурналОшибокОбмена.КоличествоПопытокОбмена = КоличествоПопытокОбмена+1;
			ЖурналОшибокОбмена.ОписаниеОшибки = ОписаниеОшибки;
		Иначе
			ЖурналОшибокОбмена.Узел = Узел;
			ЖурналОшибокОбмена.ВидОшибкиОбмена = ВидОшибкиОбмена;
			ЖурналОшибокОбмена.КоличествоПопытокОбмена = КоличествоПопытокОбмена+1;
			ЖурналОшибокОбмена.ОписаниеОшибки = ОписаниеОшибки;
			ЖурналОшибокОбмена.ЗаявкаВСлужбуПоддержкиОтправлена = Ложь;
		КонецЕсли; 
		ЖурналОшибокОбмена.Записать();
		
	КонецЕсли; 

КонецПроцедуры // ЗаписатьСведенияВЖурналОбмена()

&НаСервере
Процедура ПередатьНаСервере(СтрокаXML, ЧислоВыгруженныхОбъектов, Узел, ПараметрыWS)

	Данные = Новый ХранилищеЗначения(СтрокаXML, Новый СжатиеДанных(9));
	
	// Подключение
	Попытка
		Определения = Новый WSОпределения(ПараметрыWS.WSСсылка, ПараметрыWS.WSПользователь, ПараметрыWS.WSПароль);
	Исключение
//		ЗаписьЖурналаРегистрации("Обмен данными XML. Ошибка при создании WSОпределения.",,,,"Узел: "+Узел+". "+ОписаниеОшибки());
		ЗаписатьСведенияВЖурналОбмена(Узел, Перечисления.ВидыОшибокОбмена.ОшибкаСоединения, "Ошибка при создании WSОпределения: "+ОписаниеОшибки());
		Возврат;
	КонецПопытки; 
	
	Попытка
		Прокси = Новый WSПрокси(Определения, "http://www.rusalco.com/xtdo", "WebRusAlco", "WebRusAlcoSoap");
		Прокси.Пользователь = ПараметрыWS.WSПользователь;
		Прокси.Пароль = ПараметрыWS.WSПароль;
	Исключение
//		ЗаписьЖурналаРегистрации("Обмен данными XML. Ошибка при создании WSПрокси.",,,,"Узел: "+Узел+". "+ОписаниеОшибки());
		ЗаписатьСведенияВЖурналОбмена(Узел, Перечисления.ВидыОшибокОбмена.ОшибкаСоединения, "Ошибка при создании WSПрокси: "+ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ЗаписатьСведенияВЖурналОбмена(Узел, Перечисления.ВидыОшибокОбмена.ОшибкаСоединения);
	
	// Передача
	ТекстОшибки = "";
	Попытка
		ЗагруженоОбъектов = Прокси.ПринятьДанные(Данные, ТекстОшибки);
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			//ЗаписьЖурналаРегистрации("Обмен данными XML. Ошибка загрузки данных.",,,,"Узел: "+Узел+". "+ТекстОшибки);
			ЗаписатьСведенияВЖурналОбмена(Узел, Перечисления.ВидыОшибокОбмена.ОшибкаОбмена, "Ошибка загрузки данных: "+ТекстОшибки);
		Иначе
			Если ЧислоВыгруженныхОбъектов = ЗагруженоОбъектов Тогда
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел);
	//			ЗаписьЖурналаРегистрации("Обмен данными XML.",,,,"Узел: "+Узел+ ". Загружено объектов: "+ЗагруженоОбъектов);
				
				ЖурналВыгрузки = РегистрыСведений.ЖурналВыгрузки.СоздатьНаборЗаписей();
				ЖурналВыгрузки.Отбор.Узел.Установить(Узел);
				ЖурналВыгрузки.Записать();
				
				ЗаписатьСведенияВЖурналОбмена(Узел, Перечисления.ВидыОшибокОбмена.ОшибкаОбмена);
			Иначе
//				ЗаписьЖурналаРегистрации("Обмен данными XML. Ошибка загрузки данных. Не совпадает количество выгруженных и загруженных объектов.",,,,"Узел: "+Узел+". Выгружено: "+ЧислоВыгруженныхОбъектов+"; загружено: "+ЗагруженоОбъектов);
				ЗаписатьСведенияВЖурналОбмена(Узел, Перечисления.ВидыОшибокОбмена.ОшибкаОбмена, "Ошибка загрузки данных. Выгружено: "+ЧислоВыгруженныхОбъектов+"; загружено: "+ЗагруженоОбъектов);
			КонецЕсли; 
		КонецЕсли; 
	Исключение
//		ЗаписьЖурналаРегистрации("Обмен данными XML. Ошибка выполнения веб-сервиса.",,,,"Узел: "+Узел+". "+ОписаниеОшибки());
		ЗаписатьСведенияВЖурналОбмена(Узел, Перечисления.ВидыОшибокОбмена.ОшибкаОбмена, "Ошибка выполнения веб-сервиса: "+ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьДанные(Узел)
	
	ЗаписьПравилОбмена = РегистрыСведений.ПравилаОбмена.СоздатьМенеджерЗаписи();
	ЗаписьПравилОбмена.ПравилаОбмена = "ExchangeXML";
	ЗаписьПравилОбмена.Прочитать();
	
	Если НЕ ЗначениеЗаполнено(ЗаписьПравилОбмена.ПравилоВыгрузки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПравилаОбмена = ЗаписьПравилОбмена.ПравилоВыгрузки.Получить();
	
	// Инициализация
	Обмен = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	Обмен.РежимОбмена = "Выгрузка";
	ИмяФайлаДанных = ПолучитьИмяВременногоФайла("xml");
	Обмен.ИмяФайлаОбмена = ИмяФайлаДанных;
	
	// Загрузка правил
	ИмяФайлаПравилОбмена = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаПравилОбмена);
	ЗаписьТекста.Записать(ПравилаОбмена);
	ЗаписьТекста.Закрыть();
	Обмен.ИмяФайлаПравилОбмена = ИмяФайлаПравилОбмена;
	Обмен.ЗагрузитьПравилаОбмена();
	
	// Правила выгрузки данных
	
	// Сначала все отключаем
	Для Каждого Строка из Обмен.ТаблицаПравилВыгрузки.Строки Цикл
		Строка.Включить = 0;
		Обмен.УстановитьПометкиПодчиненных(Строка, "Включить");
	КонецЦикла;
	// Включаем нужное правило
	ИмяПВД = "";
	Если Узел.ИнформационнаяБаза.КонфигурацияИБ = Справочники.Конфигурации.KT2000_Alcohol_Mnfc Тогда
		ИмяПВД = "ВнешниеОбработки";
	ИначеЕсли Узел.ИнформационнаяБаза.КонфигурацияИБ = Справочники.Конфигурации.ЗарплатаИУправлениеПерсоналом Тогда
		ИмяПВД = "ВнешниеОбработкиЗУП";
	КонецЕсли; 
	
	СтрПравил = Обмен.ТаблицаПравилВыгрузки.Строки.Найти(ИмяПВД, "Имя", Истина);
	Если СтрПравил = Неопределено Тогда
		ВызватьИсключение "ПередатьНаСервере(): не удалось найти правило выгрузки "+ИмяПВД+" в правилах обмена.";
	КонецЕсли; 
	СтрПравил.Включить = 1;
	СтрПравил.СсылкаНаУзелОбмена = Узел;
	Обмен.УстановитьПометкиРодителей(СтрПравил, "Включить");
	
	// Отбор
 //   Постр = Новый ПостроительОтчета("ВЫБРАТЬ ПЕРВЫЕ 1 _.* ИЗ Справочник.Контрагенты КАК _
 //|{ГДЕ _.Ссылка.* КАК Справочник_Контрагенты}");
 //   Постр.Отбор.Добавить("Справочник_Контрагенты").Установить(Контрагент);
 //   СтрПравил.ИспользоватьОтбор = Истина;
 //   СтрПравил.НастройкиПостроителя = Постр.ПолучитьНастройки();
	
	// Выгрузка
	Обмен.ВыполнитьВыгрузку();	
	ЧтениеТекста = Новый ЧтениеТекста;
	ЧтениеТекста.Открыть(ИмяФайлаДанных, КодировкаТекста.UTF8);
	СтрокаXML = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	УдалитьФайлы(ИмяФайлаДанных);
	УдалитьФайлы(ИмяФайлаПравилОбмена);
	
	ПараметрыВозврата = Новый Структура("СтрокаXML, ЧислоВыгруженныхОбъектов");
	ПараметрыВозврата.СтрокаXML = СтрокаXML;
	ПараметрыВозврата.ЧислоВыгруженныхОбъектов = Обмен.мСчетчикВыгруженныхОбъектов;
	
	Возврат ПараметрыВозврата;
	
КонецФункции // ВыгрузитьКонтрагента()

&НаСервере
Процедура ЗагрузкаИзОТ() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	КаталогОбмена = Константы.КаталогОбменаОТ.Получить();
	НайденныеФайлы = НайтиФайлы(КаталогОбмена, "*.xml");
	Если НайденныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	ФайлВыгрузки = НайденныеФайлы.Получить(0);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлВыгрузки.ПолноеИмя);
	
	ДанныеXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,ФабрикаXDTO.Тип("http://www.rusalco.com/omni", "Data"));
	ТикетыXDTO = ДанныеXDTO.Ticket;
	Для каждого Тикет Из ТикетыXDTO Цикл
		
		ТипЗначения = ИзXMLТипа("dateTime", "http://www.w3.org/2001/XMLSchema");
		ДатаСоздания = XMLЗначение(ТипЗначения, Тикет.Создано);
		
		Обращение = Документы.Обращение.НайтиПоНомеру(Тикет.Номер_обращения, ДатаСоздания);
		Если НЕ Обращение.Пустая() Тогда
			//Документ уже существует
			Продолжить;
		КонецЕсли; 
					
		//создадим новый документ
		Обращение = Документы.Обращение.СоздатьДокумент();
		Обращение.Номер = Тикет.Номер_обращения;
		Обращение.Дата = ДатаСоздания;
		Обращение.ТемаОбращения = Тикет.Краткое_описание;
		Обращение.ОписаниеHTML = Тикет.Описание;
		
		Если Тикет.Категория_Код = "CAT-0621" Тогда
			Обращение.Категория = Перечисления.КатегорииОбращений.ИзменениеВнешнихОтчётовИОбработок;
		ИначеЕсли Тикет.Категория_Код = "CAT-0620" ИЛИ Тикет.Категория_Код = "CAT-0773" Тогда
			Обращение.Категория = Перечисления.КатегорииОбращений.ИзменениеКонфигурации;
		ИначеЕсли Тикет.Категория_Код = "CAT-0867" Тогда
			Обращение.Категория = Перечисления.КатегорииОбращений.ИзменениеКонфигурацииБезПодтвержденияОдобрения;
		КонецЕсли; 
		
		//обработка поля клиент
		Клиент = Справочники.Клиенты.НайтиПоРеквизиту("КодОТ", Тикет.Компания_Номер);
		Компания = Тикет.Заявитель_Компания;
		Если Клиент.Пустая() Тогда
			//	создадим нового клиента
			Клиент = Справочники.Клиенты.СоздатьЭлемент();
			Клиент.КодОТ = Тикет.Компания_Номер;
			Клиент.Наименование = Тикет.Заявитель_Компания;
			Попытка
				Клиент.Записать();
			Исключение
				ЗаписьЖурналаРегистрации("Загрузка обращения из ОТ",,,,"Неудачная попытка записи клиента: " + Тикет.Заявитель_Компания,);
				ЗаписьЖурналаРегистрации("Информация об ошибке",,,,Строка(ОписаниеОшибки()),);
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		Обращение.Клиент = Клиент.Ссылка;
		
		//создание или изменение физлица заявителя
		ФизЛицо = ЗаписатьФизЛицо("\\"+Тикет.Заявитель_LoginDomain, Тикет.Заявитель_Фамилия, Тикет.Заявитель_Имя, Тикет.Заявитель_E_mail, Тикет.Заявитель_Телефон);
		
		Если ФизЛицо.Пустая() Тогда
			Продолжить;
		КонецЕсли; 
		
		//обработка поля инициатор
		Инициатор = Справочники.КонтактныеЛица.НайтиПоРеквизиту("ФизЛицо", ФизЛицо);
		Если Инициатор.Пустая() Тогда
			//	создадим нового Инициатора
			Инициатор = Справочники.КонтактныеЛица.СоздатьЭлемент();
			Инициатор.Владелец = Клиент.Ссылка;
			Инициатор.КодОТ = Тикет.Заявитель_Номер;
			Инициатор.Наименование = Тикет.Заявитель_Фамилия+" "+Тикет.Заявитель_Имя;
			Инициатор.Имя = Тикет.Заявитель_Имя;
			Инициатор.Фамилия = Тикет.Заявитель_Фамилия;
			Инициатор.ФизЛицо = ФизЛицо;
			Инициатор._Логин = "\\"+Тикет.Заявитель_LoginDomain;
			Попытка
				Инициатор.Записать();
			Исключение
				ЗаписьЖурналаРегистрации("Загрузка обращения из ОТ",,,,"Неудачная попытка записи инициатора: " + Тикет.Заявитель_Фамилия+" "+Тикет.Заявитель_Имя,);
				ЗаписьЖурналаРегистрации("Информация об ошибке",,,,Строка(ОписаниеОшибки()),);
				Продолжить;
			КонецПопытки;
			
		КонецЕсли;
		
		Обращение.Инициатор = Инициатор.Ссылка;
		
		//создание или изменение физлица исполнителя
		ФизЛицо = ЗаписатьФизЛицо("\\"+Тикет.Исполнитель_LoginDomain, Тикет.Исполнитель_Фамилия, Тикет.Исполнитель_Имя, Тикет.Исполнитель_E_mail, Тикет.Исполнитель_Телефон);
		
		Если ФизЛицо.Пустая() Тогда
			Продолжить;
		КонецЕсли; 
		
		//обработка поля сотрудник
		Исполнитель = Справочники.Сотрудники.НайтиПоРеквизиту("ФизЛицо", ФизЛицо);
		Если Исполнитель.Пустая() Тогда
			//	создадим нового сотрудника
			Исполнитель = Справочники.Сотрудники.СоздатьЭлемент();
			Исполнитель.КодОТ = Тикет.Исполнитель_Номер;
			Исполнитель.Наименование = Тикет.Исполнитель_Фамилия+" "+Тикет.Исполнитель_Имя;
			Исполнитель.Имя = Тикет.Исполнитель_Имя;
			Исполнитель.Фамилия = Тикет.Исполнитель_Фамилия;
			Исполнитель._Логин = "\\"+Тикет.Исполнитель_LoginDomain;
			Исполнитель.ФизЛицо = ФизЛицо;
			Попытка
				Исполнитель.Записать();
			Исключение
				ЗаписьЖурналаРегистрации("Загрузка обращения из ОТ",,,,"Неудачная попытка записи исполнителя: " + Тикет.Исполнитель,);
				ЗаписьЖурналаРегистрации("Информация об ошибке",,,,Строка(ОписаниеОшибки()),);
				Продолжить;
			КонецПопытки;
			
		КонецЕсли;
		Обращение.Ответственный = Исполнитель.Ссылка;
		
		// COMP-0056 Топаз
		Обращение.ВыполнятьСогласование = ?(Тикет.Компания_Номер = "COMP-0056",Ложь,Истина);
		
		Попытка
			Обращение.Записать();
		Исключение
			ЗаписьЖурналаРегистрации("Загрузка обращения из ОТ",,,,"Неудачная попытка записи обращения: " + Тикет.Номер_обращения,);
			ЗаписьЖурналаРегистрации("Информация об ошибке",,,,Строка(ОписаниеОшибки()),);
			Продолжить;
		КонецПопытки; 
	КонецЦикла; 

	ЧтениеXML.Закрыть();
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьФизЛицо(LoginDomain, Фамилия, Имя, Email, Телефон)
	
	ФизЛицо = Справочники.ФизическиеЛица.НайтиПоРеквизиту("Логин", LoginDomain);
	ЗаписатьФизЛицо = Ложь;
	Если ФизЛицо.Пустая() Тогда
		ФизЛицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
		ФизЛицоОбъект.Логин = LoginDomain;
		ЗаписатьФизЛицо = Истина;
	ИначеЕсли НЕ (ФизЛицо.Наименование = Фамилия+" "+Имя 
		И ФизЛицо.АдресЭлектроннойПочты = Email 
		И ФизЛицо.Телефон = Телефон) Тогда
		ФизЛицоОбъект = ФизЛицо.ПолучитьОбъект();
		ЗаписатьФизЛицо = Истина;
	КонецЕсли;
	
	Если ЗаписатьФизЛицо Тогда
		ФизЛицоОбъект.Наименование = Фамилия+" "+Имя;
		ФизЛицоОбъект.АдресЭлектроннойПочты = Email;
		ФизЛицоОбъект.Телефон = Телефон;
		Попытка
			ФизЛицоОбъект.Записать();
			ФизЛицо = ФизЛицоОбъект.Ссылка;
		Исключение
			ЗаписьЖурналаРегистрации("Загрузка обращения из ОТ",,,,"Неудачная попытка записи физлица: " + Фамилия+", "+Имя,);
			ЗаписьЖурналаРегистрации("Информация об ошибке",,,,Строка(ОписаниеОшибки()),);
		КонецПопытки; 
	КонецЕсли;
	
	Возврат ФизЛицо;
	
КонецФункции // ()
	
#КонецОбласти 
//#Область ОбменДаннымиXML

#Область WebServices

Процедура ПолучитьСведения(ИБ, Свойство, АдресВременногоХранилища) Экспорт

	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ИБ", Новый ОписаниеТипов("СправочникСсылка.ИнформационныеБазы"));
	ТЗ.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
	НоваяСтрока = ТЗ.Добавить();
	НоваяСтрока.ИБ = ИБ;
	
	// Подключение
	Попытка
		Определения = Новый WSОпределения(ИБ.WSСсылка, ИБ.WSПользователь, ИБ.WSПароль);
	Исключение
		Данные = "ERROR-"+ОписаниеОшибки();
		НоваяСтрока.Значение = Данные;
		ПоместитьВоВременноеХранилище(ТЗ, АдресВременногоХранилища);
		ЗаписьЖурналаРегистрации("Получение свойства конфигурации. Ошибка при создании WSОпределения.",,,,ОписаниеОшибки());
		Возврат;
	КонецПопытки; 
	
	Попытка
		Прокси = Новый WSПрокси(Определения, "http://www.rusalco.com/xtdo", "WebRusAlco", "WebRusAlcoSoap");
		Прокси.Пользователь = ИБ.WSПользователь;
		Прокси.Пароль = ИБ.WSПароль;
	Исключение
		Данные = "ERROR-"+ОписаниеОшибки();
		НоваяСтрока.Значение = Данные;
		ПоместитьВоВременноеХранилище(ТЗ, АдресВременногоХранилища);
		ЗаписьЖурналаРегистрации("Получение свойства конфигурации. Ошибка при создании WSПрокси.",,,,ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Попытка
		Если Свойство = "АвторскиеПрава" Тогда
			Данные = Прокси.ПолучитьСтроковоеСвойствоКонфигурации(Свойство);
		ИначеЕсли Свойство = "ВерсияПриложения" Тогда
			Данные = Прокси.ПолучитьИнформациюОСистеме(Свойство);
		КонецЕсли; 
	Исключение
		Данные = "ERROR-"+ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Получение свойства конфигурации. Ошибка выполнения веб-сервиса.",,,,ОписаниеОшибки());
	КонецПопытки;
	
	НоваяСтрока.Значение = Данные;
	ПоместитьВоВременноеХранилище(ТЗ, АдресВременногоХранилища);
	
КонецПроцедуры

#КонецОбласти 
//#Область WebServices

#Область Функции

Функция ПолучитьФайлФункцииНаСервере(ФункцияВладелец, ТипФайла) Экспорт 

	Отбор = Новый Структура("ТипФайла", ТипФайла);
	ВыборкаФайлов = Справочники.Файлы.Выбрать(,ФункцияВладелец, Отбор);
	Если ВыборкаФайлов.Следующий() Тогда
		Результат = ВыборкаФайлов.Ссылка;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ПолучитьФайлФункцииНаСервере()

#КонецОбласти
//#Область Функции

