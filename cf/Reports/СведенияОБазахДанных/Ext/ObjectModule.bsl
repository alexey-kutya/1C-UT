Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; // отключаем стандартный вывод отчета - будем выводить программно 
	
	// Получаем настройки отчета
	Настройки = КомпоновщикНастроек.ПолучитьНастройки(); // Получаем настройки отчета 

	ПользовательскиеНастройки = КомпоновщикНастроек.ПользовательскиеНастройки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнформационныеБазы.Ссылка
	|ИЗ
	|	Справочник.ИнформационныеБазы КАК ИнформационныеБазы
	|ГДЕ
	|	ИнформационныеБазы.ПометкаУдаления = ЛОЖЬ
	|	И ИнформационныеБазы.Обновляемая = ИСТИНА";
	
	ВидИнформации = "";
	
	Для каждого ЭлементНастройки Из ПользовательскиеНастройки.Элементы Цикл
		Если ЭлементНастройки.Использование Тогда
			Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
				Если Строка(ЭлементНастройки.Параметр) = "ИнформационныеБазы" Тогда
					
					ИБ = ЭлементНастройки.Значение;
					Если ТипЗнч(ИБ) = Тип("СправочникСсылка.ИнформационныеБазы") Тогда
						ПараметрИБ = Новый СписокЗначений;
						ПараметрИБ.Добавить(ИБ);
					Иначе
						ПараметрИБ = ИБ;
					КонецЕсли;
					
					Запрос.Текст = Запрос.Текст + " И ИнформационныеБазы.Ссылка В(&ИнформационныеБазы)";
					Запрос.УстановитьПараметр("ИнформационныеБазы", ПараметрИБ);
					
				ИначеЕсли Строка(ЭлементНастройки.Параметр) = "ТипИБ" Тогда
					
					Запрос.Текст = Запрос.Текст + " И ИнформационныеБазы.ТипИнформационнойБазы = &ТипИБ";
					Запрос.УстановитьПараметр("ТипИБ", ЭлементНастройки.Значение);
					
				ИначеЕсли Строка(ЭлементНастройки.Параметр) = "Конфигурация" Тогда
					
					Запрос.Текст = Запрос.Текст + " И ИнформационныеБазы.КонфигурацияИБ = &Конфигурация";
					Запрос.УстановитьПараметр("Конфигурация", ЭлементНастройки.Значение);
					
				ИначеЕсли Строка(ЭлементНастройки.Параметр) = "ВидИнформации" Тогда
					
					ВидИнформации = ЭлементНастройки.Значение;
					
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	
	Если ВидИнформации = "" Тогда
		Сообщить("Не определен вид получаемой информации!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	СписокБаз = Новый СписокЗначений;
	СписокБаз.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Если СписокБаз.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных; // Создаем данные расшифровки 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных; // Создаем компоновщик макета 
	
	// Инициализируем макет компоновки используя схему компоновки данных 
	// и созданные ранее настройки и данные расшифровки
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, 
							Настройки, ДанныеРасшифровки);
							
	ТЗ = СобратьСведения("ТИ.ПолучитьСведения", СписокБаз, ВидИнформации);
		
	// Скомпонуем результат
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,
		Новый Структура("ТЗ", ТЗ), 
		ДанныеРасшифровки);
	
	ДокументРезультат.Очистить();
	
	// Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецПроцедуры

Функция СобратьСведения(ИмяПроцедуры, ПараметрИБ, Свойство) Экспорт

   //указывает число потоков, которые будут запущены одновременно
    ЧислоПараллельныхПотоков = 10;

    МассивЗаданий = Новый Массив;
	МассивАдресов = Новый Массив;
	
	Для каждого ЭлементСписка из ПараметрИБ Цикл

        МассивПараметров = Новый Массив;
        МассивПараметров.Добавить(ЭлементСписка.Значение);
        МассивПараметров.Добавить(Свойство);
		Адрес = ПоместитьВоВременноеХранилище("", Новый УникальныйИдентификатор);
		МассивПараметров.Добавить(Адрес);
		
		МассивАдресов.Добавить(Адрес);
		Задание = ФоновыеЗадания.Выполнить(ИмяПроцедуры, МассивПараметров);

		МассивЗаданий.Добавить(Задание);

		Если МассивЗаданий.Количество() >= ЧислоПараллельныхПотоков Тогда
		    Попытка
		        ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
		    Исключение
		    КонецПопытки;
		    МассивЗаданий.Очистить();
		КонецЕсли;

    КонецЦикла;

	Если МассивЗаданий.Количество() > 0 Тогда
	    Попытка
	        ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
	    Исключение
	    КонецПопытки;
	    МассивЗаданий.Очистить();
	КонецЕсли;

	РезультирующаяТаблица = Новый ТаблицаЗначений;
	Если МассивАдресов.Количество() Тогда
		ТаблицаИзХранилища = ПолучитьИзВременногоХранилища(МассивАдресов[0]);
		Если ТипЗнч(ТаблицаИзХранилища) = Тип("ТаблицаЗначений") Тогда
			РезультирующаяТаблица = ТаблицаИзХранилища.Скопировать();
			РезультирующаяТаблица.Очистить();
			Для каждого Адрес Из МассивАдресов Цикл
				ТЗ = ПолучитьИзВременногоХранилища(Адрес);
				Для каждого Стр Из ТЗ Цикл
					НоваяСтрока = РезультирующаяТаблица.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
				КонецЦикла; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли;
	
	Возврат РезультирующаяТаблица;

КонецФункции // ()
  
