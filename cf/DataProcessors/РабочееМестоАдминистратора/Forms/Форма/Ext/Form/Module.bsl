
&НаСервереБезКонтекста
Процедура УстановитьРелизНаСервере(ИзменениеКонфигурации, Релиз)
	
	ОсновнойРелиз = ?(Релиз.Родитель <> Справочники.Релизы.ПустаяСсылка(),Релиз.Родитель,Релиз);
	
	ДокОбъект = ИзменениеКонфигурации.ПолучитьОбъект();
	Если ИзменениеКонфигурации.Релиз.Пустая() Тогда
		ДокОбъект.Релиз = ОсновнойРелиз;
	ИначеЕсли ИзменениеКонфигурации.Релиз <> ОсновнойРелиз Тогда
	
		Сообщить("Устанавливаемый релиз не соответствует основному релизу документа: "+ИзменениеКонфигурации+". Операция отменена!");
		Возврат;
	
	КонецЕсли;
	
	Отбор = Новый Структура("Релиз", Справочники.Релизы.ПустаяСсылка());
	Результат = ДокОбъект.Изменения.НайтиСтроки(Отбор);
	Для каждого СтрокаИзменения Из Результат Цикл
		СтрокаИзменения.Релиз = Релиз;
	КонецЦикла; 
	ДокОбъект.Записать();
	Сообщить("Обработано "+ИзменениеКонфигурации);

КонецПроцедуры // ()
 
&НаСервереБезКонтекста
Процедура СоздатьБизнесПроцесс(ИзменениеКонфигурации, Релиз)
	
	ДокОбъект = ИзменениеКонфигурации.ПолучитьОбъект();
	ДокОбъект.Состояние = Перечисления.СостоянияИзмененийКонфигурации.НаТестировании;
	ДокОбъект.Записать();
	
	ПользовательИнициатор = ТИ.ПолучитьПользователяПоФизЛицу(ИзменениеКонфигурации.Заказчик.ФизЛицо, "Пользователь");
	ПользовательОтветственный = ТИ.ПолучитьПользователяПоФизЛицу(ИзменениеКонфигурации.Исполнитель.ФизЛицо, "Сотрудник");
	
	Если ПользовательИнициатор = Неопределено ИЛИ ПользовательОтветственный = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	БП = БизнесПроцессы.Задание.СоздатьБизнесПроцесс();
	БП.Дата = ТекущаяДата();
	БП.Автор = ПользовательОтветственный;
	БП.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
	БП.Выполнено = Ложь;
	БП.Исполнитель = ПользовательИнициатор;
	БП.Наименование = "Тестирование изменений конфигурации";
	
	БП.НаПроверке = Ложь;
	
	БП.Подтверждено = Ложь;
	БП.Предмет = ИзменениеКонфигурации;
	БП.Содержание = "Тестирование изменений конфигурации " + ИзменениеКонфигурации;
	БП.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
	//		БП.СрокИсполнения = ТекущаяДата()+ 86400*7;
	//		БП.АвторСтрокой = ПользовательОтветственный.Наименование;
	БП.ВнешнееЗадание = Ложь;
	БП.Релиз = Релиз;
	//		БП.СодержаниеПредмета = СодержаниеПредмета;
	БП.Записать();
	Попытка
		БП.Старт();
	Исключение
		ЗаписьЖурналаРегистрации(ОписаниеОшибки());
	КонецПопытки; 
	
КонецПроцедуры // ()

&НаСервереБезКонтекста
Процедура ОтправитьНаТестированиеНаСервере(ИзменениеКонфигурации, Релиз)
	
	Если ИзменениеКонфигурации.Релиз.Пустая() Тогда
		Сообщить("Не заполнен основной релиз в документе "+ИзменениеКонфигурации+". Операция отменена!");
		Возврат;
	КонецЕсли; 
	
	Отбор = Новый Структура("Релиз", Справочники.Релизы.ПустаяСсылка());
	Результат = ИзменениеКонфигурации.Изменения.НайтиСтроки(Отбор);
	Если Результат.Количество() Тогда
		Сообщить("в документе имеются строки с незаполненным релизом. "+ИзменениеКонфигурации+". Операция отменена!");
		Возврат;
	КонецЕсли; 
	
	Если НЕ (ИзменениеКонфигурации.Состояние = Перечисления.СостоянияИзмененийКонфигурации.Подготовлено 
		ИЛИ ИзменениеКонфигурации.Состояние = Перечисления.СостоянияИзмененийКонфигурации.КПеревыпуску 
		ИЛИ ИзменениеКонфигурации.Состояние = Перечисления.СостоянияИзмененийКонфигурации.Отклонено) Тогда
		Сообщить("При отправке на тестирование состяние документа должно быть Подготовлено, К перевыпуску или Отклонено. "+ИзменениеКонфигурации+", состяние "+ИзменениеКонфигурации.Состояние+". Операция отменена!");
//		Возврат;
	КонецЕсли; 
	
	СоздатьБизнесПроцесс(ИзменениеКонфигурации, Релиз);
	Сообщить("Обработано "+ИзменениеКонфигурации);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СнятьСТестированияНаСервере(ИзменениеКонфигурации)
	
	ДокОбъект = ИзменениеКонфигурации.ПолучитьОбъект();
	ДокОбъект.Состояние = Перечисления.СостоянияИзмененийКонфигурации.СнятоСТестирования;
	ДокОбъект.Записать();
	Сообщить("Обработано "+ИзменениеКонфигурации);
	
КонецПроцедуры // ()

&НаКлиенте
Процедура РелизПриИзменении(Элемент)
	
	Если Релиз.Пустая() И АвтоматическийОтбор = Истина Тогда
		АвтоматическийОтбор = Ложь;
	КонецЕсли; 
	
	УстановитьОтбор();
	УправлениеВидимостью();

КонецПроцедуры

&НаСервере
Процедура УстановитьОтбор()
	
	//сначала убираем все отборы
	Если ОтборДляОперацииУстановитьРелиз Тогда
		УстановитьОтборДляОперацииУстановитьРелиз();
		ОтборДляОперацииУстановитьРелиз = Ложь;
	КонецЕсли; 
	
	Если ОтборДляОперацииОтправитьНаТестирование Тогда
		УстановитьОтборДляОперацииОтправитьНаТестирование();
		ОтборДляОперацииОтправитьНаТестирование = Ложь;
	КонецЕсли; 
	
	Если ОтборДляОперацииСнятьСТестирования Тогда
		УстановитьОтборДляОперацииСнятьСТестирования();
		ОтборДляОперацииСнятьСТестирования = Ложь;
	КонецЕсли; 
	
	//устанавливаем отборы
	Если АвтоматическийОтбор Тогда
		Если НЕ Релиз.Пустая() Тогда
			Если ПереключательВидОперации = 0 Тогда
				Если Релиз.Родитель = Справочники.Релизы.ПустаяСсылка() Тогда
					
					Релизы = Справочники.Релизы.ПустаяСсылка();
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
					Состояние = Перечисления.СостоянияИзмененийКонфигурации.Подготовлено;
					
				Иначе
					Релизы = Новый СписокЗначений;
					Релизы.Добавить(Справочники.Релизы.ПустаяСсылка());
					Релизы.Добавить(Релиз.Родитель);
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
					Состояние = Перечисления.СостоянияИзмененийКонфигурации.КПеревыпуску;
				КонецЕсли; 
					
				УстановитьОтборДляОперацииУстановитьРелиз(Состояние, Релиз.Владелец, Релизы, 
					Истина, ВидСравненияОтбора);
				
				ОтборДляОперацииУстановитьРелиз = Истина;
			ИначеЕсли ПереключательВидОперации = 1 Тогда
				Если Релиз.Родитель = Справочники.Релизы.ПустаяСсылка() Тогда
					Релизы = Релиз;
					Состояние = Перечисления.СостоянияИзмененийКонфигурации.Подготовлено;
				Иначе
					Релизы = Релиз.Родитель;
					Состояние = Перечисления.СостоянияИзмененийКонфигурации.КПеревыпуску;
				КонецЕсли; 
				
				УстановитьОтборДляОперацииОтправитьНаТестирование(Состояние, Релизы.Владелец, Релизы, Ложь);
				ОтборДляОперацииОтправитьНаТестирование = Истина;
			ИначеЕсли ПереключательВидОперации = 2 Тогда
				Если Релиз.Родитель = Справочники.Релизы.ПустаяСсылка() Тогда
					Релизы = Релиз;
					Состояние = Перечисления.СостоянияИзмененийКонфигурации.Подготовлено;
				Иначе
					Релизы = Релиз.Родитель;
					Состояние = Перечисления.СостоянияИзмененийКонфигурации.КПеревыпуску;
				КонецЕсли; 
				
				УстановитьОтборДляОперацииСнятьСТестирования(Состояние, Релизы.Владелец, Релизы, Истина);
				ОтборДляОперацииСнятьСТестирования = Истина;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры // УстановитьОтбор()
 
&НаСервере
Процедура УстановитьОтборДляОперацииУстановитьРелиз(Состояние = Неопределено, Конфигурация = Неопределено, Релизы = Неопределено, ОтборПоРелизу = Ложь, ВидСравненияОтбора = Неопределено)

	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	//	СписокИзменений, "Отменено",,,, Ложь);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокИзменений, "Состояние", Состояние,,, Состояние <> Неопределено И Не Состояние.Пустая());
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокИзменений, "Конфигурация", Конфигурация,,, Конфигурация <> Неопределено И Не Конфигурация.Пустая());
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокИзменений, "Релиз", Релизы, ВидСравненияОтбора,,ОтборПоРелизу);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДляОперацииОтправитьНаТестирование(Состояние = Неопределено, Конфигурация = Неопределено, Релизы = Неопределено, Откат = Неопределено)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокИзменений, "Отменено", Откат,,,Откат <> Неопределено);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокИзменений, "Состояние", Состояние,,, Состояние <> Неопределено И Не Состояние.Пустая());
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокИзменений, "Конфигурация", Конфигурация,,, Конфигурация <> Неопределено И Не Конфигурация.Пустая());
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокИзменений, "Релиз", Релизы,,,Релизы <> Неопределено И НЕ Релизы.Пустая());
		
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДляОперацииСнятьСТестирования(Состояние = Неопределено, Конфигурация = Неопределено, Релизы = Неопределено, Откат = Неопределено)

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокИзменений, "Отменено", Откат,,,Откат <> Неопределено);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокИзменений, "Состояние", Состояние,,, Состояние <> Неопределено И Не Состояние.Пустая());
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокИзменений, "Конфигурация", Конфигурация,,, Конфигурация <> Неопределено И Не Конфигурация.Пустая());
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокИзменений, "Релиз", Релизы,,,Релизы <> Неопределено И НЕ Релизы.Пустая());
		
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОперацию(Команда)
	
	Если Релиз.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Для выполнения операции необходимо выбрать релиз!'"),,
			"Релиз",,
			);
	КонецЕсли; 
		
	ВыделенныеСтроки = ЭтаФорма.Элементы.СписокИзменений.ВыделенныеСтроки;
	Для каждого ИзменениеКонфигурации Из ВыделенныеСтроки Цикл
		Если ТипЗнч(ИзменениеКонфигурации) = Тип("ДокументСсылка.ИзменениеКонфигурации") Тогда
			
			Если ти.ПолучитьРеквизитПоСсылке(ИзменениеКонфигурации, "ТипРелиза") = ПредопределенноеЗначение("Перечисление.ТипРелиза.Рабочий") Тогда
				Сообщить("ВНИМАНИЕ!!! ПЕРЕВЫПУСК РАБОЧЕГО РЕЛИЗА. Не забудьте внести изменения конфигурации в тестовый релиз. Документ: "+ИзменениеКонфигурации, СтатусСообщения.ОченьВажное);
			КонецЕсли; 
			
			Если Команда.Имя = "УстановитьРелиз" Тогда
				УстановитьРелизНаСервере(ИзменениеКонфигурации, Релиз);
			ИначеЕсли Команда.Имя = "ОтправитьНаТестирование" Тогда
				ОтправитьНаТестированиеНаСервере(ИзменениеКонфигурации, Релиз);
			ИначеЕсли Команда.Имя = "СнятьСТестирования" Тогда
				СнятьСТестированияНаСервере(ИзменениеКонфигурации);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	Элементы.СписокИзменений.Обновить();
		
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
//	АвтоматическийОтбор = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПереключательВидОперацииПриИзменении(Элемент)
	УстановитьОтбор();
	УправлениеВидимостью();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПриИзменении(Элемент)
	УстановитьОтбор();
	УправлениеВидимостью();
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостью()
	
	Если Релиз.Пустая() Тогда
		Элементы.Группа4.Видимость = Ложь;
		Элементы.СформироватьОтчет.Видимость = Ложь;
	Иначе
		Элементы.Группа4.Видимость = Истина;
		Элементы.СформироватьОтчет.Видимость = Истина;
	КонецЕсли; 
	
	Если АвтоматическийОтбор  Тогда
		Элементы.Группа9.Видимость = Истина;
		Если ЗначениеЗаполнено(Релиз) Тогда
			Элементы.Группа2.Видимость = Истина;
			Если ПереключательВидОперации = 0 Тогда
				Элементы.УстановитьРелиз.Видимость = Истина;
				Элементы.ОтправитьНаТестирование.Видимость = Ложь;
				Элементы.СнятьСТестирования.Видимость = Ложь;
			ИначеЕсли ПереключательВидОперации = 1 Тогда
				Элементы.УстановитьРелиз.Видимость = Ложь;
				Элементы.ОтправитьНаТестирование.Видимость = Истина;
				Элементы.СнятьСТестирования.Видимость = Ложь;
			ИначеЕсли ПереключательВидОперации = 2 Тогда
				Элементы.УстановитьРелиз.Видимость = Ложь;
				Элементы.ОтправитьНаТестирование.Видимость = Ложь;
				Элементы.СнятьСТестирования.Видимость = Истина;
			КонецЕсли; 
		Иначе
			Элементы.Группа2.Видимость = Ложь;
		КонецЕсли; 
	Иначе
		Элементы.Группа9.Видимость = Ложь;
		Если ЗначениеЗаполнено(Релиз) Тогда
			Элементы.Группа2.Видимость = Истина;
			Элементы.УстановитьРелиз.Видимость = Истина;
			Элементы.ОтправитьНаТестирование.Видимость = Истина;
			Элементы.СнятьСТестирования.Видимость = Истина;
		Иначе
			Элементы.Группа2.Видимость = Ложь;
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры // УправлениеВидимостью()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УправлениеВидимостью();
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	СформироватьНаСервере();
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура СформироватьНаСервере()

	//Отчет = Отчеты.ОтчетПоИзменениямКонфигурации.Создать();
	//Отчеты.ОтчетПоИзменениямКонфигурации.ПолучитьМакет(
	//Получаем схему из макета
	СхемаКомпоновкиДанных = Отчеты.ОтчетПоИзменениямКонфигурации.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	ФормаОтчета = Отчеты.ОтчетПоИзменениямКонфигурации.ПолучитьФорму("ФормаОтчета", ЭтаФорма, УникальныйИдентификатор); 
	
	//Из схемы возьмем настройки по умолчанию
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	//Помещаем в переменную данные о расшифровке данных
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	//Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	//Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	
	//Очищаем поле табличного документа
	Результат = ФормаОтчета.ЭлементыФормы.Результат;
	Результат.Очистить();
	
	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	

КонецПроцедуры // СформироватьНаСервере()
  
