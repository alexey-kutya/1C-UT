&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПриОткрытииНаСервере();
	ЗаполнитьБазы();
	УправлениеВидимостью();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьБазы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗ.База
		|ПОМЕСТИТЬ ВТТЧБазы
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Базы.Ссылка,
		|	ТЧБазы.База
		|ИЗ
		|	Справочник.ИнформационныеБазы КАК Базы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТЧБазы КАК ТЧБазы
		|		ПО Базы.Ссылка = ТЧБазы.База
		|ГДЕ
		|	ТЧБазы.База ЕСТЬ NULL 
		|	И Базы.ПометкаУдаления = ЛОЖЬ
		|	И Базы.ТипИнформационнойБазы = &ТипИнформационнойБазы
		|	И Базы.КонфигурацияИБ = &КонфигурацияИБ";

	Запрос.УстановитьПараметр("ТЗ",Объект.БазыТестирования.Выгрузить());
	Запрос.УстановитьПараметр("ТипИнформационнойБазы",Перечисления.ТипИнформационнойБазы.Тестовая);
	Запрос.УстановитьПараметр("КонфигурацияИБ",Объект.Конфигурация);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрока = Объект.БазыТестирования.Добавить();
		НоваяСтрока.База = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	Объект.БазыТестирования.Сортировать("База");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	УстановитьСнятьФлажки(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	УстановитьСнятьФлажки(Ложь);
КонецПроцедуры
 
&НаСервере
Процедура УстановитьСнятьФлажки(ЗначениеФлажка)
	ТЗ = Объект.БазыТестирования.Выгрузить();
	ТЗ.ЗаполнитьЗначения(ЗначениеФлажка,"Использовать");
	Объект.БазыТестирования.Загрузить(ТЗ);
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостью()

	//Если Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияИзмененийКонфигурации.Отклонено") 
	//	ИЛИ Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияИзмененийКонфигурации.ПустаяСсылка") 
	//	ИЛИ Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияИзмененийКонфигурации.Подготовлено")
	//	ИЛИ Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияИзмененийКонфигурации.КПеревыпуску")
	//	Тогда
	//	
	//	Элементы.ДобавитьВВыпуск.Видимость = Истина;
	//Иначе
	//	Элементы.ДобавитьВВыпуск.Видимость = Ложь;
	//КонецЕсли;
	//
	//Если Элементы.ДобавитьВВыпуск.Видимость И ДобавитьВВыпуск Тогда
	//	Элементы.Выпуск.Видимость = Истина;
	//	Если Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияИзмененийКонфигурации.Отклонено") Тогда
	//		Выпуск = 1;
	//	КонецЕсли; 
	//Иначе
	//	Элементы.Выпуск.Видимость = Ложь;
	//КонецЕсли;
	
	Если НЕ ТИ.ДоступнаРоль("ПолныеПрава") И 
		(Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияИзмененийКонфигурации.НаТестировании") 
		ИЛИ Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияИзмененийКонфигурации.Согласовано") 
		ИЛИ Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияИзмененийКонфигурации.СнятоСТестирования"))
		Тогда
	
		ЭтаФорма.ТолькоПросмотр = Истина;
	
	КонецЕсли;
	
	Если Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияИзмененийКонфигурации.Отклонено") ИЛИ Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияИзмененийКонфигурации.КПеревыпуску") Тогда
		Элементы.Отменено.Доступность = Истина;
	Иначе
		Элементы.Отменено.Доступность = Ложь;
	КонецЕсли;
	
	Если Объект.ЛюбаяБазаДляТестирования Тогда
		Элементы.Группа15.Видимость = Ложь;
	Иначе
		Элементы.Группа15.Видимость = Истина;
	КонецЕсли; 

КонецПроцедуры // УправлениеВидимостью()

Процедура ПриОткрытииНаСервере()
	//Если НЕ Объект.ЗначСписокБаз = "" Тогда
	//	СписокБаз = ЗначениеИзСтрокиВнутр(Объект.ЗначСписокБаз);
	//	Если ТипЗнч(СписокБаз) = Тип("СписокЗначений") Тогда
	//		СписокБазДляТестирования = ЗначениеИзСтрокиВнутр(Объект.ЗначСписокБаз);
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПраваРедактированияЗафиксированных()
	Возврат РольДоступна("ПолныеПрава");
КонецФункции

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Объ = РеквизитФормыВЗначение("Объект");
	Если НЕ(ЗначениеЗаполнено(Объ.КомментарийХранилища)) Тогда
		Объ.КомментарийХранилища = СокрЛП(Объ);
		Объ.Записать();
		ЗначениеВРеквизитФормы(Объ, "Объект");
	КонецЕсли;
	
	Если НЕ Объект.Состояние = СостояниеПриСоздании И Объект.Состояние = Перечисления.СостоянияИзмененийКонфигурации.КПеревыпуску Тогда
		
		Если Объект.Отменено Тогда
			Шаблон = ПредопределенноеЗначение("Справочник.ШаблоныСообщений.УведомлениеОПеревыпускеОткат");
		Иначе
			Шаблон = ПредопределенноеЗначение("Справочник.ШаблоныСообщений.УведомлениеОПеревыпуске");
		КонецЕсли; 
		
		СообщениеСтруктура = ТИ.СформироватьЗаголовокИТекстСообщения(Объект.Ссылка, Шаблон);
			
		Копия = Новый Массив;
		Копия.Добавить(Константы.АдминистраторСистемы.Получить().АдресЭлектроннойПочты);
		Копия.Добавить(Пользователи.ТекущийПользователь().ФизЛицо.АдресЭлектроннойПочты);
		ТИ.СоздатьСообщение(Объект.Ссылка, СообщениеСтруктура, Пользователи.ТекущийПользователь().ФизЛицо, 
								Константы.АдресHelpDesk.Получить(), Копия);
	КонецЕсли; 
	
КонецПроцедуры
  
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияИзмененийКонфигурации.ПустаяСсылка") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Необходимо задать регистрацию для выпуска.'"),,
			"Объект.Состояние",,
			Отказ);
		
		Возврат;
	КонецЕсли; 
	
	Если НЕ Объект.ЛюбаяБазаДляТестирования И Объект.БазыТестирования.НайтиСтроки(Новый Структура("Использовать", Истина)).Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Необходимо задать базы для тестирования.'"),,
			"Объект.БазыТестирования",,
			Отказ);
		Возврат;
		
	КонецЕсли; 
	
	//Объект.СтрБазыДляТестирования = "";
	//Для Каждого База Из СписокБазДляТестирования Цикл
	//	Объект.СтрБазыДляТестирования = Объект.СтрБазыДляТестирования + СокрЛП(База.Значение) + "; ";
	//КонецЦикла;
	
	
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	МассивСтрок = ТекущийОбъект.Изменения.НайтиСтроки(Новый Структура("НовыйОбъектМетаданных, ВидЭлемента, ЭлементСтруктуры", Истина, Перечисления.ВидыЭлементовСтруктурыОбъектаМетаданных.ПустаяСсылка(), Справочники.ЭлементыСтруктурыОбъектаМетаданных.ПустаяСсылка()));
	ЕстьНовыеОбъекты = МассивСтрок.Количество() > 0;
	Если НЕ ТекущийОбъект.НовыеОбъекты = ЕстьНовыеОбъекты Тогда
		ТекущийОбъект.НовыеОбъекты = ЕстьНовыеОбъекты;
	КонецЕсли;
	
	ТекущийОбъект.ЕстьФормы = ЕстьФормыОбъектов();
	
//	ТекущийОбъект.ЗначСписокБаз = ЗначениеВСтрокуВнутр(СписокБазДляТестирования);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзменения(Команда)
	
	Если Объект.Конфигурация.Пустая() Тогда
		Сообщить("Не заполнено поле Конфигурация!");
		Возврат;
	КонецЕсли; 
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выберите файл выгрузки с данными из хранилища";
	Диалог.ПолноеИмяФайла = "";
	Диалог.ПредварительныйПросмотр = Истина;
	Диалог.Фильтр = "Табличный документ (*.mxl)|*.mxl|";

	Если Диалог.Выбрать() Тогда
		ПомещаемыеФайлы = Новый Массив;
		Описание = Новый ОписаниеПередаваемогоФайла(Диалог.ПолноеИмяФайла, "");
		ПомещаемыеФайлы.Добавить(Описание);

		ПомещенныеФайлы = Новый Массив;

		Если ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, ЭтаФорма.УникальныйИдентификатор) Тогда        
			РазобратьТаблицуНаСервере(ПомещенныеФайлы);
		Иначе	
		КонецЕсли;		
		
	Иначе
	    Отказ = Истина;
	    Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РазобратьТаблицуНаСервере(ПомещенныеФайлы)
	
	ДвоичныеДанныеМакета = ПолучитьИзВременногоХранилища(ПомещенныеФайлы[0].Хранение);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("mxl");
    ДвоичныеДанныеМакета.Записать(ИмяВременногоФайла);	
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Прочитать(ИмяВременногоФайла);
	ТаблицаИзменений = Объект.Изменения.Выгрузить();
	ТаблицаИзменений.Очистить();
	Версия = "";
	Для СчСтрок = 1 по ТабДок.ВысотаТаблицы Цикл
		Текст1 = ТабДок.Область(СчСтрок, 1).Текст;
		Текст2 = ТабДок.Область(СчСтрок, 2).Текст;
		Если Текст1 = "Версия:" Тогда
			ВидИзменения = "";
			Версия = Текст2;
			Продолжить;
		ИначеЕсли Текст1 = "Изменены:" ИЛИ Текст1 = "Добавлены:" ИЛИ Текст1 = "Удалены:" Тогда
			ВидИзменения = Текст1;
		КонецЕсли;
		
		ВидЭлемента = "";
		ЭлементОбъекта = "";
		
		//Справочник.Контрагенты.Форма.ФормаЭлемента	
		Если Версия <> "" И ВидИзменения <> "" И Текст2 <> "" Тогда
			ПерваяТочка = Найти(Текст2,".");
			Если ПерваяТочка > 0 Тогда
				ВидМетаданных = Лев(Текст2, ПерваяТочка-1); //Справочник
				ПраваяЧасть = Прав(Текст2, СтрДлина(Текст2)-ПерваяТочка); //Контрагенты.Форма.ФормаЭлемента
				ВтораяТочка = Найти(ПраваяЧасть,".");
				Если ВтораяТочка > 0 Тогда
					ОбъектМетаданных = Лев(ПраваяЧасть, ВтораяТочка-1); //Контрагенты
					ПраваяЧасть = Прав(ПраваяЧасть, СтрДлина(ПраваяЧасть)-ВтораяТочка); //Форма.ФормаЭлемента
					ТретьяТочка = Найти(ПраваяЧасть, ".");
					Если ТретьяТочка Тогда
						ВидЭлемента = Лев(ПраваяЧасть, ТретьяТочка-1); //Форма
						ЭлементОбъекта = Прав(ПраваяЧасть, СтрДлина(ПраваяЧасть)-ТретьяТочка); //ФормаЭлемента
					КонецЕсли; 
				Иначе
					ОбъектМетаданных = ПраваяЧасть;
				КонецЕсли;
				
				ВидМетаданныхСсылка = Справочники.ОбъектыМетаданных.НайтиПоНаименованию(ВидМетаданных,Истина,Справочники.ОбъектыМетаданных.ПустаяСсылка(),Объект.Конфигурация);
				Если ВидМетаданныхСсылка.Пустая() ИЛИ НЕ ВидМетаданныхСсылка.ЭтоГруппа Тогда
					ВидМетаданныхОбъект = Справочники.ОбъектыМетаданных.СоздатьГруппу();
					ВидМетаданныхОбъект.Наименование = ВидМетаданных;
					ВидМетаданныхОбъект.Владелец = Объект.Конфигурация;
					ВидМетаданныхОбъект.Записать();
					ВидМетаданныхСсылка = ВидМетаданныхОбъект.Ссылка;
				КонецЕсли;
				
				ОбъектМетаданныхСсылка = Справочники.ОбъектыМетаданных.НайтиПоНаименованию(ОбъектМетаданных,Истина,ВидМетаданныхСсылка,Объект.Конфигурация);
				Если ОбъектМетаданныхСсылка.Пустая() ИЛИ ОбъектМетаданныхСсылка.ЭтоГруппа Тогда
					ОбъектМетаданныхОбъект = Справочники.ОбъектыМетаданных.СоздатьЭлемент();
					ОбъектМетаданныхОбъект.Родитель = ВидМетаданныхСсылка;
					ОбъектМетаданныхОбъект.Наименование = ОбъектМетаданных;
					ОбъектМетаданныхОбъект.Владелец = Объект.Конфигурация;
					ОбъектМетаданныхОбъект.Записать();
					ОбъектМетаданныхСсылка = ОбъектМетаданныхОбъект.Ссылка;
				КонецЕсли;
				
				ВидЭлементаСсылка = Перечисления.ВидыЭлементовСтруктурыОбъектаМетаданных.ПустаяСсылка();
				ЭлементСсылка = Справочники.ЭлементыСтруктурыОбъектаМетаданных.ПустаяСсылка();
				
				Если ЗначениеЗаполнено(ВидЭлемента) И ЗначениеЗаполнено(ЭлементОбъекта) Тогда
					
					ВидЭлементаСсылка = Перечисления.ВидыЭлементовСтруктурыОбъектаМетаданных[ВидЭлемента];
	
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	ЭлементыСтруктурыОбъектаМетаданных.Ссылка
					|ИЗ
					|	Справочник.ЭлементыСтруктурыОбъектаМетаданных КАК ЭлементыСтруктурыОбъектаМетаданных
					|ГДЕ
					|	ЭлементыСтруктурыОбъектаМетаданных.Владелец = &Владелец
					|	И ЭлементыСтруктурыОбъектаМетаданных.ВидЭлемента = &ВидЭлемента
					|	И ЭлементыСтруктурыОбъектаМетаданных.Наименование = &Наименование";
					
					Запрос.УстановитьПараметр("ВидЭлемента", ВидЭлементаСсылка);
					Запрос.УстановитьПараметр("Владелец", ОбъектМетаданныхСсылка);
					Запрос.УстановитьПараметр("Наименование", ЭлементОбъекта);
					
					РезультатЗапроса = Запрос.Выполнить();
					
					Если РезультатЗапроса.Пустой() Тогда
						ЭлементОбъект = Справочники.ЭлементыСтруктурыОбъектаМетаданных.СоздатьЭлемент();
						ЭлементОбъект.Наименование = ЭлементОбъекта;
						ЭлементОбъект.ВидЭлемента = ВидЭлементаСсылка;
						ЭлементОбъект.Владелец = ОбъектМетаданныхСсылка;
						ЭлементОбъект.Записать();
						ЭлементСсылка = ЭлементОбъект.Ссылка;
					Иначе
						ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
						ВыборкаДетальныеЗаписи.Следующий();
					    ЭлементСсылка = ВыборкаДетальныеЗаписи.Ссылка;
					КонецЕсли; 
				КонецЕсли; 
				
				НоваяСтрока = ТаблицаИзменений.Добавить();
				НоваяСтрока.Версия = Версия;
				НоваяСтрока.ГруппаМетаданных = ВидМетаданныхСсылка;
				НоваяСтрока.ОбъектМетаданных = ОбъектМетаданныхСсылка;
				
				Если ЗначениеЗаполнено(ВидЭлементаСсылка) Тогда
					НоваяСтрока.ВидЭлемента = ВидЭлементаСсылка;
				КонецЕсли; 
				
				Если ЗначениеЗаполнено(ЭлементСсылка) Тогда
					НоваяСтрока.ЭлементСтруктуры = ЭлементСсылка;
				КонецЕсли; 
				
				Если ВидИзменения = "Добавлены:" Тогда
					НоваяСтрока.НовыйОбъектМетаданных = Истина;
				ИначеЕсли ВидИзменения = "Удалены:" Тогда
					НоваяСтрока.УдалениеМетаданных = Истина;
				КонецЕсли; 
				
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
	ТаблицаИзменений.Свернуть("Версия, ГруппаМетаданных, ОбъектМетаданных, ВидЭлемента ,ЭлементСтруктуры, НовыйОбъектМетаданных, УдалениеМетаданных");
	Для каждого СтрокаТИ Из ТаблицаИзменений Цикл
	
		НоваяСтрока = Объект.Изменения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТИ);
	КонецЦикла; 
	
	УдалитьФайлы(ИмяВременногоФайла);

КонецПроцедуры // РазобратьТаблицуНаСервере()

//&НаКлиенте
//Процедура ДобавитьВВыпуск(Команда)
//	
////	ТИ.ИзменитьСтатусИзмененияКонфигурации(0, Объект.Ссылка);
//////	ИзменитьСостояниеНаСервере(ПредопределенноеЗначение("Перечисление.СостоянияИзмененийКонфигурации.Подготовлено"));
////	Закрыть();
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ДобавитьВПеревыпуск(Команда)
//	
//	ТИ.ИзменитьСтатусИзмененияКонфигурации(5, Объект.Ссылка);
////	ИзменитьСостояниеНаСервере(ПредопределенноеЗначение("Перечисление.СостоянияИзмененийКонфигурации.КПеревыпуску"));
//	Закрыть();
//	
//КонецПроцедуры

&НаСервере
Процедура ИзменитьСостояниеНаСервере(СостояниеИзмененияКонфигурации)
	
	ИзменениеКонфигурацииОбъект = РеквизитФормыВЗначение("Объект");
	ИзменениеКонфигурацииОбъект.Состояние = СостояниеИзмененияКонфигурации;
	ИзменениеКонфигурацииОбъект.Записать();
	ЗначениеВРеквизитФормы(ИзменениеКонфигурацииОбъект, "Объект");
	
КонецПроцедуры // ()

&НаКлиенте
Процедура ИзмененияПередНачаломИзменения(Элемент, Отказ)
	ПроверкаВозможностиРедактированияСтроки(Элемент, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ИзмененияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Копирование Тогда
		Элемент.ТекущиеДанные.Релиз = ПредопределенноеЗначение("Справочник.Релизы.ПустаяСсылка");
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ИзмененияПередУдалением(Элемент, Отказ)
	ПроверкаВозможностиРедактированияСтроки(Элемент, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиРедактированияСтроки(Элемент, Отказ)
	Если НЕ Элемент.ТекущиеДанные.Релиз.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Данное изменение включено в релиз "+Элемент.ТекущиеДанные.Релиз+". Редактирование запрещено!'"),,
			"Объект.Изменения",,
			Отказ);
	КонецЕсли; 
КонецПроцедуры // ПроверкаВозможностиРедактированияСтроки()

&НаСервере
Процедура УстановитьДоступностьТипаРелиза()

	Элементы.ТипРелиза.Доступность = Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияИзмененийКонфигурации.КПеревыпуску");

КонецПроцедуры // УстановитьВидимостьТипаРелиза()
 
//&НаКлиенте
//Процедура ДобавитьВВыпускПриИзменении(Элемент)
//	УправлениеВидимостью();
//КонецПроцедуры

//&НаКлиенте
//Процедура ВыпускПриИзменении(Элемент)
//	Если Выпуск <> 1 И Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияИзмененийКонфигурации.Отклонено") Тогда
//		Выпуск = 1;
//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//			НСтр("ru = 'Изменение в статусе отклонено может быть добавлено только во внеочередной выпуск.'"),,
//			"Выпуск",,
//			);
//	КонецЕсли; 
//КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//Если НЕ Объект.Состояние = СостояниеПриСоздании И Объект.Состояние = Перечисления.СостоянияИзмененийКонфигурации.КПеревыпуску Тогда
	//	
	//	Если Объект.Отменено Тогда
	//		Шаблон = ПредопределенноеЗначение("Справочник.ШаблоныСообщений.УведомлениеОПеревыпускеОткат");
	//	Иначе
	//		Шаблон = ПредопределенноеЗначение("Справочник.ШаблоныСообщений.УведомлениеОПеревыпуске");
	//	КонецЕсли; 
	//	
	//	СообщениеСтруктура = ТИ.СформироватьЗаголовокИТекстСообщения(Объект.Ссылка, Шаблон);
	//		
	//	Копия = Новый Массив;
	//	Копия.Добавить(Константы.АдминистраторСистемы.Получить().АдресЭлектроннойПочты);
	//	Копия.Добавить(Пользователи.ТекущийПользователь().ФизЛицо.АдресЭлектроннойПочты);
	//	ТИ.СоздатьСообщение(Объект.Ссылка, СообщениеСтруктура, Пользователи.ТекущийПользователь().ФизЛицо, 
	//							Константы.АдресHelpDesk.Получить(), Копия);
	//КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ТИ.ДоступнаРоль("ПолныеПрава") Тогда
		СтандартнаяОбработка = Ложь;
		Элементы.Состояние.СписокВыбора.Очистить();
		Если Объект.Состояние.Пустая() Тогда
			Элементы.Состояние.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияИзмененийКонфигурации.Подготовлено"));
			Элементы.Состояние.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияИзмененийКонфигурации.КПеревыпуску"));
		ИначеЕсли Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияИзмененийКонфигурации.Отклонено") Тогда
			Элементы.Состояние.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияИзмененийКонфигурации.Подготовлено"));
			Элементы.Состояние.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияИзмененийКонфигурации.КПеревыпуску"));
		ИначеЕсли Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияИзмененийКонфигурации.КПеревыпуску") Тогда
			Элементы.Состояние.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияИзмененийКонфигурации.Подготовлено"));
		ИначеЕсли Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияИзмененийКонфигурации.Подготовлено") Тогда
			Элементы.Состояние.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияИзмененийКонфигурации.КПеревыпуску"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПриИзменении(Элемент)
	
	Если (Объект.Состояние.Пустая() ИЛИ Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияИзмененийКонфигурации.Подготовлено")) И Объект.Отменено Тогда
		Объект.Отменено = Ложь;
	КонецЕсли; 
	УправлениеВидимостью();
	
	УстановитьДоступностьТипаРелиза();

КонецПроцедуры

&НаКлиенте
Процедура ЛюбаяБазаДляТестированияПриИзменении(Элемент)
	УправлениеВидимостью();
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СостояниеПриСоздании = Объект.Состояние;
	УстановитьДоступностьТипаРелиза();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если Объект.НовыеОбъекты Тогда
		ПоказатьПредупреждение(,"Не забудьте для новых объектов задать право на Чтение в роли ПользовательРА!");
	КонецЕсли;
	
	Если Объект.ЕстьФормы Тогда
	
		ПоказатьПредупреждение(,"Не забудьте проверить привязки для форм объектов!");
	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ЕстьФормыОбъектов()

	ЕстьФормыОбъектов = Ложь;
	Для каждого СтрокаКоллекции Из Объект.Изменения Цикл
	    Наименование = СтрокаКоллекции.ЭлементСтруктуры.Наименование;
		Если Наименование = "ФормаДокумента"
			ИЛИ Наименование = "ФормаЭлемента" Тогда
		
			ЕстьФормыОбъектов = Истина;
			Прервать;
		
		КонецЕсли; 
	
	КонецЦикла; 
	
	Возврат ЕстьФормыОбъектов;

КонецФункции // ЕстьФормыОбъектов()
 

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияИзмененийКонфигурации.КПеревыпуску")
		И Не ЗначениеЗаполнено(Объект.ТипРелиза) Тогда
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Не указан тип релиза!";
		Сообщение.Поле = "Объект.ТипРелиза";
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры
